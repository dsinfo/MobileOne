<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OneCorLib</name>
    </assembly>
    <members>
        <member name="T:TheOne.Diagnostics.FileLogHelper">
            <summary>
            파일에 로그를 기록하는 정적 메서드를 제공한다.
            </summary>
            <remarks>
            로그 파일이 생성되는 디렉터리는 Configuration 파일의 logDirectory 특성의 값을 따른다.
            만약 이 키가 존재하지 않는 경우 C:\Temp 디렉토리를 사용한다. 주어진 로그 파일
            디렉토리가 존재하지 않는다면 자동으로 생성될 것이다.
            <br></br>
            Configuration 파일의 위치는 AppSettings의 ConfigurationFile 키값에서 지정하며 AppSettings의 ConfigurationFile
            키값이 없거나 LogSection에 FileLog에 대한 설정이 없으면 기본값을 사용한다. 
            <br></br>
            로그 파일은 주어진 파일명(기본값은 DefaultFilePrefix 속성 값 사용) 뒤에 
            yymmdd 형식의 날짜 suffix가 붙는다.
            이는 로그 파일이 일별로 생성됨을 의미한다. 로그 파일의 각 로그 메시지 엔트리는
            로그 메시지의 레벨(아래 참조)의 첫글자와 로그의 발생 시간이 같이 표시된다.
            <br></br>
            예) V 11:22:21.122: Log message sample...
            <br></br>
            로깅 메시지는 Error, Warnning, Information, Verbose 4가지 레벨로 구성된다.
            Error는 오류를, Warnning은 경고를, Information은 정보를, Verbose는 디버깅이나
            트레이스 용도로 사용한다.
            <br></br>
            로깅 메시지는 BaseLogLevel을 기준으로 로그 파일에 기록되거나 기록되지 않을 수도 있다.
            즉, BaseLogLevel 보다 낮은 레벨의 로깅 메시지는 파일에 기록되지 않는다.
            예를 들어 BaseLogLevel이 Information 인 경우, Verbose 로깅 메시지는 로그 파일에
            기록되지 않는다. 개발 및 초기 운영 단계에서는 BaseLogLevel을 낮은 수준(Verbose)에 두어 다양한
            로그 메시지를 남김으로써 디버깅에 도움이 되도록 하고, 시스템 안정화 이후에
            로그 레벨을 높임으로써 불필요한 로그 메시지가 성능을 저하시키지 않도록 한다.
            <br></br>
            BaseLogLevel은 NeoDEEX 구성 파일의 baseLogLevel 특성의 값에 의해 결정된다. 
            NeoDEEX 구성 파일이 없는 경우 BaseLogLevel의 기본값은 <see cref="F:TheOne.Diagnostics.LogLevel.Verbose"/>이다.
            </remarks>
            <example>
            NeoDEEX 구성 파일의 LogSection 예제.
            <code>
            &lt;?xml version="1.0" encoding="utf-8"?&gt;
            &lt;theone.configuration&gt;
            	&lt;logSettings&gt;
            		&lt;fileLog enabled="true" baseLogLevel="Information" logDirectory="C:\Temp" defaultPrefix="SmartOne" /&gt;
            		&lt;eventLog enabled="true" baseLogLevel="Warnning" eventLog="TheOne" defaultEventSource="SmartOne" /&gt;
            	&lt;/logSettings&gt;
            &lt;/theone.configuration&gt;
            </code>
            다음은 FileLogHelper 사용예제입니다.
            <code>
            FileLogHelper.Write("로그 테스트");
            FileLogHelper.Write("MyLog2", "Test log message #{0}", 2); 
            </code>
            </example>
        </member>
        <member name="M:TheOne.Diagnostics.FileLogHelper.Write(System.String,System.Object[])">
            <summary>
            기본값으로 정의된 파일명과 로그 레벨 기본값을 사용해서 로그 파일에 로그 메시지를 기록한다.
            </summary>
            <param name="format">로그 메시지 포맷</param>
            <param name="args">가변 매개변수</param>
            <remarks>
            로그 메시지의 파일명은 이 클래스의 <see cref="P:TheOne.Diagnostics.FileLogHelper.DefaultFilePrefix"/> 값을 사용한다.
            로그 메시지의 로그 레벨은 이 클래스의 <see cref="P:TheOne.Diagnostics.FileLogHelper.DefaultLogLevel"/>의 값을 사용한다.
            정적 Write 메서드는 간단히 한 번의 로그 메시지를 남기고자 할 때
            <see cref="T:TheOne.Diagnostics.FileLogHelper"/>의 인스턴스를 생성할 필요 없이 사용가능하므로 사용이 용이하다.
            </remarks>
            <example>
            <code>
            FileLogHelper.Write("Message");			// use default log level(verbose)
            </code>
            </example>
        </member>
        <member name="M:TheOne.Diagnostics.FileLogHelper.Write(TheOne.Diagnostics.LogLevel,System.String,System.Object[])">
            <summary>
            로그 파일에 로그 메시지를 기록한다.
            </summary>
            <param name="level">로그 메시지 레벨</param>
            <param name="format">로그 메시지 포맷</param>
            <param name="args">가변 매개변수</param>
            <remarks>
            로그 메시지의 파일명은 이 클래스의 <see cref="P:TheOne.Diagnostics.FileLogHelper.DefaultFilePrefix"/> 값을 사용한다.
            이 메서드의 로그 메시지 레벨은 <see cref="P:TheOne.Diagnostics.FileLogHelper.DefaultLogLevel"/>속성의 설정을 오버라이드 한다.
            정적 Write 메서드는 간단히 한 번의 로그 메시지를 남기고자 할 때
            <see cref="T:TheOne.Diagnostics.FileLogHelper"/>의 인스턴스를 생성할 필요 없이 사용가능하므로 사용이 용이하다.
            </remarks>
            <example>
            <code>
            FileLogHelper.Write("MyLog", "Message");			// use default log level(verbose)
            FileLogHelper.Write("MyLog", LogLevel.Error, "Message {0}", DateTime.Now);		// 'Error' log message
            </code>
            </example>
        </member>
        <member name="M:TheOne.Diagnostics.FileLogHelper.Write(System.String,TheOne.Diagnostics.LogLevel,System.String,System.Object[])">
            <summary>
            로그 파일에 로그 메시지를 기록한다.
            </summary>
            <param name="filePrefix">로그 파일명</param>
            <param name="level">로그 메시지 레벨</param>
            <param name="format">로그 메시지 포맷</param>
            <param name="args">가변 매개변수</param>
            <remarks>
            이 메서드의 로그 메시지 레벨은 <see cref="P:TheOne.Diagnostics.FileLogHelper.DefaultFilePrefix"/>속성의 설정을 오버라이드 한다.
            정적 Write 메서드는 간단히 한 번의 로그 메시지를 남기고자 할 때
            <see cref="T:TheOne.Diagnostics.FileLogHelper"/>의 인스턴스를 생성할 필요 없이 사용가능하므로 사용이 용이하다.
            </remarks>
            <example>
            <code>
            FileLogHelper.Write("MyLog", "Message");			// use default log level(verbose)
            FileLogHelper.Write("MyLog", LogLevel.Error, "Message {0}", DateTime.Now);		// 'Error' log message
            </code>
            </example>
        </member>
        <member name="M:TheOne.Diagnostics.FileLogHelper.WriteIf(System.Boolean,System.String,System.Object[])">
            <summary>
            지정된 조건식이 <b>true</b> 이면 로그 파일에 로그 메시지를 기록한다.
            </summary>
            <param name="expr">조건식</param>
            <param name="format">로그 메시지 포맷</param>
            <param name="args">가변 매개변수</param>
            <remarks>
            로그 메시지의 파일명은 이 클래스의 <see cref="P:TheOne.Diagnostics.FileLogHelper.DefaultFilePrefix"/> 값을 사용한다.
            로그 메시지의 로그 레벨은 이 클래스의 <see cref="P:TheOne.Diagnostics.FileLogHelper.DefaultLogLevel"/>의 값을 사용한다.
            정적 Write 메서드는 간단히 한 번의 로그 메시지를 남기고자 할 때
            <see cref="T:TheOne.Diagnostics.FileLogHelper"/>의 인스턴스를 생성할 필요 없이 사용가능하므로 사용이 용이하다.
            </remarks>
            <example>
            <code>
            FileLogHelper.WriteIf(!successFlag, LogLevel.Error, "MyLog", "Error !");
            </code>
            </example>
        </member>
        <member name="M:TheOne.Diagnostics.FileLogHelper.WriteIf(System.Boolean,TheOne.Diagnostics.LogLevel,System.String,System.Object[])">
            <summary>
            지정된 조건식이 <b>true</b>이면 로그 파일에 로그 메시지를 기록한다.
            </summary>
            <param name="expr">조건식</param>
            <param name="level">로그 메시지 레벨</param>
            <param name="format">로그 메시지 포맷</param>
            <param name="args">가변 매개변수</param>
            <remarks>
            로그 메시지의 파일명은 이 클래스의 <see cref="P:TheOne.Diagnostics.FileLogHelper.DefaultFilePrefix"/>  값을 사용한다.
            이 메서드의 로그 메시지 레벨은 <see cref="P:TheOne.Diagnostics.FileLogHelper.DefaultLogLevel"/>속성의 설정을 오버라이드 한다.
            정적 Write 메서드는 간단히 한 번의 로그 메시지를 남기고자 할 때
            <see cref="T:TheOne.Diagnostics.FileLogHelper"/>의 인스턴스를 생성할 필요 없이 사용가능하므로 사용이 용이하다.
            </remarks>
            <example>
            <code>
            FileLogHelper.WriteIf(!successFlag, LogLevel.Error, "MyLog", "Error !");
            </code>
            </example>
        </member>
        <member name="M:TheOne.Diagnostics.FileLogHelper.WriteIf(System.Boolean,System.String,TheOne.Diagnostics.LogLevel,System.String,System.Object[])">
            <summary>
            지정된 조건식이 <b>true</b>이면 로그 파일에 로그 메시지를 기록한다.
            </summary>
            <param name="expr">조건식</param>
            <param name="filePrefix">로그 파일명</param>
            <param name="level">로그 메시지 레벨</param>
            <param name="format">로그 메시지 포맷</param>
            <param name="args">가변 매개변수</param>
            <remarks>
            이 메서드의 로그 메시지 레벨은 <see cref="P:TheOne.Diagnostics.FileLogHelper.DefaultLogLevel"/>속성의 설정을 오버라이드 한다.
            정적 Write 메서드는 간단히 한 번의 로그 메시지를 남기고자 할 때
            <see cref="T:TheOne.Diagnostics.FileLogHelper"/>의 인스턴스를 생성할 필요 없이 사용가능하므로 사용이 용이하다.
            </remarks>
            <example>
            <code>
            FileLogHelper.WriteIf(!successFlag, "MyLog", LogLevel.Error, "Error !");
            </code>
            </example>
        </member>
        <member name="P:TheOne.Diagnostics.FileLogHelper.DefaultLogLevel">
            <summary>
            <see cref="T:TheOne.Diagnostics.FileLogHelper"/> 클래스의 인스턴스나 정적 Write 메서드에서 사용하는 로그 레벨 기본값을 가져오거나 설정한다.
            </summary>
            <remarks>
            FileLogHelper 인스턴스를 생성하거나 정적 Write 메서드를 호출 할 때 명시적으로 <see cref="T:TheOne.Diagnostics.LogLevel"/>이 주어지지 않으면 
            이 속성의 값(기본값은 <see cref="F:TheOne.Diagnostics.LogLevel.Verbose"/>이다.)이 사용된다.
            </remarks>
            <example>
            <code>
            FileLogHelper.Write("NewLog", "Message");			// DefaultLogLevel 프로퍼티 값 사용
            FileLogHelper.Write("NewLog", LogLevel.Warnning, "Warnning Message");	// DefaultLogLevel 값 오버라이드 	
            </code>
            </example>
        </member>
        <member name="P:TheOne.Diagnostics.FileLogHelper.BaseLogLevel">
            <summary>
            로그 메시지의 필터링을 위해 사용되는 베이스 로그 레벨을 가져온다.
            </summary>
            <remarks>
            베이스 로그 레벨 즉, BaseLogLevel 속성의 로그 레벨보다 낮은 메시지는 로그 파일에 기록되지 않는다. 
            <see cref="P:TheOne.Diagnostics.FileLogHelper.BaseLogLevel"/> 속성의 값은 configuration 파일의 baseLogLevel 특성에 설정된 값을 사용하며
            configuration 파일이 정의되지 않은 경우 기본값은 <b>Information</b> 이다.
            </remarks>
            <example>
            <code>
            &lt;?xml version="1.0" encoding="utf-8"?&gt;
            &lt;theone.configuration&gt;
            	&lt;logSettings&gt;
            		&lt;fileLog enabled="true" baseLogLevel="Information" logDirectory="C:\Temp" defaultPrefix="SmartOne" /&gt;
            		&lt;eventLog enabled="true" baseLogLevel="Warnning" eventLog="TheOne" defaultEventSource="SmartOne" /&gt;
            	&lt;/logSettings&gt;
            &lt;/theone.configuration&gt;
            
            // code
            FileLogHelper.Write("Message");						// filtered - default log level is Verbose
            FileLogHelper.Write(LogLevel.Information, "message");	// not filtered
            </code>
            </example>
        </member>
        <member name="P:TheOne.Diagnostics.FileLogHelper.DefaultFilePrefix">
            <summary>
            로그 파일명이 명시적으로 주어지지 않을 때 사용되는 로그 파일명을 가져온다.
            </summary>
            <remarks>
            로그 파일명이 명시적으로 주어지지 않을 때 <see cref="P:TheOne.Diagnostics.FileLogHelper.DefaultFilePrefix"/> 속성이 나타내는 파일명이 암시적으로 사용된다. 
            <see cref="P:TheOne.Diagnostics.FileLogHelper.DefaultFilePrefix"/> 속성 값은 configuration 파일의 defaultPrefix 특성에 설정된 값을 사용하며
            configuration 파일이 정의되지 않은 경우 기본값은 "TheOneLog" 이다.
            </remarks>
            <example>
            <code>
            &lt;?xml version="1.0" encoding="utf-8"?&gt;
            &lt;theone.configuration&gt;
            	&lt;logSettings&gt;
            		&lt;fileLog enabled="true" baseLogLevel="Information" logDirectory="C:\Temp" defaultPrefix="SmartOne" /&gt;
            		&lt;eventLog enabled="true" baseLogLevel="Warnning" eventLog="TheOne" defaultEventSource="SmartOne" /&gt;
            	&lt;/logSettings&gt;
            &lt;/theone.configuration&gt;
            
            // code
            FileLogHelper.Write("Message");		// prefix 파일명으로 SmartOne을 사용
            </code>
            </example>
        </member>
        <member name="P:TheOne.Diagnostics.FileLogHelper.LogDirectory">
            <summary>
            로그 파일이 생성될 로그 디렉토리 경로이름를 가져온다.
            </summary>
            <remarks>
            로그 파일이 생성될 로그 디렉토리를 나타낸다. 로그 디렉토리를 설정하기 위해서는 configuration 파일의 logDirectory 특성에 
            값을 지정한다. configuration 파일이 정의되지 않은 경우 기본값은 "C:\Temp" 폴더를 사용한다.<br></br>
            로그 디렉토리가 존재하지 않는 경우, 해당 디렉토리를 자동으로 생성한다.
            </remarks>
            <example>
            <code>
            // configuration file example
            &lt;?xml version="1.0" encoding="utf-8"?&gt;
            &lt;theone.configuration&gt;
            	&lt;logSettings&gt;
            		&lt;fileLog enabled="true" baseLogLevel="Information" logDirectory="C:\Temp" defaultPrefix="SmartOne" /&gt;
            		&lt;eventLog enabled="true" baseLogLevel="Warnning" eventLog="TheOne" defaultEventSource="SmartOne" /&gt;
            	&lt;/logSettings&gt;
            &lt;/theone.configuration&gt;
            </code>
            </example>
        </member>
        <member name="P:TheOne.Diagnostics.FileLogHelper.Encoding">
            <summary>
            로그 메시지에 사용되는 문자열 인코딩을 가져오거나 설정한다.
            </summary>
            <remarks>
            로그 파일은 Encoding 프로퍼티가 지시하는 인코딩 값을 사용하여 생성된다.
            기본값은 Code Page 949, 즉 ks_c_5601 인코딩(ANSI) 을 사용한다.
            </remarks>
        </member>
        <member name="T:TheOne.Deployment.RemoteLoader">
            <summary>
            ClickOnce 배포시 새로운 Application Domain 내에서 애플리케이션을 실행하는 클래스
            </summary>
        </member>
        <member name="M:TheOne.Deployment.RemoteLoader.InitializeLifetimeService">
            <summary>
            RemoteLoader 객체의 수명을 기본 5분에서 365일로 늘린다.
            </summary>
            <returns>객체의 수명</returns>
        </member>
        <member name="M:TheOne.Deployment.RemoteLoader.ExecuteAsAssembly(System.String)">
            <summary>
            애플리케이션을 실행한다.
            </summary>
            <param name="assemblyFile">어셈블리 파일명</param>
            <returns>정상적으로 실행하면 0, 그렇지 않으면 -1을 반환한다.</returns>
        </member>
        <member name="P:TheOne.Deployment.RemoteLoader.Exception">
            <summary>
            실행 중 발생한 예외 정보
            </summary>
        </member>
        <member name="T:TheOne.Diagnostics.EventLogger">
            <summary>
            이벤트 로그에 메시지를 남기는 인스턴스 메서드를 제공한다.
            </summary>
            <remarks>
            이벤트 로그에 메시지를 남기기 위한 클래스로는 .NET Framework가 제공한는
            System.Diagnostics.EventLog 클래스를 사용할 수도 있지만 EventLogHelper 클래스는
            보다 편리한 기능을 제공한다.
            <br/><br/>
            Windows NT 이상에서 제공되는 이벤트 로그는 이벤트 로그 파일에 각각 기록된다.
            기본으로 제공되는 이벤트 로그는 Application, Security, System의 세가지가 있다.
            EventLogHelper 클래스는 추가적으로 어플리케이션 시스템 레벨의 이벤트 로그 파일에
            이벤트 로그가 기록되게 된다. 이는 EventLog Viewer에서 Windows가 제공하는 세가지
            이벤트 로그 외에 추가적인 항목이 나타나게 됨을 의미한다.
            이를 통해 보다 독립적인 이벤트 로깅 기능을 구축할 수 있다.
            EventLogHelper 클래스를 통해 기록되는 이벤트 로그는 NeoDEEX 구성 파일의 eventLog 값을
            사용하며 NeoDEEX 구성 파일이 없는 경우 기본 로그인 'TheOne' 이벤트 로그에 기록된다.
            생성자에서 주어진 이벤트 소스명을 사용해서 이벤트 로그에 기록하고, 이벤스 소스가 없는 경우에는
            NeoDEEX 구성 파일의 defaultEventSource 값을 사용하고, NeoDEEX 구성 파일이 없는 경우에는
            기본값인 "TheOneLog"를 사용한다.
            <br/><br/>
            로깅 메시지는 Error, Warnning, Information, Verbose 4가지 레벨로 구성된다.
            Error는 오류를, Warnning은 경고를, Information은 정보를, Verbose는 디버깅이나
            트레이스 용도로 사용한다. 이 레벨은 EventLog의 EventLogEntryType과는 다른
            프레임워크만의 레벨임에 유의해야 한다.
            <br/><br/>
            로깅 메시지는 BaseLogLevel을 기준으로 로그 파일에 기록되거나 기록되지 않을 수도 있다.
            즉, BaseLogLevel 보다 낮은 레벨의 로깅 메시지는 파일에 기록되지 않는다.
            예를 들어 BaseLogLevel이 Information 인 경우, Verbose 로깅 메시지는 로그 파일에
            기록되지 않는다. 개발 및 초기 운영 단계에서는 BaseLogLevel을 낮은 수준(Verbose)에 두어 다양한
            로그 메시지를 남김으로써 디버깅에 도움이 되도록 하고, 시스템 안정화 이후에
            로그 레벨을 높임으로써 불필요한 로그 메시지가 성능을 저하시키지 않도록 한다.
            <br/><br/>
            BaseLogLevel은 NeoDEEX 구성 파일의 baseLogLevel 특성의 값에 의해 결정된다. 
            NeoDEEX 구성 파일이 없는 경우 BaseLogLevel의 기본값은 Warnning이다.
            </remarks>
            <example>
            NeoDEEX 구성 파일의 LogSection 예제.
            <code>
            &lt;?xml version="1.0" encoding="utf-8"?&gt;
            &lt;theone.configuration&gt;
            	&lt;logSettings&gt;
            		&lt;fileLog enabled="true" baseLogLevel="Information" logDirectory="C:\Temp" defaultPrefix="SmartOne" /&gt;
            		&lt;eventLog enabled="true" baseLogLevel="Warnning" eventLog="TheOne" defaultEventSource="SmartOne" /&gt;
            	&lt;/logSettings&gt;
            &lt;/theone.configuration&gt;
            </code>
            다음은 EventLogHelper 사용예제입니다.
            <code>
            // using EventLogHelper instance
            EventLogger log = new EventLogger();	// use Event log source name of appSettings
            log.Write(LogLevel.Information, "log message... threadid={0}", AppDomain.GetCurrentThreadId());
            </code>
            </example>
        </member>
        <member name="M:TheOne.Diagnostics.EventLogger.#ctor">
            <summary>
            로그 레벨 기본값과 이벤트 소스 이름의 기본값을 사용하여 <see cref="T:TheOne.Diagnostics.EventLogger"/>클래스의 새 인스턴스를 초기화한다.
            </summary>
            <remarks>
            로그 레벨 기본값은 Information이며
            기본 파일명은 <see cref="P:TheOne.Diagnostics.EventLogHelper.DefaultSourceName"/>속성의 값이 사용된다.
            로그레벨이 BaseLogLevel 보다 낮은 경우, 로그는 기록되지 않음에 유의해야 한다.
            </remarks>
        </member>
        <member name="M:TheOne.Diagnostics.EventLogger.#ctor(TheOne.Diagnostics.LogLevel)">
            <summary>
            지정된 로그 레벨과 이벤트 소스 이름의 기본값을 사용하여 <see cref="T:TheOne.Diagnostics.EventLogger"/>클래스의 새 인스턴스를 초기화한다.
            </summary>
            <param name="level">로그 레벨</param>
            <remarks>
            기본 파일명은 <see cref="P:TheOne.Diagnostics.EventLogHelper.DefaultSourceName"/>속성의 값이 사용된다.
            로그레벨이 BaseLogLevel 보다 낮은 경우, 로그는 기록되지 않음에 유의해야 한다.
            </remarks>
        </member>
        <member name="M:TheOne.Diagnostics.EventLogger.#ctor(System.String)">
            <summary>
            지정된 로그 레벨 기본값과 지정된 이벤트 소스 이름을 사용하여 <see cref="T:TheOne.Diagnostics.EventLogger"/>클래스의 새 인스턴스를 초기화한다.
            </summary>
            <param name="sourceName">이벤트 소스 이름</param>
            <remarks>
            로그 레벨의 기본값은 <see cref="F:System.Diagnostics.EventLogEntryType.Information"/>이다.
            로그레벨이 BaseLogLevel 보다 낮은 경우, 로그는 기록되지 않음에 유의해야 한다.
            </remarks>
        </member>
        <member name="M:TheOne.Diagnostics.EventLogger.#ctor(System.String,TheOne.Diagnostics.LogLevel)">
            <summary>
            지정된 이벤트 소스 이름과 로그 레벨을 사용하여 <see cref="T:TheOne.Diagnostics.EventLogger"/>클래스의 새 인스턴스를 초기화한다.
            </summary>
            <param name="sourceName">이벤트 소스 이름</param>
            <param name="level">로그 레벨</param>
            <remarks>
            로그레벨이 BaseLogLevel 보다 낮은 경우, 로그는 기록되지 않음에 유의해야 한다.
            </remarks>
        </member>
        <member name="M:TheOne.Diagnostics.EventLogger.Write(System.String,System.Object[])">
            <summary>
            이벤트 로그에 메시지를 기록한다.
            </summary>
            <param name="format">메시지 포맷</param>
            <param name="args">가변 매개변수</param>
            <remarks>
            이벤트 소스는 생성자에서 주어진 이벤트 소스 혹은 <see cref="P:TheOne.Diagnostics.EventLogHelper.DefaultSourceName"/> 값이 사용되며
            메시지 레벨은 생성자에서 주어진 <see cref="P:TheOne.Diagnostics.EventLogger.LogLevel"/> 혹은 <see cref="P:TheOne.Diagnostics.EventLogger.LogLevel"/> 속성의 값이 사용되고
            이벤트 ID의 기본값과 카테고리의 기본값은 0 이 사용된다.
            로그 메시지 레벨이 BaseLogLevel 보다 낮은 경우, 메시지는 필터링 된다.
            이벤트 로그는 Application, System 등의 로그가 아닌 configuration 파일의 eventLog 특성에 
            설정된 값을 사용해서 기록되며 configuration 파일이 정의되지 않은 경우에는 "TheOne" 로그에 기록된다.
            </remarks>
            <example>
            <code>
            EventLogger log = new EventLogger();	// use default source name and default log level(information)
            log.Write("Message");					// use default log level(information)
            log.Write(1001, "Using event ID 1001");
            log.Write(1001, 1, "Using event ID, category ID..");
            </code>
            </example>
        </member>
        <member name="M:TheOne.Diagnostics.EventLogger.Write(System.Int32,System.String,System.Object[])">
            <summary>
            이벤트 로그에 메시지를 기록한다.
            </summary>
            <param name="eventID">이벤트 ID</param>
            <param name="format">메시지 포맷</param>
            <param name="args">가변 매개변수</param>
            <remarks>
            이벤트 소스는 생성자에서 주어진 이벤트 소스 혹은 <see cref="P:TheOne.Diagnostics.EventLogHelper.DefaultSourceName"/> 값이 사용되며
            메시지 레벨은 생성자에서 주어진  <see cref="P:TheOne.Diagnostics.EventLogger.LogLevel"/> 혹은  <see cref="P:TheOne.Diagnostics.EventLogger.LogLevel"/>속성의 값이 사용되고
            이벤트 카테고리의 기본값은 0 이 사용된다.
            로그 메시지 레벨이 BaseLogLevel 보다 낮은 경우, 메시지는 필터링 된다.
            이벤트 로그는 Application, System 등의 로그가 아닌 configuration 파일의 eventLog 특성에 
            설정된 값을 사용해서 기록되며 configuration 파일이 정의되지 않은 경우에는 "TheOne" 로그에 기록된다.
            </remarks>
            <example>
            <code>
            EventLogger log = new EventLogger();	// use default source name and default log level(information)
            log.Write("Message");					// use default log level(information)
            log.Write(1001, "Using event ID 1001");
            log.Write(1001, 1, "Using event ID, category ID..");
            </code>
            </example>
        </member>
        <member name="M:TheOne.Diagnostics.EventLogger.Write(System.Int32,System.Int16,System.String,System.Object[])">
            <summary>
            이벤트 로그에 메시지를 기록한다.
            </summary>
            <param name="eventID">이벤트 ID</param>
            <param name="category">카테고리 ID</param>
            <param name="format">메시지 포맷</param>
            <param name="args">가변 매개변수</param>
            <remarks>
            이벤트 소스는 생성자에서 주어진 이벤트 소스 혹은 <see cref="P:TheOne.Diagnostics.EventLogHelper.DefaultSourceName"/> 값이 사용되며
            메시지 레벨은 생성자에서 주어진 <see cref="P:TheOne.Diagnostics.EventLogger.LogLevel"/> 혹은 <see cref="P:TheOne.Diagnostics.EventLogger.LogLevel"/>속성의 값이 사용되고
            이벤트 카테고리의 기본값은 0 이 사용된다.
            로그 메시지 레벨이 BaseLogLevel 보다 낮은 경우, 메시지는 필터링 된다.
            이벤트 로그는 Application, System 등의 로그가 아닌 configuration 파일의 eventLog 특성에 
            설정된 값을 사용해서 기록되며 configuration 파일이 정의되지 않은 경우에는 "TheOne" 로그에 기록된다.
            </remarks>
            <example>
            <code>
            EventLogger log = new EventLogger();	// use default source name and default log level(information)
            log.Write("Message");					// use default log level(information)
            log.Write(1001, "Using event ID 1001");
            log.Write(1001, 1, "Using event ID, category ID..");
            </code>
            </example>
        </member>
        <member name="M:TheOne.Diagnostics.EventLogger.Write(System.Int32,System.Int16,System.Byte[],System.String,System.Object[])">
            <summary>
            이벤트 로그에 메시지를 기록한다.
            </summary>
            <param name="eventID">이벤트 ID</param>
            <param name="category">카테고리 ID</param>
            <param name="rawData">이벤트 raw 데이터</param>
            <param name="format">메시지 포맷</param>
            <param name="args">가변 매개변수</param>
            <remarks>
            이벤트 소스는 생성자에서 주어진 이벤트 소스 혹은 <see cref="P:TheOne.Diagnostics.EventLogHelper.DefaultSourceName"/> 값이 사용되며
            메시지 레벨은 생성자에서 주어진 <see cref="P:TheOne.Diagnostics.EventLogger.LogLevel"/> 혹은 <see cref="P:TheOne.Diagnostics.EventLogger.LogLevel"/>속성의 값이 사용되고
            로그 메시지 레벨이 BaseLogLevel 보다 낮은 경우, 메시지는 필터링 된다.
            이벤트 로그는 Application, System 등의 로그가 아닌 configuration 파일의 eventLog 특성에 
            설정된 값을 사용해서 기록되며 configuration 파일이 정의되지 않은 경우에는 "TheOne" 로그에 기록된다.
            </remarks>
            <example>
            <code>
            EventLogger log = new EventLogger();	// use default source name and default log level(information)
            log.Write("Message");					// use default log level(information)
            log.Write(1001, "Using event ID 1001");
            log.Write(1001, 1, "Using event ID, category ID..");
            
            IPAddress ip = GetPeerIPAddress();		// call user-defined method for get IP
            byte[] rawData = ip.GetAddressBytes();
            log.Write(1001, 1, rawData, "Connect from peer: {0}", ip.ToString());
            </code>
            </example>
        </member>
        <member name="M:TheOne.Diagnostics.EventLogger.Write(TheOne.Diagnostics.LogLevel,System.String,System.Object[])">
            <summary>
            이벤트 로그에 메시지를 기록한다.
            </summary>
            <param name="level">로그 메시지 레벨</param>
            <param name="format">메시지 포맷</param>
            <param name="args">가변 매개변수</param>
            <remarks>
            이벤트 소스는 생성자에서 주어진 이벤트 소스 혹은 <see cref="P:TheOne.Diagnostics.EventLogHelper.DefaultSourceName"/> 값이 사용되며
            이벤트 ID 기본값과 카테고리의 기본값은 0 이 사용된다.
            지정된 로그 메시지 레벨이 BaseLogLevel 보다 낮은 경우, 메시지는 필터링 된다.
            이벤트 로그는 Application, System 등의 로그가 아닌 configuration 파일의 eventLog 특성에 
            설정된 값을 사용해서 기록되며 configuration 파일이 정의되지 않은 경우에는 "TheOne" 로그에 기록된다.
            </remarks>
            <example>
            <code>
            EventLogger log = new EventLogger();	// use default source name and default log level(information)
            log.Write("Message");					// use default log level(information)
            log.Write(LogLevel.Error, "Message {0}", DateTime.Now);		// 'Error' log message
            log.Write(LogLevel.Inforamtion, 1001, "Using event ID 1001");
            log.Write(LogLevel.Information, 1001, 1, "Using event ID, category ID..");
            </code>
            </example>
        </member>
        <member name="M:TheOne.Diagnostics.EventLogger.Write(TheOne.Diagnostics.LogLevel,System.Int32,System.String,System.Object[])">
            <summary>
            이벤트 로그에 메시지를 기록한다.
            </summary>
            <param name="level">로그 메시지 레벨</param>
            <param name="eventID">이벤트 ID</param>
            <param name="format">메시지 포맷</param>
            <param name="args">가변 매개변수</param>
            <remarks>
            이벤트 소스는 생성자에서 주어진 이벤트 소스 혹은 <see cref="P:TheOne.Diagnostics.EventLogHelper.DefaultSourceName"/> 값이 사용되며
            이벤트 카테고리의 기본값은 0 이 사용된다.
            지정된 로그 메시지 레벨이 BaseLogLevel 보다 낮은 경우, 메시지는 필터링 된다.
            이벤트 로그는 Application, System 등의 로그가 아닌 configuration 파일의 eventLog 특성에 
            설정된 값을 사용해서 기록되며 configuration 파일이 정의되지 않은 경우에는 "TheOne" 로그에 기록된다.
            </remarks>
            <example>
            <code>
            EventLogger log = new EventLogger();	// use default source name and default log level(information)
            log.Write("Message");					// use default log level(information)
            log.Write(LogLevel.Error, "Message {0}", DateTime.Now);		// 'Error' log message
            log.Write(LogLevel.Inforamtion, 1001, "Using event ID 1001");
            log.Write(LogLevel.Information, 1001, 1, "Using event ID, category ID..");
            </code>
            </example>
        </member>
        <member name="M:TheOne.Diagnostics.EventLogger.Write(TheOne.Diagnostics.LogLevel,System.Int32,System.Int16,System.String,System.Object[])">
            <summary>
            이벤트 로그에 메시지를 기록한다.
            </summary>
            <param name="level">로그 메시지 레벨</param>
            <param name="eventID">이벤트 ID</param>
            <param name="category">카테고리 ID</param>
            <param name="format">메시지 포맷</param>
            <param name="args">가변 매개변수</param>
            <remarks>
            이벤트 소스는 생성자에서 주어진 이벤트 소스 혹은 <see cref="P:TheOne.Diagnostics.EventLogHelper.DefaultSourceName"/> 값이 사용되며
            이벤트 카테고리의 기본값은 0 이 사용된다.
            지정된 로그 메시지 레벨이 BaseLogLevel 보다 낮은 경우, 메시지는 필터링 된다.
            이벤트 로그는 Application, System 등의 로그가 아닌 configuration 파일의 eventLog 특성에 
            설정된 값을 사용해서 기록되며 configuration 파일이 정의되지 않은 경우에는 "TheOne" 로그에 기록된다.
            </remarks>
            <example>
            <code>
            EventLogger log = new EventLogger();	// use default source name and default log level(information)
            log.Write("Message");					// use default log level(information)
            log.Write(LogLevel.Error, "Message {0}", DateTime.Now);		// 'Error' log message
            log.Write(LogLevel.Inforamtion, 1001, "Using event ID 1001");
            log.Write(LogLevel.Information, 1001, 1, "Using event ID, category ID..");
            </code>
            </example>
        </member>
        <member name="M:TheOne.Diagnostics.EventLogger.Write(TheOne.Diagnostics.LogLevel,System.Int32,System.Int16,System.Byte[],System.String,System.Object[])">
            <summary>
            이벤트 로그에 메시지를 기록한다.
            </summary>
            <param name="level">로그 메시지 레벨</param>
            <param name="eventID">이벤트 ID</param>
            <param name="category">카테고리 ID</param>
            <param name="rawData">이벤트 raw 데이터</param>
            <param name="format">메시지 포맷</param>
            <param name="args">가변 매개변수</param>
            <remarks>
            이벤트 소스는 생성자에서 주어진 이벤트 소스 혹은 <see cref="P:TheOne.Diagnostics.EventLogHelper.DefaultSourceName"/> 값이 사용되며
            지정된 로그 메시지 레벨이 BaseLogLevel 보다 낮은 경우, 메시지는 필터링 된다.
            이벤트 로그는 Application, System 등의 로그가 아닌 configuration 파일의 eventLog 특성에 
            설정된 값을 사용해서 기록되며 configuration 파일이 정의되지 않은 경우에는 "TheOne" 로그에 기록된다.
            </remarks>
            <example>
            <code>
            EventLogger log = new EventLogger();	// use default source name and default log level(information)
            log.Write("Message");					// use default log level(information)
            log.Write(LogLevel.Error, "Message {0}", DateTime.Now);		// 'Error' log message
            log.Write(LogLevel.Inforamtion, 1001, "Using event ID 1001");
            log.Write(LogLevel.Information, 1001, 1, "Using event ID, category ID..");
            
            IPAddress ip = GetPeerIPAddress();		// call user-defined method for get IP
            byte[] rawData = ip.GetAddressBytes();
            log.Write(LogLevel.Information, 1001, 1, rawData, "Connect from peer: {0}", ip.ToString());
            </code>
            </example>
        </member>
        <member name="M:TheOne.Diagnostics.EventLogger.WriteIf(System.Boolean,System.String,System.Object[])">
            <summary>
            지정된 조건식이 <b>true</b>이면 이벤트 로그에 메시지를 기록한다.
            </summary>
            <param name="expr">조건식</param>
            <param name="format">메시지 포맷</param>
            <param name="args">가변 매개변수</param>
            <remarks>
            이벤트 소스는 생성자에서 주어진 이벤트 소스 혹은 <see cref="P:TheOne.Diagnostics.EventLogHelper.DefaultSourceName"/> 값이 사용되며
            메시지 레벨은 생성자에서 주어진 <see cref="P:TheOne.Diagnostics.EventLogger.LogLevel"/> 혹은 <see cref="P:TheOne.Diagnostics.EventLogger.LogLevel"/>속성의 값이 사용되고
            이벤트 ID 의 기본값과 카테고리의 기본값은 0 이 사용된다.
            지정된 로그 메시지 레벨이 BaseLogLevel 보다 낮은 경우, 메시지는 필터링 된다.
            이벤트 로그는 Application, System 등의 로그가 아닌 configuration 파일의 eventLog 특성에 
            설정된 값을 사용해서 기록되며 configuration 파일이 정의되지 않은 경우에는 "TheOne" 로그에 기록된다.
            </remarks>
            <example>
            <code>
            EventLogger log = new EventLogger();	// use default source name and default log level(information)
            log.Write("Message");					// force logging
            log.WriteIf(!successFlag, "Error ! ");
            </code>
            </example>
        </member>
        <member name="M:TheOne.Diagnostics.EventLogger.WriteIf(System.Boolean,System.Int32,System.String,System.Object[])">
            <summary>
            지정된 조건식이 <b>true</b>이면 이벤트 로그에 메시지를 기록한다.
            </summary>
            <param name="expr">조건식</param>
            <param name="eventID">이벤트 ID</param>
            <param name="format">메시지 포맷</param>
            <param name="args">가변 매개변수</param>
            <remarks>
            이벤트 소스는 생성자에서 주어진 이벤트 소스 혹은 <see cref="P:TheOne.Diagnostics.EventLogHelper.DefaultSourceName"/> 값이 사용되며
            메시지 레벨은 생성자에서 주어진 <see cref="P:TheOne.Diagnostics.EventLogger.LogLevel"/> 혹은 <see cref="P:TheOne.Diagnostics.EventLogger.LogLevel"/>속성의 값이 사용되고
            이벤트 카테고리의 기본값은 0 이 사용된다.
            지정된 로그 메시지 레벨이 BaseLogLevel 보다 낮은 경우, 메시지는 필터링 된다.
            이벤트 로그는 Application, System 등의 로그가 아닌 configuration 파일의 eventLog 특성에 
            설정된 값을 사용해서 기록되며 configuration 파일이 정의되지 않은 경우에는 "TheOne" 로그에 기록된다.
            </remarks>
            <example>
            <code>
            EventLogger log = new EventLogger();	// use default source name and default log level(information)
            log.Write("Message");					// force logging
            log.WriteIf(!successFlag, LogLevel.Error, 1001, "Error ! using event ID..");
            </code>
            </example>
        </member>
        <member name="M:TheOne.Diagnostics.EventLogger.WriteIf(System.Boolean,System.Int32,System.Int16,System.String,System.Object[])">
            <summary>
            지정된 조건식이 <b>true</b>이면 이벤트 로그에 메시지를 기록한다.
            </summary>
            <param name="expr">조건식</param>
            <param name="eventID">이벤트 ID</param>
            <param name="category">카테고리 ID</param>
            <param name="format">메시지 포맷</param>
            <param name="args">가변 매개변수</param>
            <remarks>
            이벤트 소스는 생성자에서 주어진 이벤트 소스 혹은 <see cref="P:TheOne.Diagnostics.EventLogHelper.DefaultSourceName"/> 값이 사용되며
            메시지 레벨은 생성자에서 주어진 <see cref="P:TheOne.Diagnostics.EventLogger.LogLevel"/> 혹은 <see cref="P:TheOne.Diagnostics.EventLogger.LogLevel"/>속성의 값이 사용되고
            이벤트 카테고리의 기본값은 0 이 사용된다.
            지정된 로그 메시지 레벨이 BaseLogLevel 보다 낮은 경우, 메시지는 필터링 된다.
            이벤트 로그는 Application, System 등의 로그가 아닌 configuration 파일의 eventLog 특성에 
            설정된 값을 사용해서 기록되며 configuration 파일이 정의되지 않은 경우에는 "TheOne" 로그에 기록된다.
            </remarks>
            <example>
            <code>
            EventLogger log = new EventLogger();	// use default source name and default log level(information)
            log.Write("Message");					// force logging
            log.WriteIf(!successFlag, LogLevel.Error, 1001, 1, "Error ! using event ID and category ID..");
            </code>
            </example>
        </member>
        <member name="M:TheOne.Diagnostics.EventLogger.WriteIf(System.Boolean,System.Int32,System.Int16,System.Byte[],System.String,System.Object[])">
            <summary>
            지정된 조건식이 <b>true</b>이면 이벤트 로그에 메시지를 기록한다.
            </summary>
            <param name="expr">조건식</param>
            <param name="eventID">이벤트 ID</param>
            <param name="category">카테고리 ID</param>
            <param name="rawData">이벤트 raw 데이터</param>
            <param name="format">메시지 포맷</param>
            <param name="args">가변 매개변수</param>
            <remarks>
            이벤트 소스는 생성자에서 주어진 이벤트 소스 혹은 <see cref="P:TheOne.Diagnostics.EventLogHelper.DefaultSourceName"/> 값이 사용되며
            메시지 레벨은 생성자에서 주어진 <see cref="P:TheOne.Diagnostics.EventLogger.LogLevel"/> 혹은 <see cref="P:TheOne.Diagnostics.EventLogger.LogLevel"/>속성의 값이 사용되고
            지정된 로그 메시지 레벨이 BaseLogLevel 보다 낮은 경우, 메시지는 필터링 된다.
            이벤트 로그는 Application, System 등의 로그가 아닌 configuration 파일의 eventLog 특성에 
            설정된 값을 사용해서 기록되며 configuration 파일이 정의되지 않은 경우에는 "TheOne" 로그에 기록된다.
            </remarks>
            <example>
            <code>
            EventLogger log = new EventLogger();	// use default source name and default log level(information)
            IPAddress ip = GetPeerIPAddress();		// call user-defined method for get IP
            byte[] rawData = ip.GetAddressBytes();
            log.WriteIf(successFlag, LogLevel.Information, 1001, 1, rawData, "Connect from peer: {0}", ip.ToString());
            log.WriteIf(!successFlag, LogLevel.Error, 1001, 1, rawData, "Connect error from peer: {0}", ip.ToString());
            </code>
            </example>
        </member>
        <member name="M:TheOne.Diagnostics.EventLogger.WriteIf(System.Boolean,TheOne.Diagnostics.LogLevel,System.String,System.Object[])">
            <summary>
            지정된 조건식이 <b>true</b>이면 이벤트 로그에 메시지를 기록한다.
            </summary>
            <param name="expr">조건식</param>
            <param name="level">로그 메시지 레벨</param>
            <param name="format">메시지 포맷</param>
            <param name="args">가변 매개변수</param>
            <remarks>
            이벤트 소스는 생성자에서 주어진 이벤트 소스 혹은 <see cref="P:TheOne.Diagnostics.EventLogHelper.DefaultSourceName"/> 값이 사용되며
            이벤트 ID의 기본값과 카테고리의 기본값은 0 이 사용된다.
            지정된 로그 메시지 레벨이 BaseLogLevel 보다 낮은 경우, 메시지는 필터링 된다.
            이벤트 로그는 Application, System 등의 로그가 아닌 configuration 파일의 eventLog 특성에 
            설정된 값을 사용해서 기록되며 configuration 파일이 정의되지 않은 경우에는 "TheOne" 로그에 기록된다.
            </remarks>
            <example>
            <code>
            EventLogger log = new EventLogger();	// use default source name and default log level(information)
            log.Write("Message");					// force logging
            log.WriteIf(!successFlag, LogLevel.Error, "Error !");
            </code>
            </example>
        </member>
        <member name="M:TheOne.Diagnostics.EventLogger.WriteIf(System.Boolean,TheOne.Diagnostics.LogLevel,System.Int32,System.String,System.Object[])">
            <summary>
            지정된 조건식이 <b>true</b>이면 이벤트 로그에 메시지를 기록한다.
            </summary>
            <param name="expr">조건식</param>
            <param name="level">로그 메시지 레벨</param>
            <param name="eventID">이벤트 ID</param>
            <param name="format">메시지 포맷</param>
            <param name="args">가변 매개변수</param>
            <remarks>
            이벤트 소스는 생성자에서 주어진 이벤트 소스 혹은 <see cref="P:TheOne.Diagnostics.EventLogHelper.DefaultSourceName"/> 값이 사용되며
            이벤트 카테고리의 기본값은 0 이 사용된다.
            지정된 로그 메시지 레벨이 BaseLogLevel 보다 낮은 경우, 메시지는 필터링 된다.
            이벤트 로그는 Application, System 등의 로그가 아닌 configuration 파일의 eventLog 특성에 
            설정된 값을 사용해서 기록되며 configuration 파일이 정의되지 않은 경우에는 "TheOne" 로그에 기록된다.
            </remarks>
            <example>
            <code>
            EventLogger log = new EventLogger();	// use default source name and default log level(information)
            log.Write("Message");					// force logging
            log.WriteIf(!successFlag, LogLevel.Error, 1001, "Error ! using event ID..");
            </code>
            </example>
        </member>
        <member name="M:TheOne.Diagnostics.EventLogger.WriteIf(System.Boolean,TheOne.Diagnostics.LogLevel,System.Int32,System.Int16,System.String,System.Object[])">
            <summary>
            지정된 조건식이 <b>true</b>이면 이벤트 로그에 메시지를 기록한다.
            </summary>
            <param name="expr">조건식</param>
            <param name="level">로그 메시지 레벨</param>
            <param name="eventID">이벤트 ID</param>
            <param name="category">카테고리 ID</param>
            <param name="format">메시지 포맷</param>
            <param name="args">가변 매개변수</param>
            <remarks>
            이벤트 소스는 생성자에서 주어진 이벤트 소스 혹은 <see cref="P:TheOne.Diagnostics.EventLogHelper.DefaultSourceName"/> 값이 사용되며
            이벤트 카테고리의 기본값은 0 이 사용된다.
            지정된 로그 메시지 레벨이 BaseLogLevel 보다 낮은 경우, 메시지는 필터링 된다.
            이벤트 로그는 Application, System 등의 로그가 아닌 configuration 파일의 eventLog 특성에 
            설정된 값을 사용해서 기록되며 configuration 파일이 정의되지 않은 경우에는 "TheOne" 로그에 기록된다.
            </remarks>
            <example>
            <code>
            EventLogger log = new EventLogger();	// use default source name and default log level(information)
            log.Write("Message");					// force logging
            log.WriteIf(!successFlag, LogLevel.Error, 1001, 1, "Error ! using event ID and category ID..");
            </code>
            </example>
        </member>
        <member name="M:TheOne.Diagnostics.EventLogger.WriteIf(System.Boolean,TheOne.Diagnostics.LogLevel,System.Int32,System.Int16,System.Byte[],System.String,System.Object[])">
            <summary>
            지정된 조건식이 <b>true</b>이면 이벤트 로그에 메시지를 기록한다.
            </summary>
            <param name="expr">조건식</param>
            <param name="level">로그 메시지 레벨</param>
            <param name="eventID">이벤트 ID</param>
            <param name="category">카테고리 ID</param>
            <param name="rawData">이벤트 raw 데이터</param>
            <param name="format">메시지 포맷</param>
            <param name="args">가변 매개변수</param>
            <remarks>
            이벤트 소스는 생성자에서 주어진 이벤트 소스 혹은 <see cref="P:TheOne.Diagnostics.EventLogHelper.DefaultSourceName"/> 값이 사용되며
            지정된 로그 메시지 레벨이 <see cref="P:TheOne.Diagnostics.EventLogger.LogLevel"/> 보다 낮은 경우, 메시지는 필터링 된다.
            이벤트 로그는 Application, System 등의 로그가 아닌 configuration 파일의 eventLog 특성에 
            설정된 값을 사용해서 기록되며 configuration 파일이 정의되지 않은 경우에는 "TheOne" 로그에 기록된다.
            </remarks>
            <example>
            <code>
            EventLogger log = new EventLogger();	// use default source name and default log level(information)
            IPAddress ip = GetPeerIPAddress();		// call user-defined method for get IP
            byte[] rawData = ip.GetAddressBytes();
            log.WriteIf(successFlag, LogLevel.Information, 1001, 1, rawData, "Connect from peer: {0}", ip.ToString());
            log.WriteIf(!successFlag, LogLevel.Error, 1001, 1, rawData, "Connect error from peer: {0}", ip.ToString());
            </code>
            </example>
        </member>
        <member name="P:TheOne.Diagnostics.EventLogger.EventLog">
            <summary>
            EventLog클래스 객체를 가져온다.
            </summary>
            <remarks>
            이 속성이 반환하는 EventLog클래스 객체는 이벤트 로그 이름, 이벤트 소스 이름이
            생성자등의 설정을 통해 이미 설정된 것이다. 이 속성의 EventLog객체를 통해
            이벤트 로그를 직접 기록하는 경우 로그 레벨은 적용되지 않는다.
            </remarks>
        </member>
        <member name="P:TheOne.Diagnostics.EventLogger.LogLevel">
            <summary>
            EventLogger 인스턴스에서 로깅 메시지의 메시지 레벨을 가져오거나 설정한다.
            </summary>
            <remarks>
            인스턴스 Write 메서드들에서 명시적으로 LogLevel을 주지 않을 때 이 속성의
            값이 메시지 레벨로 사용된다. 기본값은 Information 이며, 이 기본값을 읽거나
            수정하기 위해서는 정적 속성인 <see cref="P:TheOne.Diagnostics.EventLogHelper.DefaultLogLevel"/>을 사용한다.
            </remarks>
            <example>
            <code>
            EventLogger log = new EventLogger("eventSource");
            log.Write("Hello");				// Information 메시지
            log.LogLevel = LogLevel.Error;	// 디폴트 로그 레벨 수정
            log.Write("Hello again");		// Error 메시지
            </code>
            </example>
        </member>
        <member name="P:TheOne.Diagnostics.EventLogger.Source">
            <summary>
            로그 메시지가 기록될 이벤트 로그 소스 이름이다.
            </summary>
            <remarks>
            이벤트 로그 소스 이름은 생성자를 통해 설정하거나 Source 속성을 통해
            설정할 수 있다. 추천되는 방법은 Configuration 파일을 통해 설정하는 것으로써
            코드의 수정 없이 이벤트 로그 소스 이름을 변경할 수 있다는 장점이 있다.
            </remarks>
        </member>
        <member name="M:TheOne.Configuration.SectionFactory.#ctor">
            <summary>
            새 인스턴스를 초기화합니다. 
            </summary>
        </member>
        <member name="M:TheOne.Configuration.SectionFactory.OnConfigurationChanged(System.Object,TheOne.Configuration.ConfigurationChangedEventArgs)">
            <summary>
            NeoDEEX 구성 파일이 변경되면 발생한다. 
            </summary>>
        </member>
        <member name="M:TheOne.Configuration.SectionFactory.Initialize">
            <summary>
            <see cref="T:TheOne.Configuration.SectionFactory"/>를 초기화한다.
            </summary>
        </member>
        <member name="T:TheOne.Configuration.ConfigurationChangedEventArgs">
            <summary>
            <see cref="!:ConfigurationManager.ConfigurationChanged"/> 이벤트를 처리할 메서드를 나타낸다.
            </summary>
            <param name="sender">이벤트 소스</param>
            <param name="e">이벤트 데이터가 들어 있는 <see cref="T:TheOne.Configuration.ConfigurationChangedEventArgs"/> 객체</param>
        </member>
        <member name="P:TheOne.Configuration.ConfigurationChangedEventArgs.ConfigFileName">
            <summary>
            NeoDEEX 구성 파일 경로를 가져온다.
            </summary>
        </member>
        <member name="T:TheOne.Configuration.NamedItemInterface">
            <summary>
            Name 속성을 가지는 인터페이스이다.
            </summary>
        </member>
        <member name="P:TheOne.Configuration.NamedItemInterface.Name">
            <summary>
            이름을 가져오거나 설정한다.
            </summary>
        </member>
        <member name="T:TheOne.Resources.EmbeddResourceProvider">
            <summary>특정 어셈블리에 포함된 리소스를 가져오기 위한 리소스 공급자를 나타낸다.</summary>
            <example>
            	<code lang="XML" title="EmbeddResourceProvider Configruation">
            &lt;theone.configuration&gt;
              &lt;resourceSection defaultProvider="RES1"&gt;
                &lt;resource name="RES1" type="TheOne.Resources.EmbeddResourceProvider, OneCorLib"&gt;
                  &lt;parameter name="BaseName" value="EmbeddResrouces.Resources"/&gt;
                  &lt;parameter name="AssemblyPath" value="EmbeddResrouces.dll"/&gt;
                &lt;/resource&gt;
              &lt;/resourceSection&gt;
            &lt;/theone.configuration&gt;
            </code>
            </example>
        </member>
        <member name="T:TheOne.Resources.ResourceProvider">
            <summary>리소스 공급자를 만드는 클래스에 대한 기본 추상(abstract) 클래스이다.</summary>
            <remarks>
            	기본 리소스 공급자(<see cref="T:TheOne.Resources.EmbeddResourceProvider"/>, <see cref="T:TheOne.Resources.UrlResourceProvider"/>) 이외의 공급자를 제공하고자 할
                경우는 ResourceProvider를 파생하여 구현한다.
            </remarks>
        </member>
        <member name="M:TheOne.Resources.ResourceProvider.GetString(System.String)">
            <summary>
            지정된 리소스명을 사용하여 <see cref="T:System.String"/> 리소스의 값을 가져온다.
            </summary>
            <returns>호출자의 현재 문화권 설정에 대해 지역화된 리소스의 값을 반환한다.</returns>
            <param name="resourceName">가져올 리소스의 이름</param>
        </member>
        <member name="M:TheOne.Resources.ResourceProvider.GetString(System.String,System.Globalization.CultureInfo)">
            <summary>지정된 문화권에 대해 지역화된 <see cref="T:System.String"/> 리소스의 값을 가져온다.</summary>
            <returns>지정된 문화권에 대해 지역화된 리소스의 값이다.</returns>
            <param name="resourceName">가져올 리소스의 이름</param>
            <param name="cultureInfo">리소스에 대한 문화권을 나타내는 <see cref="T:System.Globalization.CultureInfo"/> 객체</param>
        </member>
        <member name="M:TheOne.Resources.ResourceProvider.GetImage(System.String)">
            <summary>지정된 리소스명을 사용하여 <see cref="T:System.Drawing.Image"/> 객체를 가져온다.</summary>
            <returns><see cref="T:System.Drawing.Image"/> 객체를 반환한다.</returns>
            <param name="resourceName">가져올 리소스의 이름</param>
        </member>
        <member name="M:TheOne.Resources.ResourceProvider.GetImage(System.String,System.Globalization.CultureInfo)">
            <summary>지정된 문화권에 대해 지역화된 <see cref="T:System.Drawing.Image"/> 객체를 가져온다.</summary>
            <returns><see cref="T:System.Drawing.Image"/> 객체를 반환한다.</returns>
            <param name="resourceName">가져올 리소스의 이름</param>
            <param name="cultureInfo">리소스에 대한 문화권을 나타내는 <see cref="T:System.Globalization.CultureInfo"/> 객체</param>
        </member>
        <member name="M:TheOne.Resources.ResourceProvider.GetStream(System.String)">
            <summary>지정된 리소스명을 사용하여 <see cref="T:System.IO.Stream"/> 객체를 가져온다.</summary>
            <returns><see cref="T:System.IO.Stream"/> 객체를 반환한다.</returns>
            <param name="resourceName">가져올 리소스의 이름</param>
        </member>
        <member name="M:TheOne.Resources.ResourceProvider.GetStream(System.String,System.Globalization.CultureInfo)">
            <summary>지정된 문화권에 대해 지역화된 <see cref="T:System.IO.Stream"/> 객체를 가져온다.</summary>
            <returns><see cref="T:System.IO.Stream"/> 객체를 반환한다.</returns>
            <param name="resourceName">가져올 리소스의 이름</param>
            <param name="cultureInfo">소스에 대한 문화권을 나타내는 <see cref="T:System.Globalization.CultureInfo"/> 객체</param>
        </member>
        <member name="P:TheOne.Resources.ResourceProvider.Parameters">
            <summary>
            ResourceProvider에 전달하는 매개변수 컬렉션을 가져오거나 설정을 한다.
            </summary>
        </member>
        <member name="M:TheOne.Resources.EmbeddResourceProvider.GetString(System.String)">
            <summary>지정된 리소스명을 사용하여 <see cref="T:System.String"/> 리소스의 값을 가져온다.</summary>
            <returns>호출자의 현재 문화권 설정에 대해 지역화된 리소스의 값을 반환한다.</returns>
            <param name="resourceName">가져올 리소스의 이름</param>
        </member>
        <member name="M:TheOne.Resources.EmbeddResourceProvider.GetString(System.String,System.Globalization.CultureInfo)">
            <summary>지정된 문화권에 대해 지역화된 <see cref="T:System.String"/> 리소스의 값을 가져온다.</summary>
            <returns>지정된 문화권에 대해 지역화된 리소스의 값이다.</returns>
            <param name="resourceName">가져올 리소스의 이름</param>
            <param name="cultureInfo">리소스에 대한 문화권을 나타내는 <see cref="T:System.Globalization.CultureInfo"/> 객체</param>
        </member>
        <member name="M:TheOne.Resources.EmbeddResourceProvider.GetImage(System.String)">
            <summary>지정된 리소스명을 사용하여 <see cref="T:System.Drawing.Image"/> 객체를 가져온다.</summary>
            <returns><see cref="T:System.Drawing.Image"/> 객체를 반환한다.</returns>
            <param name="resourceName">가져올 리소스의 이름</param>
        </member>
        <member name="M:TheOne.Resources.EmbeddResourceProvider.GetImage(System.String,System.Globalization.CultureInfo)">
            <summary>지정된 문화권에 대해 지역화된 <see cref="T:System.Drawing.Image"/> 객체를 가져온다.</summary>
            <returns><see cref="T:System.Drawing.Image"/> 객체를 반환한다.</returns>
            <param name="resourceName">가져올 리소스의 이름</param>
            <param name="cultureInfo">리소스에 대한 문화권을 나타내는 <see cref="T:System.Globalization.CultureInfo"/> 객체</param>
        </member>
        <member name="M:TheOne.Resources.EmbeddResourceProvider.GetStream(System.String)">
            <summary>지정된 리소스명을 사용하여 <see cref="T:System.IO.Stream"/> 객체를 가져온다.</summary>
            <returns><see cref="T:System.IO.Stream"/> 객체를 반환한다.</returns>
            <param name="resourceName">가져올 리소스의 이름</param>
        </member>
        <member name="M:TheOne.Resources.EmbeddResourceProvider.GetStream(System.String,System.Globalization.CultureInfo)">
            <summary>지정된 문화권에 대해 지역화된 <see cref="T:System.IO.Stream"/> 객체를 가져온다.</summary>
            <returns><see cref="T:System.IO.Stream"/> 객체를 반환한다.</returns>
            <param name="resourceName">가져올 리소스의 이름</param>
            <param name="cultureInfo">소스에 대한 문화권을 나타내는 <see cref="T:System.Globalization.CultureInfo"/> 객체</param>
        </member>
        <member name="T:TheOne.LicenseValidator">
            <summary>
            라이센스 유효성을 검사하는 클래스<br></br>
            NeoDEEX 프레임워크 인프라를 지원하며 코드에서는 직접 사용할 수 없다.
            </summary>
        </member>
        <member name="M:TheOne.LicenseValidator.ValidateLicense">
            <summary>
            
            </summary>
        </member>
        <member name="T:TheOne.Text.UrlMessageProvider">
            <summary>
            NeoDDEX 구성요소 파일에 설정된 Url(메세지를 가져오는 웹페이지)를 통해 메세지를 가져오기 위한 메세지 공급자를 나타낸다.
            </summary>
            <example>
                Configuration 설정
                <code lang="XML">
            &lt;messageSection defaultProvider="PMS"&gt;
                &lt;provider name="PMS" type="TheOne.Text.UrlMessageProvider"&gt;
                    &lt;parameter key="Url" value="http://localhost/MessagePage.aspx" /&gt;
                &lt;/provider&gt;
            &lt;/messageSection&gt;
            </code>
            </example>
        </member>
        <member name="T:TheOne.Text.MessageProvider">
            <summary>
            메세지 공급자를 만드는 클래스에 대한 기본 추상(abstract) 클래스이다.
            </summary>
            <remarks>
            <see cref="T:TheOne.Text.MessageManager"/> 클래스에서 NeoDEEX 구성 요소 파일의 설정에 따라 <see cref="T:TheOne.Text.MessageProvider"/>에서 파생된 클래스의 인스턴스를
            만들고 GetMessageDataSet 메서드를 호출한다.<br/>
             <see cref="T:TheOne.Text.MessageProvider"/> 에서 파생된 클래스는 GetMessageDataSet 메서드를 override 하여 구현해야 하며
            NeoDEEX 구성 요소 파일의 <see cref="T:TheOne.Text.MessageProvider"/> 노드 하위 Parameter 노드 정보는 MessageProvider 클래스에서 
            파생된 객체의 Paraemters 속성에 저장되므로 해당 클래스의 GetMessageDataSet 메서드를 구현하는 
            과정에서 Parameter 속성을 사용할 수 있다.
            </remarks>   
            <example>
            다음은 UrlMessageProvider의 일부 코드입니다.
            <code>
            public override DataSet GetMessageDataSet(string name, string language)
            {
                string url = this.Parameters[MessagePath];
                DataSet ds = new DataSet();
                
                // 중략...
                
                return ds;
            }
            </code>
            </example>
        </member>
        <member name="M:TheOne.Text.MessageProvider.GetMessageDataSet(System.String,System.String)">
            <summary>
            MessageManager 클래스가 메세지 DataSet을 요청한다.
            </summary>
            <param name="name">NeoDEEX 구성 요소 파일에서 지정된 메세지 공급자의 이름</param>
            <param name="language">언어코드(ko, en...)</param>
            <returns>컬럼의 순서가 다음과 같은 DataSet 객체를 반환한다. (그룹, 코드, 메세지, 캡션) </returns>
            <example>
            다음은 UrlMessageProvider의 일부 코드입니다.
            <code>
            public override DataSet GetMessageDataSet(string name, string language)
            {
                string url = this.Parameters[MessagePath];
                DataSet ds = new DataSet();
                
                // 중략...
                
                return ds;
            }
            </code>
            </example>
        </member>
        <member name="P:TheOne.Text.MessageProvider.Parameters">
            <summary>
            MessageProvider에 전달하는 매개변수 컬렉션을 가져오거나 설정한다.
            </summary>
        </member>
        <member name="F:TheOne.Text.UrlMessageProvider.messagePathKey">
            <summary>
            메세지 경로 키값
            </summary>
        </member>
        <member name="M:TheOne.Text.UrlMessageProvider.GetMessageDataSet(System.String,System.String)">
            <summary>
            NeoDEEX 구성 요소 파일의 MessageProvider 노드의 Parameter에 Url 키로 정의된 Url 정보를 한다.
            Url 정보는 메세지 서버에 대한 경로이며, 이 경로를 호출하여 메시지 DataSet을 받는다. 
            </summary>
            <returns>컬럼의 순서가 다음과 같은 DataSet 객체를 반환한다. (그룹, 코드, 메세지, 캡션) </returns>
            <example>
                Configuration 설정
                <code lang="XML">
            &lt;messageSection defaultProvider="PMS"&gt;
                &lt;provider name="PMS" type="TheOne.Text.UrlMessageProvider"&gt;
                    &lt;parameter key="Url" value="http://localhost/MessagePage.aspx" /&gt;
                &lt;/provider&gt;
            &lt;/messageSection&gt;
            </code>
            </example>
            <param name="name"> NeoDEEX 구성 요소 파일에서 지정된 메세지 공급자의 이름</param>
            <param name="language">언어코드(ko, en...)</param>
        </member>
        <member name="T:TheOne.Deployment.ApplicationExecute">
            <summary>
            ApplicationExecute 클래스는 새로운 애플리케이션 도메인을 생성해서 애플리케이션을 실행한다.
            </summary>
            <remarks>
            새로운 애플리케이션 도메인은 NTD 방식으로 어셈블리를 다운로드 하게된다. 항상 브라우져가 필요한 
            독립 스마트클라이언트의 단점을 해소하고 실행아이콘을 만들어주는 장점이 있다. <br></br>
            ClickOnce Host Application은 다음과 같이 작성한다.
            <example>
            <code>
            static class Program
            {
               [STAThread]
               static void Main()
               {
                   ApplicationExecute.Run("./SmartClient", "WCF.Launcher.exe", "ClientUI.config.xml");
               }
            }
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:TheOne.Deployment.ApplicationExecute.Run(System.String,System.String,System.String)">
            <summary>
            새로운 애플리케이션 도메인을 생성하고 assemblyFile을 실행한다.
            </summary>
            <param name="applicationBase">애플리케이션 베이스 디렉토리. ClickOnce 배포 위치로 부터 상대 경로</param>
            <param name="assemblyFile">실행하려는 어셈블리 파일</param>
            <param name="configurationFile">애플리케이션 Configuration 파일</param>
        </member>
        <member name="T:TheOne.Security.UserInfoContext">
            <summary>
            UserInfoContext 클래스는 사용자 정보를 포함하는 사용자 정보 문맥으로써 현재 스레드에 대한
            사용자의 정보를 담고 있다.
            </summary>
            <remarks>
            이 클래스는 사용자 ID 정보를 비롯하여 사용자 정보를 담는 일반적인 사용자 정보
            컨테이너 클래스이다. 인스턴스의 인덱서를 사용하여 사용자 정보를 설정하거나
            읽을 수 있으며 이 클래스는 버전에 무관한 <b>serailize</b> 와 <b>deserialize</b>를 제공하기 때문에
            인증 여부(로그온 여부)를 판단하는데도 사용될 수 있다.<br/>
            예를 들어, 웹 서비스 호출에 UserInfoContext 인스턴스의 serialize 된 결과 문자열을
            전송함으로써 서버측에서 성공적으로 UserInfoContext를 deserialize 한다면
            인증된 호출로 판단할 수 있는 것이다.<br/>
            UserInfoContext 클래스의 <see href="SetUserInfoContext">SetUserInfoContext</see> 메서드를 호출하여
            현재 스레드의 사용자 정보를 설정할 수 있으며 <see href="SetUserInfoContext">GetUserInfoContext</see>
            메서드를 호출하여 현재 스레드의 사용자 정보를 얻을 수도 있다. 대개 <see href="SetUserInfoContext">SetUserInfoContext</see> 호출은
            프레임워크 내부에서 수행되며 일반 개발자는 이 메서드를 호출할 필요가 없다.<br/>
            이 클래스를 상속 받는 경우, 상속한 클래스는 반드시 <see cref="T:System.SerializableAttribute">Serializable</see> 어트리뷰트가
            명시 되어야 한다.
            <br/><br/>
            UserInfoContext, 혹은 그 파생 클래스는 프레임워크에서 제공하는 리모팅 메시지 싱크와
            SOAP 프록시 Helper 등의 객체를 사용하면 클라이언트의 사용자 정보가 자동으로 서버에
            전송된다.<br/>
            </remarks>
        </member>
        <member name="M:TheOne.Security.UserInfoContext.#ctor">
            <summary>
            내부 deserialize 용 생성자
            </summary>
        </member>
        <member name="M:TheOne.Security.UserInfoContext.#ctor(System.String)">
            <summary>
            지정된 사용자 ID를 사용하여 <see cref="T:TheOne.Security.UserInfoContext"/> 클래스의 새 인스턴스를 초기화한다.
            </summary>
            <param name="userID">CallContext에 기록할 사용자 ID</param>
        </member>
        <member name="M:TheOne.Security.UserInfoContext.SetCallContext">
            <summary>
            UserInfoContext 객체를 CallContext에 설정한다.
            </summary>
            <remarks>
            사용되는 CallContext 키의 기본값은 __context_userid 이다.
            <br/><br/>
            CallContext에 설정된 사용자 정보는 스레드 범위에서 고정적으로
            설정/유지된다. 그러나 다른 스레드에는 영향을 주지 않는다.<br/>
            주의할 점은 ASP .NET은 스레드 풀링을 사용하고 페이지의 처리를
            어떤 스레드가 수행할 것인지 미리 알 수 없다는 점을 유의해야 한다.
            </remarks>
        </member>
        <member name="M:TheOne.Security.UserInfoContext.SetThreadPrincipal">
            <summary>
            주어진 사용자 ID를 이용하여 스레드의 Principal 객체를 설정한다.
            </summary>
            <example>
            string userID = txtUserID.Text;
            string password = txtPassword.Text;
            
            if (DoAuth(userID, password) == true) {
                UserInfoContext userCtx = new UserInfoContext(userID);
                userCtx.SetThreadPrincipal();
            }
            // 이제 언제든지 UserInfoContext.GetUserInfoContext() 메서드를 호출하여
            // 사용자 정보 UserInfo를 얻을 수 있다. 
            </example>
        </member>
        <member name="M:TheOne.Security.UserInfoContext.GetUserInfoContext">
            <summary>
            CallContext로 부터 <see cref="T:TheOne.Security.UserInfoContext"/> 객체를 가져온다.
            </summary>
            <returns>CallContext에 기록된 <see cref="T:TheOne.Security.UserInfoContext"/> 객체를 반환한다.</returns>
        </member>
        <member name="M:TheOne.Security.UserInfoContext.ClearCallContext">
            <summary>
            CallContext 정보를 초기화 한다.
            </summary>
        </member>
        <member name="M:TheOne.Security.UserInfoContext.ClearThreadPrincipal">
            <summary>
            Thread의 Principal을 제거 한다.
            </summary>
        </member>
        <member name="M:TheOne.Security.UserInfoContext.Serialize(TheOne.Security.UserInfoContext)">
            <summary>
            <see cref="T:TheOne.Security.UserInfoContext"/> 객체를 문자열로 serialize 한다.
            </summary>
            <param name="ctx">serialize 대상이 되는 <see cref="T:TheOne.Security.UserInfoContext"/> 객체 혹은 파생 클래스의 객체</param>
            <returns>serialize 된 문자열을 반환한다.</returns>
        </member>
        <member name="M:TheOne.Security.UserInfoContext.Deserialize(System.String)">
            <summary>
            문자열로부터 <see cref="T:TheOne.Security.UserInfoContext"/> 객체를 deserialize 한다.
            </summary>
            <param name="authInfoString">deserialize 대상이 되는 문자열</param>
            <returns>deserialize 된 <see cref="T:TheOne.Security.UserInfoContext"/> 객체 혹은 그 파생 클래스의 객체를 반환한다.</returns>
        </member>
        <member name="M:TheOne.Security.UserInfoContext.VersionIndependantSerialize(TheOne.Security.UserInfoContext)">
            <summary>
            프레임워크 버전에 무관하게 문자열로 serialize 한다. 즉, <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/>를 사용하지 않고
            serialize를 수행한다.
            </summary>
            <returns>serialize된 결과 문자열을 반환한다.</returns>
        </member>
        <member name="M:TheOne.Security.UserInfoContext.VersionIndependantDeserialize(System.String)">
            <summary>
            프레임워크 버전에 무관하게 serialize된 문자열로부터 <see cref="T:TheOne.Security.UserInfoContext"/> 객체를
            deserialize 한다. 즉,  <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/>를 사용하지 않고 deserialize를 수행한다.
            </summary>
            <param name="data">버전에 무관하게 serailize 된 문자열</param>
            <returns>deserialize된 결과  <see cref="T:TheOne.Security.UserInfoContext"/> 객체를 반환한다.</returns>
        </member>
        <member name="M:TheOne.Security.UserInfoContext.InitializeContextData(System.String)">
            <summary>
            프레임워크 버전과 무관하게 serialize 된 문자열로부터  <see cref="T:TheOne.Security.UserInfoContext"/> 객체를 초기화시킨다.
            </summary>
            <param name="data">버전과 무관하게 serialize 된 문자열을 반환한다.</param>
        </member>
        <member name="M:TheOne.Security.UserInfoContext.ToString">
            <summary>
            ToString()을 오버라이드하여 사용자 정보를 키/값 쌍으로 나타낸다.
            </summary>
            <returns>사용자 정보에 대한 키/값 쌍 형태로 문자열을 반환한다.</returns>
        </member>
        <member name="M:TheOne.Security.UserInfoContext.SetCallContext(System.String)">
            <summary>
            UserInfoContext 객체를 CallContext에 설정한다.
            </summary>
            <remarks>
            CallContext에 설정된 사용자 정보는 thread 범위에서 고정적으로
            설정/유지된다. 그러나 다른 스레드에는 영향을 주지 않는다.
            주의할 점은 ASP .NET은 스레드 풀링을 사용하고 페이지의 처리를
            어떤 스레드가 수행할 것인지 미리 알 수 없다는 점을 유의해야 한다.
            </remarks>
            <param name="key">CallContext에 저장될 키</param>
        </member>
        <member name="M:TheOne.Security.UserInfoContext.GetUserInfoContext(System.String)">
            <summary>
            CallContext로 부터 UserInfoContext 객체를 읽는다.
            </summary>
            <param name="key">UserInfoContext 객체에 대한 키</param>
            <returns>CallContext에 기록된 UserInfoContext 객체</returns>
        </member>
        <member name="P:TheOne.Security.UserInfoContext.UserID">
            <summary>
            사용자 ID를 가져오거나 설정한다.
            </summary>
        </member>
        <member name="P:TheOne.Security.UserInfoContext.Item(System.String)">
            <summary>
            지정한 키의 사용자 정보 데이터를 가져오거나 설정한다.
            </summary>
        </member>
        <member name="P:TheOne.Security.UserInfoContext.Current">
            <summary>
            현재 스레드에 설정된 사용자 정보 문맥 객체를 가져온다.
            </summary>
            <value>현재 스레드에 설정된 사용자 정보를 나타내는 <see cref="T:TheOne.Security.UserInfoContext"/> 객체</value>
        </member>
        <member name="T:TheOne.Resources.Configuration.ResourceSection">
            <summary>
            리소스 공급자에 대한 설정을 관리한다.
            </summary>
        </member>
        <member name="E:TheOne.Configuration.ConfigurationBuilder.ConfigurationChanging">
            <summary>
            Configuration 파일이 변경되기 전에 발생하는 이벤트이다.
            </summary>
        </member>
        <member name="E:TheOne.Configuration.ConfigurationBuilder.ConfigurationChanged">
            <summary>
            Configuration 파일이 변경된 후에 발생하는 이벤트이다.
            </summary>
        </member>
        <member name="T:TheOne.Security.AuthorizationException">
            <summary>
            사용자 권한이 만족하지 않거나 없는 경우 발생하는 예외를 나타낸다.
            </summary>
        </member>
        <member name="T:TheOne.TheOneException">
            <summary>
            NeoDEEX Framework에서 발생하는 다양한 예외에 대한 기본 클래스를 정의한다.
            </summary>
            <remarks>
            	<see cref="T:TheOne.TheOneException"/> 클래스는 메시지와 오류코드 정보를 갖는다. 오류 코드 속성은 일반적인 의미의 오류코드이다. 이 클래스를
                상속받은 DBException의 경우, 오류코드는 데이터베이스가 발생한 오류코드이며, 이 클래스를 상속받은 다른 예외 클래스에서는 다른 의미의 코드를
                갖을 수 있음에 유의한다.
            	<para>이 클래스의 인스턴스를 직접 만들어 사용하는 것은 가급적 피하는 것이 좋으며 보다 구체적인 예외 클래스를 상속받아 사용해야만 한다.
                예를들어, 인사 시스템에서는 <see cref="T:TheOne.TheOneException"/>에서 상속받은 (가칭) XXXException 클래스를 정의하고 이 클래스에 인사 시스템에서
                사용하는 오류 코드 등의 정의해서 사용하는 것이 좋다.</para>
            </remarks>
        </member>
        <member name="F:TheOne.TheOneException.GenericServerErrorCode">
            <summary>
            서버측 Generic 오류 코드를 정의하는 상수이다.
            </summary>
        </member>
        <member name="F:TheOne.TheOneException.GenericSecurityErrorCode">
            <summary>
            일반적인 보안 오류 코드를 정의하는 상수이다.
            </summary>
        </member>
        <member name="F:TheOne.TheOneException.message">
            <summary>
            새롭게 정의되는 오류 메세지이다.
            </summary>
            <remarks>
            base 생성자를 바로 호출하지 않고 따로 이 변수를 선언하는 이유는,
            메시지 구성에 유연성을 부가하기 위해서이다.
            </remarks>
        </member>
        <member name="F:TheOne.TheOneException.code">
            <summary>
            예외 코드는 <see cref="T:TheOne.TheOneException"/>이 기본적으로 제공하는 부가정보이다.
            </summary>
            <remarks>
            <see cref="T:TheOne.TheOneException"/>을 상속받는 DBException에서는 이 변수에 DB 에러코드를 세팅한다.
            어플리케이션에서 정의하는 에러코드는 DB 에러코드와 겹치지 않도록 세팅한다.
            </remarks>
        </member>
        <member name="M:TheOne.TheOneException.#ctor">
            <summary>
            <see cref="T:TheOne.TheOneException"/> 클래스의 새 인스턴스를 초기화한다.
            </summary>
            <remarks>
            기본 생성자를 이용하여 초기화 된 <see cref="T:TheOne.TheOneException"/> 객체의 Message 속성은 빈 문자열(String.Empty) 이다.
            </remarks>
        </member>
        <member name="M:TheOne.TheOneException.#ctor(System.String)">
            <summary>
            지정된 오류 메시지를 사용하여 <see cref="T:TheOne.TheOneException"/> 클래스의 새 인스턴스를 초기화한다.
            </summary>
            <param name="msg">오류를 설명하는 메시지</param>
        </member>
        <member name="M:TheOne.TheOneException.#ctor(System.String,System.Exception)">
            <summary>
            지정된 오류 메시지와 예외 객체를 사용하여 <see cref="T:TheOne.TheOneException"/> 클래스의 새 인스턴스를 초기화한다.
            </summary>
            <param name="msg">오류를 설명하는 메시지</param>
            <param name="ie">예외 객체</param>
        </member>
        <member name="M:TheOne.TheOneException.#ctor(System.Int32)">
            <summary>
            지정된 오류 코드를 사용하여 <see cref="T:TheOne.TheOneException"/> 클래스의 새 인스턴스를 초기화한다.
            </summary>
            <param name="code">오류 코드</param>
        </member>
        <member name="M:TheOne.TheOneException.#ctor(System.String,System.Int32)">
            <summary>
            지정된 오류 메시지와 오류코드를 사용하여 <see cref="T:TheOne.TheOneException"/> 클래스의 새 인스턴스를 초기화한다.
            </summary>
            <param name="msg">오류를 설명하는 메시지</param>
            <param name="code">오류 코드</param>
        </member>
        <member name="M:TheOne.TheOneException.#ctor(System.String,System.Int32,System.Exception)">
            <summary>
            지정된 오류 메시지, 오류 코드, 예외객체를 사용하여 <see cref="T:TheOne.TheOneException"/> 클래스의 새 인스턴스를 초기화한다.
            </summary>
            <param name="message">오류를 설명하는 메시지</param>
            <param name="code">오류 코드</param>
            <param name="innerException">예외 객체</param>
        </member>
        <member name="M:TheOne.TheOneException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialize된 데이터를 사용하여 <see cref="T:TheOne.TheOneException"/> 클래스의 새 인스턴스를 초기화한다. 
            </summary>
            <param name="info">Serialize된 객체 데이터를 유지하는 객체</param>
            <param name="context">소스 또는 대상에 대한 컨텍스트 정보</param>
        </member>
        <member name="M:TheOne.TheOneException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            예외에 관한 정보를 <see cref="T:System.Runtime.Serialization.SerializationInfo"/>에 설정한다.
            </summary>
            <remarks>
            Serialization 과정에서 Serializer는 이 메서드를 호출하여 객체의 데이터를 스트림에
            기록하도록 요구한다.
            </remarks>
            <param name="info">throw되는 예외에 대해 Serialize된 객체 데이터를 보유하는 <see cref="T:System.Runtime.Serialization.SerializationInfo"/></param>
            <param name="context">소스 또는 대상에 대한 컨텍스트 정보를 포함하는 <see cref="T:System.Runtime.Serialization.StreamingContext"/></param>
        </member>
        <member name="P:TheOne.TheOneException.Message">
            <summary>
            현재 예외에 대한 오류 코드와 메세지를 가져온다.(<see cref="T:System.Exception"/>에서 상속됨)
            </summary>
        </member>
        <member name="P:TheOne.TheOneException.Code">
            <summary>
            오류 코드를 가져오거나 설정한다.
            </summary>
        </member>
        <member name="M:TheOne.Security.AuthorizationException.#ctor">
            <summary>
            <see cref="T:TheOne.Security.AuthorizationException"/> 클래스의 새 인스턴스를 초기화한다.7
            </summary>
        </member>
        <member name="M:TheOne.Security.AuthorizationException.#ctor(System.String)">
            <summary>
            지정된 오류 메시지를 사용하여 <see cref="T:TheOne.Security.AuthorizationException"/> 클래스의 새 인스턴스를 초기화한다.
            </summary>
            <param name="message">오류를 설명하는 메시지</param>
        </member>
        <member name="M:TheOne.Security.AuthorizationException.#ctor(System.String,System.Exception)">
            <summary>
            지정된 오류 메시지와 예외 객체를 사용하여 <see cref="T:TheOne.Security.AuthorizationException"/> 클래스의 새 인스턴스를 초기화한다.
            </summary>
            <param name="message">오류를 설명하는 메시지</param>
            <param name="innerException">예외 객체</param>
        </member>
        <member name="M:TheOne.Security.AuthorizationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialize된 데이터를 사용하여 <see cref="T:TheOne.Security.AuthorizationException"/> 클래스의 새 인스턴스를 초기화한다. 
            </summary>
            <param name="info">Serialize된 객체 데이터를 유지하는 객체</param>
            <param name="context">소스 또는 대상에 대한 컨텍스트 정보</param>
        </member>
        <member name="M:TheOne.Security.AuthorizationException.#ctor(System.String,System.Int32)">
            <summary>
            지정된 오류 메시지와 오류코드를 사용하여 <see cref="T:TheOne.Security.AuthorizationException"/> 클래스의 새 인스턴스를 초기화한다.
            </summary>
            <param name="message">오류를 설명하는 메시지</param>
            <param name="code">오류 코드</param>
        </member>
        <member name="M:TheOne.Security.AuthorizationException.#ctor(System.String,System.Int32,System.Exception)">
            <summary>
            지정된 오류 메시지, 오류 코드, 예외객체를 사용하여 <see cref="T:TheOne.Security.AuthorizationException"/> 클래스의 새 인스턴스를 초기화한다.
            </summary>
            <param name="message">오류를 설명하는 메시지</param>
            <param name="code">오류 코드</param>
            <param name="innerException">예외 객체</param>
        </member>
        <member name="T:TheOne.Resources.UrlResourceHandlerHelper">
            <summary>
            UrlResourceProvider에서 설정된 url을 통하여 리소스를 가져오기 위하여 Helper를 제공한다.
            </summary>
            <example>
            	<code lang="CS" title="ResourceHandlerPage">
            protected void Page_Load(object sender, EventArgs e)
            {
                string language = Request[UrlResourceHandlerHelper.LanguageParamerKey];
                string resourceType = Request[UrlResourceHandlerHelper.ResourceTypeParameterKey];
                string resourceName = Request[UrlResourceHandlerHelper.ResourceNameParameterKey];
             
                string resourceBaseDirecotory =  Server.MapPath("./Resources");
                
                if (resourceType == UrlResourceHandlerHelper.ResourceTypeStrings)
                {
                    //Response.Clear();
                    if (language == "ko")
                    {
                        TheOne.Resources.UrlResourceStrings urlResourceStrings = new TheOne.Resources.UrlResourceStrings();
                        urlResourceStrings.Strings = new TheOne.Configuration.NamedList&lt;UrlResourceStrings.UrlResourceStringItem&gt;();
                        urlResourceStrings.Strings.Add(new TheOne.Resources.UrlResourceStrings.UrlResourceStringItem("Language", "한글"));
                        UrlResourceHandlerHelper.ResourceStringsWrite(Response.OutputStream, urlResourceStrings);
                    }
                    else if (language == "en")
                    {
                        TheOne.Resources.UrlResourceStrings urlResourceStrings = new TheOne.Resources.UrlResourceStrings();
                        urlResourceStrings.Strings = new TheOne.Configuration.NamedList&lt;UrlResourceStrings.UrlResourceStringItem&gt;();
                        urlResourceStrings.Strings.Add(new TheOne.Resources.UrlResourceStrings.UrlResourceStringItem("Language", "English"));
                        UrlResourceHandlerHelper.ResourceStringsWrite(Response.OutputStream, urlResourceStrings);
                    }
                }
                else if (resourceType == UrlResourceHandlerHelper.ResourceTypeBinary)
                {
                    //Response.ContentType = "Image/gif";
                    if (resourceName == "LOGO")
                    {
                        UrlResourceHandlerHelper.ResourceBinaryWrite(Response.OutputStream, resourceBaseDirecotory, "logo.gif", language);
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="F:TheOne.Resources.UrlResourceHandlerHelper.LanguageParamerKey">
            <summary>
            언어 타입(en, ko, zh, ...)을 전송하기 위한 키를 정의한 상수이다.
            </summary>
        </member>
        <member name="F:TheOne.Resources.UrlResourceHandlerHelper.ResourceTypeParameterKey">
            <summary>
            리소스 타입을 전송하기 위한 키를 정의한 상수이다.
            </summary>
        </member>
        <member name="F:TheOne.Resources.UrlResourceHandlerHelper.ResourceNameParameterKey">
            <summary>
            리소스 명을 전송하기 위한 키를 정의한 상수이다.
            </summary>
        </member>
        <member name="F:TheOne.Resources.UrlResourceHandlerHelper.ResourceTypeStrings">
            <summary>
            문자 리소스 타입 키를 정의한 상수이다.
            </summary>
        </member>
        <member name="F:TheOne.Resources.UrlResourceHandlerHelper.ResourceTypeBinary">
            <summary>
            파일 리소스 타입 키를 정의한 상수이다.
            </summary>
        </member>
        <member name="M:TheOne.Resources.UrlResourceHandlerHelper.ResourceStringsWrite(System.IO.Stream,TheOne.Resources.UrlResourceStrings)">
            <summary>
            문자열 리소스을 지정된 <see cref="T:System.IO.Stream"/>를 사용하여 serialize 한다.
            </summary>
            <param name="stream">serialize에 사용되는 <see cref="T:System.IO.Stream"/></param>
            <param name="urlResourceStrings">serialize할 <see cref="T:TheOne.Resources.UrlResourceStrings"/> 객체</param>
        </member>
        <member name="M:TheOne.Resources.UrlResourceHandlerHelper.ResourceBinaryWrite(System.IO.Stream,System.String,System.String,System.String)">
            <summary>
            이미지 및 기타 바이너리 리소스를 파일로 기록한다.
            </summary>
            <param name="stream">파일을 기록하기 위한 <see cref="T:System.IO.Stream"/>객체</param>
            <param name="resourceBaseDirectory">파일 리소스의 디렉토리 경로</param>
            <param name="resourceFileName">파일 리소스 명(확장자 포함)</param>
            <param name="language">언어 타입(en, ko, zh, ...)</param>
            <returns>파일 리소스 존재 여부를 반환한다. 파일이 존재하지 않으면 <b>false</b>를 반환하고 그렇지 않으면 <b>true</b>를 반환한다.</returns>
        </member>
        <member name="T:TheOne.Resources.ResourceHelper">
            <summary>리소스를 반환하는 정적 메서드를 제공한다.</summary>
            <remarks>
            	NeoDEEX 구성요소 파일의 설정에 따라 ResourceProvider 인스턴스를 생성하고
                해당 ResourceProvider 인스턴스의 GetXXXX 메서드를 호출하여 리소스 데이터를 가져온다.<br/>
            	<para>기본 제공하는 리소스 프로바이더는 EmbeddResourceProvider와 UrlResourceProvider 두 클래스를
                제공한다.</para>
            </remarks>
            <example>
            	<code lang="XML" title="Resource Configruation">
            &lt;theone.configuration&gt;
              &lt;resourceSection defaultResource="RES1"&gt;
                &lt;resource name="RES1" type="TheOne.Resources.EmbeddResourceProvider, OneCorLib"&gt;
                  &lt;parameter name="BaseName" value="EmbeddResrouces.Resources"/&gt;
                  &lt;parameter name="AssemblyPath" value="{리소스 어셈블리 파일명(예, EmbeddResource.dll)}"/&gt;
                &lt;/resource&gt;
                &lt;resource name="RES2" type="TheOne.Resources.UrlResourceProvider, OneCorLib"&gt;
                  &lt;parameter name="ResourceHandlerUrl" value="http://{서버:포트}/ResourceHandler.aspx"/&gt;
                &lt;/resource&gt;
              &lt;/resourceSection&gt;
            &lt;/theone.configuration&gt;
            </code>
            	<code lang="CS" title="ResourceHelper Code Sample">
            // 기본 설정 리소스 사용법
            public void SetEmbeddResource()
            {
                label1.Text = TheOne.Resources.ResourceHelper.GetString("Language");
                pictureBox1.Image = TheOne.Resources.ResourceHelper.GetImage("LOGO");
            }
             
            // 추가 설정 리소스 사용법
            public void SetUrlresource()
            {
                label2.Text = TheOne.Resources.ResourceHelper.GetString("RES2", "Language");
                pictureBox2.Image = TheOne.Resources.ResourceHelper.GetImage("RES2", "LOGO");
            }
            </code>
            </example>
        </member>
        <member name="M:TheOne.Resources.ResourceHelper.GetString(System.String)">
            <summary>지정된 리소스 이름을 사용하여 <see cref="T:System.String"/> 리소스의 값을 반환한다.</summary>
            <returns>지정된 문화권에 대해 지역화된 리소스의 값을 반환한다.</returns>
            <param name="resourceName">가져올 리소스 이름</param>
        </member>
        <member name="M:TheOne.Resources.ResourceHelper.GetString(System.String,System.String)">
            <summary>NeoDEEX 구성요소 파일에 등록된 공급자 이름에 해당 프로바이더에서 제공하는 리소스에서
            지정된 리소스 이름의 <see cref="T:System.String"/> 리소스의 값을 반환한다.</summary>
            <returns>호출자의 현재 문화권 설정에 대해 지역화된 리소스의 값을 반환한다.</returns>
            <param name="resourceName">가져올 리소스 이름</param>
            <param name="providerName">NeoDEEX 구성요소 파일에 등록된 공급자 이름</param>
        </member>
        <member name="M:TheOne.Resources.ResourceHelper.GetString(System.String,System.String,System.String)">
            <summary>
            NeoDEEX 구성요소 파일에 등록된 공급자 이름에 해당 프로바이더에서 제공하는 리소스에서
            지정된 리소스 이름과 언어타입을 사용하여 <see cref="T:System.String"/> 리소스의 값을 반환한다.
            </summary>
            <returns>호출자의 현재 문화권 설정에 대해 지역화된 리소스의 값을 반환한다.</returns>
            <param name="resourceName">가져올 리소스 이름</param>
            <param name="language">소스에 대한 문화권을 나타내는 언어 타입(Korea → ko, English → en,...)</param>
            <param name="providerName">NeoDEEX 구성요소 파일에 등록된 공급자 이름</param>
        </member>
        <member name="M:TheOne.Resources.ResourceHelper.GetImage(System.String)">
            <summary>지정된 리소스 이름을 사용하여 <see cref="T:System.Drawing.Image"/> 객체를 반환한다.</summary>
            <returns><see cref="T:System.Drawing.Image"/> 객체를 반환한다.</returns>
            <param name="resourceName">가져올 리소스 이름</param>
        </member>
        <member name="M:TheOne.Resources.ResourceHelper.GetImage(System.String,System.String)">
            <summary>
            NeoDEEX 구성요소 파일에 등록된 공급자 이름에 해당 프로바이더에서 제공하는 리소스에서
            지정된 리소스 이름의 <see cref="T:System.Drawing.Image"/> 객체를 반환한다.
            </summary>
            <returns><see cref="T:System.Drawing.Image"/> 객체를 반환한다.</returns>
            <param name="resourceName">가져올 리소스 이름</param>
            <param name="providerName">NeoDEEX 구성요소 파일에 등록된 공급자 이름</param>
        </member>
        <member name="M:TheOne.Resources.ResourceHelper.GetImage(System.String,System.String,System.String)">
            <summary>
            NeoDEEX 구성요소 파일에 등록된 공급자 이름에 해당 프로바이더에서 제공하는 리소스에서
            지정된 리소스 이름과 언어타입을 사용하여 <see cref="T:System.Drawing.Image"/> 객체를 반환한다.
            </summary>
            <returns><see cref="T:System.Drawing.Image"/> 객체를 반환한다.</returns>
            <param name="resourceName">가져올 리소스 이름</param>
            <param name="language">소스에 대한 문화권을 나타내는 언어 타입(Korea → ko, English → en,...)</param>
            <param name="providerName">NeoDEEX 구성요소 파일에 등록된 공급자 이름</param>
        </member>
        <member name="M:TheOne.Resources.ResourceHelper.GetStream(System.String)">
            <summary>지정된 리소스 이름을 사용하여 <see cref="T:System.IO.Stream"/> 객체를 반환한다.</summary>
            <returns><see cref="T:System.IO.Stream"/> 객체를 반환한다.</returns>
            <param name="resourceName">가져올 리소스 이름</param>
        </member>
        <member name="M:TheOne.Resources.ResourceHelper.GetStream(System.String,System.String)">
            <summary>
            NeoDEEX 구성요소 파일에 등록된 공급자 이름에 해당 프로바이더에서 제공하는 리소스에서
            지정된 리소스 이름의 <see cref="T:System.IO.Stream"/> 객체를 반환한다.
            </summary>
            <returns><see cref="T:System.IO.Stream"/> 객체를 반환한다.</returns>
            <param name="resourceName">가져올 리소스 이름</param>
            <param name="providerName">NeoDEEX 구성요소 파일에 등록된 공급자 이름</param>
        </member>
        <member name="M:TheOne.Resources.ResourceHelper.GetStream(System.String,System.String,System.String)">
            <summary>
            NeoDEEX 구성요소 파일에 등록된 공급자 이름에 해당 프로바이더에서 제공하는 리소스에서
            지정된 리소스 이름과 언어타입을 사용하여 <see cref="T:System.IO.Stream"/> 객체를 반환한다.
            </summary>
            <returns><see cref="T:System.IO.Stream"/> 객체를 반환한다.</returns>
            <param name="resourceName">가져올 리소스 이름</param>
            <param name="language">소스에 대한 문화권을 나타내는 언어 타입(Korea → ko, English → en,...)</param>
            <param name="providerName">NeoDEEX 구성요소 파일에 등록된 공급자 이름</param>
        </member>
        <member name="F:TheOne.Resources.ResourceHelper._CallingResources">
            <summary>
            리소스 메니저 객체 리스트
            </summary>
        </member>
        <member name="M:TheOne.Resources.ResourceHelper.GetResourceManager(System.String,System.Reflection.Assembly)">
            <summary>
            리소스 메니저 관리
            </summary>
            <param name="baseName"></param>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:TheOne.Resources.ResourceHelper.GetStringFromCallingAssembly(System.String)">
            <summary>
            호출한 객체를 포함한 Assembly의 포함 리소스 문자열를 반환 한다.<br/>
            단, 리소스 베이스명은 [Assemlby명.Resources.Default]로 사용한다.
            </summary>
            <param name="resourceName">리소스 명</param>
            <returns>문자열을 반환한다.</returns>
        </member>
        <member name="M:TheOne.Resources.ResourceHelper.GetStringFromCallingAssembly(System.String,System.String)">
            <summary>
            호출한 객체를 포함한 Assembly의 포함 리소스 문자열를 포맷팅 하여 반환 한다.
            </summary>
            <param name="baseName">리소스 베이스 명</param>
            <param name="resourceName">리소스 명</param>
            <returns>문자열을 반환한다.</returns>
        </member>
        <member name="M:TheOne.Resources.ResourceHelper.GetStringFromCallingAssembly(System.String,System.String,System.String)">
            <summary>
            호출한 객체를 포함한 Assembly의 포함 리소스 문자열를 포맷팅 하여 반환 한다.
            </summary>
            <param name="language">2자리 언어 코드(en, ko, ...)</param>
            <param name="baseName">리소스 베이스 명</param>
            <param name="resourceName">리소스 명</param>
            <returns>문자열을 반환한다.</returns>
        </member>
        <member name="M:TheOne.Resources.ResourceHelper.GetImageFromCallingAssembly(System.String)">
            <summary>
            호출한 객체를 포함한 Assembly의 포함 리소스 이미지를 반환 한다.<br/>
            단, 리소스 베이스명은 [Assemlby명.Resources.Default]로 사용한다.
            </summary>
            <param name="resourceName">리소스 명</param>
            <returns>이미지 객체를 반환한다.</returns>
        </member>
        <member name="M:TheOne.Resources.ResourceHelper.GetImageFromCallingAssembly(System.String,System.String)">
            <summary>
            호출한 객체를 포함한 Assembly의 포함 리소스 이미지를 반환 한다.
            </summary>
            <param name="baseName">리소스 베이스 명</param>
            <param name="resourceName">리소스 명</param>
            <returns>이미지 객체를 반환한다ㅏ</returns>
        </member>
        <member name="M:TheOne.Resources.ResourceHelper.GetImageFromCallingAssembly(System.String,System.String,System.String)">
            <summary>
            호출한 객체를 포함한 Assembly의 포함 리소스 이미지를 반환 한다.
            </summary>
            <param name="language">2자리 언어 코드(en, ko, ...)</param>
            <param name="baseName">리소스 베이스 명</param>
            <param name="resourceName">리소스 명</param>
            <returns>이미지 객체를 반환한다.</returns>
        </member>
        <member name="M:TheOne.Resources.ResourceHelper.GetStreamFromCallingAssembly(System.String)">
            <summary>
            호출한 객체를 포함한 Assembly의 Stream 개체를 반환 한다.<br/>
            단, 리소스 베이스명은 [Assemlby명.Resources.Default]로 사용한다.
            </summary>
            <param name="resourceName">리소스 명</param>
            <returns>이미지 객체를 반환한다.</returns>
        </member>
        <member name="M:TheOne.Resources.ResourceHelper.GetStreamFromCallingAssembly(System.String,System.String)">
            <summary>
            호출한 객체를 포함한 Assembly의 Stream 개체를 반환 한다.
            </summary>
            <param name="baseName">리소스 베이스 명</param>
            <param name="resourceName">리소스 명</param>
            <returns>스트림 객체를 반환한다.</returns>
        </member>
        <member name="M:TheOne.Resources.ResourceHelper.GetStreamFromCallingAssembly(System.String,System.String,System.String)">
            <summary>
            호출한 객체를 포함한 Assembly의 Stream 개체를 반환 한다.
            </summary>
            <param name="language">2자리 언어 코드(en, ko, ...)</param>
            <param name="baseName">리소스 베이스 명</param>
            <param name="resourceName">리소스 명</param>
            <returns>파일 스트림객체를 반환한다.</returns>
        </member>
        <member name="T:TheOne.Resources.Configuration.ResourceSectionFactory">
            <summary>
            리소스 공급자 컬렉션 정보들을 관리하는 Factory 클래스이다.
            </summary>
        </member>
        <member name="T:TheOne.Net.HttpClient">
            <summary><para>HTTP Web Server Client</para></summary>
        </member>
        <member name="M:TheOne.Net.HttpClient.InvokeWeb(System.String)">
            <returns>Server Page 로 부터 Response Data를 '\n' 값으로 구분하여 반환.</returns>
            <summary>Web Server Page 호출 후 값을 반환</summary>
            <param name="url">
            	<para>호출 Server Page Url</para>
            	<para>(Url Parameter 포함)</para>
            </param>
        </member>
        <member name="T:TheOne.Diagnostics.LogLevel">
            <summary>
            이벤트 로그 또는 파일 로그의 형식을 지정한다.
            </summary>
            <remarks>
            LogLevel은 이벤트 로그의 로그 레벨과 동등하다. 다만 Verbose는 이벤트 로그의
            SuccessAduit에 대응된다.
            </remarks>
        </member>
        <member name="F:TheOne.Diagnostics.LogLevel.Verbose">
            <summary>
            단순 트레이스, 디버깅을 위한 용도의 로깅 레벨을 나타낸다.
            </summary>
        </member>
        <member name="F:TheOne.Diagnostics.LogLevel.Information">
            <summary>
            정보 표시 용도의 로깅 레벨을 나타낸다.
            </summary>
        </member>
        <member name="F:TheOne.Diagnostics.LogLevel.Warnning">
            <summary>
            경고 표시 용도의 로깅 레벨을 나타낸다.
            </summary>
        </member>
        <member name="F:TheOne.Diagnostics.LogLevel.Error">
            <summary>
            오류 표시 용도의 로깅 레벨을 나타낸다.
            </summary>
        </member>
        <member name="T:TheOne.Diagnostics.FileLogger">
            <summary>
            파일에 로그를 기록하는 인스턴스 메서드를 제공한다.
            </summary>
            <remarks>
            로그 파일이 생성되는 디렉터리는 configuration 파일의 logDirectory 특성의 값을 따른다.
            만약 이 키가 존재하지 않는 경우 C:\Temp 디렉토리를 사용한다. 지정된 로그 파일 디렉토리가 존재하지 않는다면 
            자동으로 생성될 것이다.
            <br></br>
            Configuration 파일의 위치는 AppSettings의 ConfigurationFile 키값에서 지정하며 AppSettings의 ConfigurationFile
            키값이 없거나 LogSection에 FileLog에 대한 설정이 없으면 모든 설정값은 기본값을 사용한다.
            <br></br>
            로그 파일은 지정된 파일명 뒤에 로그 파일이 일별로 생성됨을 의미하는 yymmdd 형식의 날짜 suffix가 붙는다. 
            파일명이 명시적으로 생성자에 입력되지 않으면 NeoDEEX 구성 파일의 값을 사용하며, NeoDEEX 구성 파일이 없는 경우
            "TheOneLog"를 사용한다. 
            로그 파일의 각 로그 메시지 엔트리는 로그 메시지의 레벨(아래 참조)의 첫글자와 로그의 발생 시간이 같이 표시된다.
            <br></br>
            예) V 11:22:21.122: Log message sample...
            <br></br>
            로깅 메시지는 Error, Warnning, Information, Verbose 4가지 레벨로 구성된다.
            Error는 오류를, Warnning은 경고를, Information은 정보를, Verbose는 디버깅이나
            트레이스 용도로 사용한다.
            <br></br>
            로깅 메시지는 BaseLogLevel을 기준으로 로그 파일에 기록되거나 기록되지 않을 수도 있다.
            즉, BaseLogLevel 보다 낮은 레벨의 로깅 메시지는 파일에 기록되지 않는다.
            예를 들어 BaseLogLevel이 Information 인 경우, Verbose 로깅 메시지는 로그 파일에
            기록되지 않는다. 개발 및 초기 운영 단계에서는 BaseLogLevel을 낮은 수준(Verbose)에 두어 다양한
            로그 메시지를 남김으로써 디버깅에 도움이 되도록 하고, 시스템 안정화 이후에
            로그 레벨을 높임으로써 불필요한 로그 메시지가 성능을 저하시키지 않도록 한다.
            <br></br>
            BaseLogLevel은 NeoDEEX 구성 파일의 baseLogLevel 특성의 값에 의해 결정된다. 
            NeoDEEX 구성 파일이 없는 경우 BaseLogLevel의 기본값은 Verbose이다.
            </remarks>
            <example>
            NeoDEEX 구성 파일의 LogSection 예제.
            <code>
            &lt;?xml version="1.0" encoding="utf-8"?&gt;
            &lt;theone.configuration&gt;
            	&lt;logSettings&gt;
            		&lt;fileLog enabled="true" baseLogLevel="Information" logDirectory="C:\Temp" defaultPrefix="SmartOne" /&gt;
            		&lt;eventLog enabled="true" baseLogLevel="Warnning" eventLog="TheOne" defaultEventSource="SmartOne" /&gt;
            	&lt;/logSettings&gt;
            &lt;/theone.configuration&gt;
            </code>
            다음은 FileLogHelper 사용예제입니다.
            <code>
            FileLogger log = new FileLogger("MyLog");
            log.Write("Test log message : {0}", DateTime.Now);
            </code>
            </example> 
        </member>
        <member name="M:TheOne.Diagnostics.FileLogger.#ctor">
            <summary>
            로그 레벨 기본값과 기본 파일명을 사용하여 <see cref="T:TheOne.Diagnostics.FileLogger"/>클래스의 새 인스턴스를 초기화한다.
            생성한다.
            </summary>
            <remarks>
            로그레벨 기본값은 <see cref="P:TheOne.Diagnostics.FileLogHelper.DefaultLogLevel"/> 값을 사용하고, 
            기본 파일명은 <see cref="P:TheOne.Diagnostics.FileLogHelper.DefaultFilePrefix"/> 값을 사용한다. 
            로그레벨이 BaseLogLevel 보다 낮은 경우, 로그는 기록되지 않음에 유의해야 한다.
            </remarks>
        </member>
        <member name="M:TheOne.Diagnostics.FileLogger.#ctor(TheOne.Diagnostics.LogLevel)">
            <summary>
            지정된 로그 레벨과 기본 파일명을 사용하여 <see cref="T:TheOne.Diagnostics.FileLogger"/>클래스의 새 인스턴스를 초기화한다.
            </summary>
            <param name="level">로그 레벨</param>
            <remarks>
            기본 파일명은 <see cref="P:TheOne.Diagnostics.FileLogHelper.DefaultFilePrefix"/> 값을 사용한다. 
            로그 레벨이 BaseLogLevel 보다 낮은 경우, 로그는 기록되지 않음에 유의해야 한다.
            </remarks>
        </member>
        <member name="M:TheOne.Diagnostics.FileLogger.#ctor(System.String)">
            <summary>
            로그레벨 기본값과 지정된 파일명을 사용하여 <see cref="T:TheOne.Diagnostics.FileLogger"/>클래스의 새 인스턴스를 초기화한다.
            </summary>
            <param name="filePrefix">로그 파일명</param>
            <remarks>
            기본 로그레벨은 <see cref="P:TheOne.Diagnostics.FileLogHelper.DefaultLogLevel"/> 값을 사용한다, 
            로그 레벨이 BaseLogLevel 보다 낮은 경우, 로그는 기록되지 않음에 유의해야 한다.
            </remarks>
        </member>
        <member name="M:TheOne.Diagnostics.FileLogger.#ctor(System.String,TheOne.Diagnostics.LogLevel)">
            <summary>
            지정된 로그레벨과 파일명을 사용하여 <see cref="T:TheOne.Diagnostics.FileLogger"/>클래스의 새 인스턴스를 초기화한다.
            </summary>
            <param name="filePrefix">로그 파일명</param>
            <param name="defaultLevel">로그 레벨</param>
            <remarks>
            로그 레벨이 BaseLogLevel 보다 낮은 경우, 로그는 기록되지 않음에 유의해야 한다.
            </remarks>
        </member>
        <member name="M:TheOne.Diagnostics.FileLogger.Write(System.String,System.Object[])">
            <summary>
            로그 파일에 로그 메시지를 기록한다.
            </summary>
            <param name="format">로그 메시지 포맷</param>
            <param name="args">가변 매개변수</param>
            <remarks>
            로그 파일명은 <see cref="P:TheOne.Diagnostics.FileLogger.FilePrefix"/> 값을 사용하고
            로그 메시지의 로그 레벨은 <see cref="P:TheOne.Diagnostics.FileLogger.LogLevel"/> 값을 사용한다.
            </remarks>
            <example>
            <code>
            FileLogger log = new FileLogger("MyLog");
            log.Write("Message");						// use default log level
            log.LogLevel = LogLevel.Error;
            log.Write("Message {0}", DateTime.Now);		// log level is 'Error'
            </code>
            </example>
        </member>
        <member name="M:TheOne.Diagnostics.FileLogger.Write(TheOne.Diagnostics.LogLevel,System.String,System.Object[])">
            <summary>
            로그 파일에 로그 메시지를 기록한다.
            </summary>
            <param name="level">로그 메시지 레벨</param>
            <param name="format">로그 메시지 포맷</param>
            <param name="args">가변 매개변수</param>
            <remarks>
            로그 파일명은 <see cref="P:TheOne.Diagnostics.FileLogger.FilePrefix"/> 값을 사용하고
            이 메서드 호출에 지정된 로그 레벨은 <see cref="P:TheOne.Diagnostics.FileLogger.LogLevel"/> 속성의 값을 오버라이드 한다.
            </remarks>
            <example>
            <code>
            FileLogger log = new FileLogger("MyLog");
            log.Write("Message");			// use default (Verbose)
            log.Write(LogLevel.Error, "Message {0}", DateTime.Now);		// log level is 'Error'
            </code>
            </example>
        </member>
        <member name="M:TheOne.Diagnostics.FileLogger.WriteIf(System.Boolean,System.String,System.Object[])">
            <summary>
            지정된 조건식이 <b>true</b> 이면 로그 파일에 로그 메시지를 기록한다.
            </summary>
            <param name="expr">조건식</param>
            <param name="format">로그 메시지 포맷</param>
            <param name="args">가변 매개변수</param>
            <remarks>
            로그 파일명은 <see cref="P:TheOne.Diagnostics.FileLogger.FilePrefix"/> 값을 사용하고
            로그 메시지의 로그 레벨은 <see cref="P:TheOne.Diagnostics.FileLogger.LogLevel"/> 값을 사용한다.
            </remarks>
            <example>
            <code>
            FileLogger log = new FileLogger("MyLog");
            log.Write("Message");			// force logging (using default verbose level)
            log.LogLevel = LogLevel.Error;
            log.WriteIf(!successFlag, "Error Message {0}", DateTime.Now);		// log level is 'Error'
            </code>
            </example>
        </member>
        <member name="M:TheOne.Diagnostics.FileLogger.WriteIf(System.Boolean,TheOne.Diagnostics.LogLevel,System.String,System.Object[])">
            <summary>
            지정된 조건식이 <b>true</b> 이면 로그 파일에 로그 메시지를 기록한다.
            </summary>
            <param name="expr">조건식</param>
            <param name="level">로그 메시지 레벨</param>
            <param name="format">로그 메시지 포맷</param>
            <param name="args">가변 매개변수</param>
            <remarks>
            로그 파일명은 <see cref="P:TheOne.Diagnostics.FileLogger.FilePrefix"/> 값을 사용하고
            이 메서드 호출에 지정된 로그 레벨은 <see cref="P:TheOne.Diagnostics.FileLogger.LogLevel"/> 속성의 값을 오버라이드 한다.
            </remarks>
            <example>
            <code>
            FileLogger log = new FileLogger("MyLog");
            log.Write("Message");			// force logging. use default (Verbose)
            log.WriteIf(!successFlag, LogLevel.Error, "Error Message {0}", DateTime.Now);		// log level is 'Error'
            </code>
            </example>
        </member>
        <member name="P:TheOne.Diagnostics.FileLogger.FilePrefix">
            <summary>
            <see cref="T:TheOne.Diagnostics.FileLogger"/> 인스턴스에서 사용하는 로그 파일명을 가져오거나 설정한다.
            </summary>
            <remarks>
            로그 파일명 뒤에 yymmd 형식의 날짜 suffix 가 붙는다. 예를 들어
            FilePrefix 프로퍼티의 값이 MyLog 라면 MyLog_090101.log 형태의 로그
            파일이 기록되며 이 로그는 2009년 1월 1일에 작성된 로그인 것이다.
            기본 로그 파일명은 DefaultFilePrefix 속성의 값이 사용된다.
            </remarks>
        </member>
        <member name="P:TheOne.Diagnostics.FileLogger.LogLevel">
            <summary>
            <see cref="T:TheOne.Diagnostics.FileLogger"/> 인스턴스에서 로깅 메시지의 메시지 레벨을 가져오거나 설정한다.
            </summary>
            <remarks>
            Write 메서드들에서 명시적으로 LogLevel을 주지 않을 때 이 속성의 값이 메시지 레벨로 사용된다. 
            기본값은 <see cref="P:TheOne.Diagnostics.FileLogHelper.DefaultLogLevel"/> 을 사용한다.
            </remarks>
            <example>
            <code>
            FileLogger log = new FileLogger("MyLog");
            log.Write("Hello");				// Verbose 메시지
            log.LogLevel = LogLevel.Error;	// 디폴트 로그 레벨 수정
            log.Write("Hello again");		// Error 메시지
            </code>
            </example>
        </member>
        <member name="T:TheOne.Diagnostics.EventLogHelper">
            <summary>
            이벤트 로그에 메시지를 남기는 정적 메서드를 제공한다.
            </summary>
            <remarks>
            이벤트 로그에 메시지를 남기기 위한 클래스로는 .NET Framework가 제공한는
            System.Diagnostics.EventLog 클래스를 사용할 수도 있지만 EventLogHelper 클래스는
            보다 편리한 기능을 제공한다.
            <br/><br/>
            Windows NT 이상에서 제공되는 이벤트 로그는 이벤트 로그 파일에 각각 기록된다.
            기본으로 제공되는 이벤트 로그는 Application, Security, System의 세가지가 있다.
            EventLogHelper 클래스는 추가적으로 어플리케이션 시스템 레벨의 이벤트 로그 파일에
            이벤트 로그가 기록되게 된다. 이는 EventLog Viewer에서 Windows가 제공하는 세가지
            이벤트 로그 외에 추가적인 항목이 나타나게 됨을 의미한다.
            이를 통해 보다 독립적인 이벤트 로깅 기능을 구축할 수 있다.
            EventLogHelper 클래스를 통해 기록되는 이벤트 로그는 NeoDEEX 구성 파일의 eventLog 값을
            사용하며 NeoDEEX 구성 파일이 없는 경우 기본 로그인 'TheOne' 이벤트 로그에 기록된다.
            지정된 이벤트 소스명을 사용해서 이벤트 로그에 기록하고, 지정된 이벤스 소스가 없는 경우에는
            NeoDEEX 구성 파일의 defaultEventSource를 사용하며 NeoDEEX 구성 파일이 없는 경우에는
            기본값인 "TheOneLog" 사용한다.
            <br/><br/>
            로깅 메시지는 Error, Warnning, Information, Verbose 4가지 레벨로 구성된다.
            Error는 오류를, Warnning은 경고를, Information은 정보를, Verbose는 디버깅이나
            트레이스 용도로 사용한다. 이 레벨은 EventLog의 EventLogEntryType과는 다른
            프레임워크만의 레벨임에 유의해야 한다.
            <br/><br/>
            로깅 메시지는 BaseLogLevel을 기준으로 로그 파일에 기록되거나 기록되지 않을 수도 있다.
            즉, BaseLogLevel 보다 낮은 레벨의 로깅 메시지는 파일에 기록되지 않는다.
            예를 들어 BaseLogLevel이 Information 인 경우, Verbose 로깅 메시지는 로그 파일에
            기록되지 않는다. 개발 및 초기 운영 단계에서는 BaseLogLevel을 낮은 수준(Verbose)에 두어 다양한
            로그 메시지를 남김으로써 디버깅에 도움이 되도록 하고, 시스템 안정화 이후에
            로그 레벨을 높임으로써 불필요한 로그 메시지가 성능을 저하시키지 않도록 한다.
            <br/><br/>
            BaseLogLevel은 NeoDEEX 구성 파일의 baseLogLevel 특성의 값에 의해 결정된다. 
            NeoDEEX 구성 파일이 없는 경우 BaseLogLevel의 기본값은 <see cref="F:TheOne.Diagnostics.LogLevel.Warnning"/>이다.
            </remarks>
            <example>
             NeoDEEX 구성 파일의 LogSection 예제.
            <code>
            &lt;?xml version="1.0" encoding="utf-8"?&gt;
            &lt;theone.configuration&gt;
                &lt;logSettings&gt;
                    &lt;fileLog enabled="true" baseLogLevel="Information" directory="C:\Temp" defaultPrefix="SmartOne" /&gt;
                    &lt;eventLog enabled="true" baseLogLevel="Warnning" eventLog="TheOne" defaultEventSource="Framework" /&gt;
                &lt;/logSettings&gt;
            &lt;/theone.configuration&gt;
            </code>
            다음은 EventLogHelper 사용예제입니다.
            <code>		
            EventLogHelper.Write("PMS", "Error!");
            EventLogHelper.Write(LogLevel.Error, "Error! check your configuration");
            </code>
            </example>
        </member>
        <member name="M:TheOne.Diagnostics.EventLogHelper.Write(System.String,System.Object[])">
            <summary>
            기본값으로 정의된 이벤트 소스 이름으로 이벤트 로그에 메시지를 기록한다.
            </summary>
            <param name="format">메시지 포맷</param>
            <param name="args">가변 매개변수</param>
            <remarks>
            메시지 레벨은 정적속성인 DefautLogLevel의 값이 사용되며
            이벤트 ID의 기본값과 카테고리의 기본값은 0 이 사용된다.
            정적 Write 메서드는 간단히 한 번의 로그 메시지를 남기고자 할 때
            <see cref="T:TheOne.Diagnostics.EventLogHelper"/>의 인스턴스를 생성할 필요 없이 사용이 가능하므로 사용이 용이하다.
            이벤트 로그는 Application, System 등의 로그가 아닌 configuration 파일의 eventLog 특성에 
            설정된 값을 사용해서 기록되며 configuration 파일이 정의되지 않은 경우에는 "TheOne" 로그에 기록된다.
            이벤트 소스는 configuration 파일의 defaultEventSource 값을 사용하고 configuration 파일이 
            정의되지 않은 경우에는 "TheOneLog" 값을 사용한다.
            </remarks>
            <example>
            <code>
            EventLogHelper.Write("Message");					// use default log level(information)
            EventLogHelper.Write(LogLevel.Error, "Message {0}", DateTime.Now);		// 'Error' log message
            EventLogHelper.Write(LogLevel.Inforamtion, 1001, "Using event ID 1001");
            EventLogHelper.Write(LogLevel.Information, 1001, 1, "Using event ID, category ID..");
            </code>
            </example>
        </member>
        <member name="M:TheOne.Diagnostics.EventLogHelper.Write(TheOne.Diagnostics.LogLevel,System.String,System.Object[])">
            <summary>
            기본값으로 정의된 이벤트 소스 이름으로 이벤트 로그에 메시지를 기록한다.
            </summary>
            <param name="level">로그 메시지 레벨</param>
            <param name="format">메시지 포맷</param>
            <param name="args">가변 매개변수</param>
            <remarks>
            이벤트 ID의 기본값과 카테고리의 기본값은 0 이 사용된다.
            지정된 로그 메시지 레벨이 <see cref="P:TheOne.Diagnostics.EventLogHelper.BaseLogLevel"/> 보다 낮은 경우, 메시지는 필터링 된다.
            정적 Write 메서드는 간단히 한 번의 로그 메시지를 남기고자 할 때
            <see cref="T:TheOne.Diagnostics.EventLogHelper"/>의 인스턴스를 생성할 필요 없이 사용이 가능하므로 사용이 용이하다.
            이벤트 로그는 Application, System 등의 로그가 아닌 configuration 파일의 eventLog 특성에 
            설정된 값을 사용해서 기록되며 configuration 파일이 정의되지 않은 경우에는 "TheOne" 로그에 기록된다.
            이벤트 소스는 configuration 파일의 defaultEventSource 값을 사용하고 configuration 파일이 
            정의되지 않은 경우에는 "TheOneLog" 값을 사용한다.
            </remarks>
            <example>
            <code>
            EventLogHelper.Write("Message");			// use default log level(information)
            EventLogHelper.Write(LogLevel.Error, "Message {0}", DateTime.Now);		// 'Error' log message
            EventLogHelper.Write(LogLevel.Inforamtion, 1001, "Using event ID 1001");
            EventLogHelper.Write(LogLevel.Information, 1001, 1, "Using event ID, category ID..");
            </code>
            </example>
        </member>
        <member name="M:TheOne.Diagnostics.EventLogHelper.Write(TheOne.Diagnostics.LogLevel,System.Int32,System.String,System.Object[])">
            <summary>
            기본값으로 정의된 이벤트 소스 이름으로 이벤트 로그에 메시지를 기록한다.
            </summary>
            <param name="level">로그 메시지 레벨</param>
            <param name="eventID">이벤트 ID</param>
            <param name="format">메시지 포맷</param>
            <param name="args">가변 매개변수</param>
            <remarks>
            이벤트 카테고리의 기본값은 0 이 사용된다.
            지정된 로그 메시지 레벨이 <see cref="P:TheOne.Diagnostics.EventLogHelper.BaseLogLevel"/> 보다 낮은 경우, 메시지는 필터링 된다.
            정적 Write 메서드는 간단히 한 번의 로그 메시지를 남기고자 할 때
            <see cref="T:TheOne.Diagnostics.EventLogHelper"/>의 인스턴스를 생성할 필요 없이 사용가능하므로 사용이 용이하다.
            이벤트 로그는 Application, System 등의 로그가 아닌 configuration 파일의 eventLog 특성에 
            설정된 값을 사용해서 기록되며 configuration 파일이 정의되지 않은 경우에는 "TheOne" 로그에 기록된다.
            이벤트 소스는 configuration 파일의 defaultEventSource 값을 사용하고 configuration 파일이 
            정의되지 않은 경우에는 "TheOneLog" 값을 사용한다.
            </remarks>
            <example>
            <code>
            EventLogHelper.Write("Message");			// use default log level(information)
            EventLogHelper.Write(LogLevel.Error, "Message {0}", DateTime.Now);		// 'Error' log message
            EventLogHelper.Write(LogLevel.Inforamtion, 1001, "Using event ID 1001");
            EventLogHelper.Write(LogLevel.Information, 1001, 1, "Using event ID, category ID..");
            </code>
            </example>
        </member>
        <member name="M:TheOne.Diagnostics.EventLogHelper.Write(TheOne.Diagnostics.LogLevel,System.Int32,System.Int16,System.String,System.Object[])">
            <summary>
            기본값으로 정의된 이벤트 소스 이름으로 이벤트 로그에 메시지를 기록한다.
            </summary>
            <param name="level">로그 메시지 레벨</param>
            <param name="eventID">이벤트 ID</param>
            <param name="category">카테고리 ID</param>
            <param name="format">메시지 포맷</param>
            <param name="args">가변 매개변수</param>
            <remarks>
            지정된 로그 메시지 레벨이 <see cref="P:TheOne.Diagnostics.EventLogHelper.BaseLogLevel"/> 보다 낮은 경우, 메시지는 필터링 된다.
            정적 Write 메서드는 간단히 한 번의 로그 메시지를 남기고자 할 때
            <see cref="T:TheOne.Diagnostics.EventLogHelper"/>의 인스턴스를 생성할 필요 없이 사용가능하므로 사용이 용이하다.
            이벤트 로그는 Application, System 등의 로그가 아닌 configuration 파일의 eventLog 특성에 
            설정된 값을 사용해서 기록되며 configuration 파일이 정의되지 않은 경우에는 "TheOne" 로그에 기록된다.
            이벤트 소스는 configuration 파일의 defaultEventSource 값을 사용하고 configuration 파일이 
            정의되지 않은 경우에는 "TheOneLog" 값을 사용한다.
            </remarks>
            <example>
            <code>
            EventLogHelper.Write("Message");			// use default log level(information)
            EventLogHelper.Write(LogLevel.Error, "Message {0}", DateTime.Now);		// 'Error' log message
            EventLogHelper.Write(LogLevel.Inforamtion, 1001, "Using event ID 1001");
            EventLogHelper.Write(LogLevel.Information, 1001, 1, "Using event ID, category ID..");
            </code>
            </example>
        </member>
        <member name="M:TheOne.Diagnostics.EventLogHelper.Write(TheOne.Diagnostics.LogLevel,System.Int32,System.Int16,System.Byte[],System.String,System.Object[])">
            <summary>
            기본값으로 정의된 이벤트 소스 이름으로 이벤트 로그에 메시지를 기록한다.
            </summary>
            <param name="level">로그 메시지 레벨</param>
            <param name="eventID">이벤트 ID</param>
            <param name="category">카테고리 ID</param>
            <param name="rawData">이벤트 raw 데이터</param>
            <param name="format">메시지 포맷</param>
            <param name="args">가변 매개변수</param>
            <remarks>
            지정된 로그 메시지 레벨이 <see cref="P:TheOne.Diagnostics.EventLogHelper.BaseLogLevel"/> 보다 낮은 경우, 메시지는 필터링 된다.
            정적 Write 메서드는 간단히 한 번의 로그 메시지를 남기고자 할 때
            <see cref="T:TheOne.Diagnostics.EventLogHelper"/>의 인스턴스를 생성할 필요 없이 사용가능하므로 사용이 용이하다.
            이벤트 로그는 Application, System 등의 로그가 아닌 configuration 파일의 eventLog 특성에 
            설정된 값을 사용해서 기록되며 configuration 파일이 정의되지 않은 경우에는 "TheOne" 로그에 기록된다.
            이벤트 소스는 configuration 파일의 defaultEventSource 값을 사용하고 configuration 파일이 
            정의되지 않은 경우에는 "TheOneLog" 값을 사용한다.
            </remarks>
            <example>
            <code>
            EventLogHelper.Write("Message");			// use default log level(information)
            EventLogHelper.Write(LogLevel.Error, "Message {0}", DateTime.Now);		// 'Error' log message
            EventLogHelper.Write(LogLevel.Inforamtion, 1001, "Using event ID 1001");
            EventLogHelper.Write(LogLevel.Information, 1001, 1, "Using event ID, category ID..");;
            
            IPAddress ip = GetPeerIPAddress();   // call user-defined method for get IP
            byte[] rawData = ip.GetAddressBytes();
            EventLogHelper.Write(LogLevel.Information, 1001, 1, rawData, "Connect from peer: {0}", ip.ToString());
            </code>
            </example>
        </member>
        <member name="M:TheOne.Diagnostics.EventLogHelper.Write(System.String,TheOne.Diagnostics.LogLevel,System.String,System.Object[])">
            <summary>
            지정된 이벤트 소스 이름으로 이벤트 로그에 메시지를 기록한다.
            </summary>
            <param name="source">이벤트 소스 이름</param>
            <param name="level">로그 메시지 레벨</param>
            <param name="format">메시지 포맷</param>
            <param name="args">가변 매개변수</param>
            <remarks>
            이벤트 ID의 기본값과 카테고리의 기본값은 0 이 사용된다.
            지정된 로그 메시지 레벨이 <see cref="P:TheOne.Diagnostics.EventLogHelper.BaseLogLevel"/> 보다 낮은 경우, 메시지는 필터링 된다.
            정적 Write 메서드는 간단히 한 번의 로그 메시지를 남기고자 할 때
            <see cref="T:TheOne.Diagnostics.EventLogHelper"/>의 인스턴스를 생성할 필요 없이 사용가능하므로 사용이 용이하다.
            이벤트 로그는 Application, System 등의 로그가 아닌 configuration 파일의 eventLog 특성에 
            설정된 값을 사용해서 기록되며 configuration 파일이 정의되지 않은 경우에는 "TheOne" 로그에 기록된다.
            </remarks>
            <example>
            <code>
            EventLogHelper.Write("mySourceName", "Message");			// use default log level(information)
            EventLogHelper.Write("mySourceName", LogLevel.Error, "Message {0}", DateTime.Now);		// 'Error' log message
            EventLogHelper.Write("mySourceName", LogLevel.Inforamtion, 1001, "Using event ID 1001");
            EventLogHelper.Write("mySourceName", LogLevel.Information, 1001, 1, "Using event ID, category ID..");
            </code>
            </example>
        </member>
        <member name="M:TheOne.Diagnostics.EventLogHelper.Write(System.String,TheOne.Diagnostics.LogLevel,System.Int32,System.String,System.Object[])">
            <summary>
            지정된 이벤트 소스 이름으로 이벤트 로그에 메시지를 기록한다.
            </summary>
            <param name="source">이벤트 소스 이름</param>
            <param name="level">로그 메시지 레벨</param>
            <param name="eventID">이벤트 ID</param>
            <param name="format">메시지 포맷</param>
            <param name="args">가변 매개변수</param>
            <remarks>
            이벤트 카테고리의 기본값은 0 이 사용된다.
            지정된 로그 메시지 레벨이 <see cref="P:TheOne.Diagnostics.EventLogHelper.BaseLogLevel"/> 보다 낮은 경우, 메시지는 필터링 된다.
            정적 Write 메서드는 간단히 한 번의 로그 메시지를 남기고자 할 때
            <see cref="T:TheOne.Diagnostics.EventLogHelper"/>의 인스턴스를 생성할 필요 없이 사용가능하므로 사용이 용이하다.
            이벤트 로그는 Application, System 등의 로그가 아닌 configuration 파일의 eventLog 특성에 
            설정된 값을 사용해서 기록되며 configuration 파일이 정의되지 않은 경우에는 "TheOne" 로그에 기록된다.
            </remarks>
            <example>
            <code>
            EventLogHelper.Write("mySourceName", "Message");			// use default log level(information)
            EventLogHelper.Write("mySourceName", LogLevel.Error, "Message {0}", DateTime.Now);		// 'Error' log message
            EventLogHelper.Write("mySourceName", LogLevel.Inforamtion, 1001, "Using event ID 1001");
            EventLogHelper.Write("mySourceName", LogLevel.Information, 1001, 1, "Using event ID, category ID..");
            </code>
            </example>
        </member>
        <member name="M:TheOne.Diagnostics.EventLogHelper.Write(System.String,TheOne.Diagnostics.LogLevel,System.Int32,System.Int16,System.String,System.Object[])">
            <summary>
            지정된 이벤트 소스 이름으로 이벤트 로그에 메시지를 기록한다.
            </summary>
            <param name="source">이벤트 소스 이름</param>
            <param name="level">로그 메시지 레벨</param>
            <param name="eventID">이벤트 ID</param>
            <param name="category">카테고리 ID</param>
            <param name="format">메시지 포맷</param>
            <param name="args">가변 매개변수</param>
            <remarks>
            지정된 로그 메시지 레벨이 <see cref="P:TheOne.Diagnostics.EventLogHelper.BaseLogLevel"/> 보다 낮은 경우, 메시지는 필터링 된다.
            정적 Write 메서드는 간단히 한 번의 로그 메시지를 남기고자 할 때
            <see cref="T:TheOne.Diagnostics.EventLogHelper"/>의 인스턴스를 생성할 필요 없이 사용가능하므로 사용이 용이하다.
            이벤트 로그는 Application, System 등의 로그가 아닌 configuration 파일의 eventLog 특성에 
            설정된 값을 사용해서 기록되며 configuration 파일이 정의되지 않은 경우에는 "TheOne" 로그에 기록된다.
            </remarks>
            <example>
            <code>
            EventLogHelper.Write("mySourceName", "Message");			// use default log level(information)
            EventLogHelper.Write("mySourceName", LogLevel.Error, "Message {0}", DateTime.Now);		// 'Error' log message
            EventLogHelper.Write("mySourceName", LogLevel.Inforamtion, 1001, "Using event ID 1001");
            EventLogHelper.Write("mySourceName", LogLevel.Information, 1001, 1, "Using event ID, category ID..");
            </code>
            </example>
        </member>
        <member name="M:TheOne.Diagnostics.EventLogHelper.Write(System.String,TheOne.Diagnostics.LogLevel,System.Int32,System.Int16,System.Byte[],System.String,System.Object[])">
            <summary>
            지정된 이벤트 소스 이름으로 이벤트 로그에 메시지를 기록한다.
            </summary>
            <param name="source">이벤트 소스 이름</param>
            <param name="level">로그 메시지 레벨</param>
            <param name="eventID">이벤트 ID</param>
            <param name="category">카테고리 ID</param>
            <param name="rawData">이벤트 raw 데이터</param>
            <param name="format">메시지 포맷</param>
            <param name="args">가변 매개변수</param>
            <remarks>
            지정된 로그 메시지 레벨이 <see cref="P:TheOne.Diagnostics.EventLogHelper.BaseLogLevel"/> 보다 낮은 경우, 메시지는 필터링 된다.
            정적 Write 메서드는 간단히 한 번의 로그 메시지를 남기고자 할 때
            <see cref="T:TheOne.Diagnostics.EventLogHelper"/>의 인스턴스를 생성할 필요 없이 사용가능하므로 사용이 용이하다.
            이벤트 로그는 Application, System 등의 로그가 아닌 configuration 파일의 eventLog 특성에 
            설정된 값을 사용해서 기록되며 configuration 파일이 정의되지 않은 경우에는 "TheOne" 로그에 기록된다.
            </remarks>
            <example>
            <code>
            EventLogHelper.Write("mySourceName", "Message");			// use default log level(information)
            EventLogHelper.Write("mySourceName", LogLevel.Error, "Message {0}", DateTime.Now);		// 'Error' log message
            EventLogHelper.Write("mySourceName", LogLevel.Inforamtion, 1001, "Using event ID 1001");
            EventLogHelper.Write("mySourceName", LogLevel.Information, 1001, 1, "Using event ID, category ID..");
            
            IPAddress ip = GetPeerIPAddress();   // call user-defined method for get IP
            byte[] rawData = ip.GetAddressBytes();
            EventLogHelper.Write("mySourceName", LogLevel.Information, 1001, 1, rawData, "Connect from peer: {0}", ip.ToString());
            </code>
            </example>
        </member>
        <member name="M:TheOne.Diagnostics.EventLogHelper.ExceptionWrite(System.String)">
            <summary>
             "Application" 이벤트 로그에 "TheOneFramework" 이벤트 소스명으로 예외 정보를 기록한다.
            </summary>
            <param name="message">오류를 설명하는 메시지</param>
            <remarks>
            NeoDEEX 프레임워크 내부에서 사용된다.
            </remarks>
        </member>
        <member name="M:TheOne.Diagnostics.EventLogHelper.ExceptionWrite(System.String,TheOne.Diagnostics.LogLevel)">
            <summary>
            "Application" 이벤트 로그에 "TheOneFramework" 이벤트 소스명으로 예외 정보를 기록한다.
            </summary>
            <param name="message">오류를 설명하는 메시지</param>
            <param name="level">로그 레벨</param>
            <remarks>
            NeoDEEX 프레임워크 내부에서 사용된다.
            </remarks>
        </member>
        <member name="M:TheOne.Diagnostics.EventLogHelper.WriteIf(System.Boolean,System.String,System.Object[])">
            <summary>
            지정된 조건식이 <b>true</b> 이면 기본값으로 정의된 이벤트 소스 이름으로 이벤트 로그에 메시지를 기록한다.
            </summary>
            <param name="expr">조건식</param>
            <param name="format">메시지 포맷</param>
            <param name="args">가변 매개변수</param>
            <remarks>
            메시지 레벨은 정적속성인 DefautLogLevel 의 값이 사용되며
            이벤트 ID의 기본값과 카테고리의 기본값은 0 이 사용된다.
            지정된 로그 메시지 레벨이 BaseLogLevel 보다 낮은 경우, 메시지는 필터링 된다.
            정적 Write 메서드는 간단히 한 번의 로그 메시지를 남기고자 할 때
            <see cref="T:TheOne.Diagnostics.EventLogHelper"/>의 인스턴스를 생성할 필요 없이 사용가능하므로 사용이 용이하다.
            이벤트 로그는 Application, System 등의 로그가 아닌 configuration 파일의 eventLog 특성에 
            설정된 값을 사용해서 기록되며 configuration 파일이 정의되지 않은 경우에는 "TheOne" 로그에 기록된다.
            이벤트 소스는 configuration 파일의 defaultEventSource 값을 사용하고 configuration 파일이 
            정의되지 않은 경우에는 "TheOneLog" 값을 사용한다.
            </remarks>
            <example>
            <code>
            EventLogHelper.WriteIf(successFlag, "Process done successfully");
            </code>
            </example>
        </member>
        <member name="M:TheOne.Diagnostics.EventLogHelper.WriteIf(System.Boolean,TheOne.Diagnostics.LogLevel,System.String,System.Object[])">
            <summary>
            지정된 조건식이 <b>true</b> 이면 기본값으로 정의된 이벤트 소스 이름으로 이벤트 로그에 메시지를 기록한다.
            </summary>
            <param name="expr">조건식</param>
            <param name="level">로그 메시지 레벨</param>
            <param name="format">메시지 포맷</param>
            <param name="args">가변 매개변수</param>
            <remarks>
            이벤트ID의 기본값과 카테고리의 기본값은 0 이 사용된다.
            지정된 로그 메시지 레벨이 <see cref="P:TheOne.Diagnostics.EventLogHelper.BaseLogLevel"/> 보다 낮은 경우, 메시지는 필터링 된다.
            정적 Write 메서드는 간단히 한 번의 로그 메시지를 남기고자 할 때
            <see cref="T:TheOne.Diagnostics.EventLogHelper"/>의 인스턴스를 생성할 필요 없이 사용가능하므로 사용이 용이하다.
            이벤트 로그는 Application, System 등의 로그가 아닌 configuration 파일의 eventLog 특성에 
            설정된 값을 사용해서 기록되며 configuration 파일이 정의되지 않은 경우에는 "TheOne" 로그에 기록된다.
            이벤트 소스는 configuration 파일의 defaultEventSource 값을 사용하고 configuration 파일이 
            정의되지 않은 경우에는 "TheOneLog" 값을 사용한다.
            </remarks>
            <example>
            <code>
            EventLogHelper.WriteIf(!successFlag, LogLevel.Error, "Processing Error !");
            </code>
            </example>
        </member>
        <member name="M:TheOne.Diagnostics.EventLogHelper.WriteIf(System.Boolean,TheOne.Diagnostics.LogLevel,System.Int32,System.String,System.Object[])">
            <summary>
            지정된 조건식이 <b>true</b> 이면 기본값으로 정의된 이벤트 소스 이름으로 이벤트 로그에 메시지를 기록한다.
            </summary>
            <param name="expr">조건식</param>
            <param name="level">로그 메시지 레벨</param>
            <param name="eventID">이벤트 ID</param>
            <param name="format">메시지 포맷</param>
            <param name="args">가변 매개변수</param>
            <remarks>
            이벤트 카테고리의 기본값은 0 이 사용된다.
            지정된 로그 메시지 레벨이 <see cref="P:TheOne.Diagnostics.EventLogHelper.BaseLogLevel"/> 보다 낮은 경우, 메시지는 필터링 된다.
            정적 Write 메서드는 간단히 한 번의 로그 메시지를 남기고자 할 때
            <see cref="T:TheOne.Diagnostics.EventLogHelper"/>의 인스턴스를 생성할 필요 없이 사용가능하므로 사용이 용이하다.
            이벤트 로그는 Application, System 등의 로그가 아닌 configuration 파일의 eventLog 특성에 
            설정된 값을 사용해서 기록되며 configuration 파일이 정의되지 않은 경우에는 "TheOne" 로그에 기록된다.
            이벤트 소스는 configuration 파일의 defaultEventSource 값을 사용하고 configuration 파일이 
            정의되지 않은 경우에는 "TheOneLog" 값을 사용한다.
            </remarks>
            <example>
            <code>
            EventLogHelper.WriteIf(!successFlag, LogLevel.Error, 1001, "Processing Error !");
            </code>
            </example>
        </member>
        <member name="M:TheOne.Diagnostics.EventLogHelper.WriteIf(System.Boolean,TheOne.Diagnostics.LogLevel,System.Int32,System.Int16,System.String,System.Object[])">
            <summary>
            지정된 조건식이 <b>true</b> 이면 기본값으로 정의된 이벤트 소스 이름으로 이벤트 로그에 메시지를 기록한다.
            </summary>
            <param name="expr">조건식</param>
            <param name="level">로그 메시지 레벨</param>
            <param name="eventID">이벤트 ID</param>
            <param name="category">카테고리 ID</param>
            <param name="format">메시지 포맷</param>
            <param name="args">가변 매개변수</param>
            <remarks>
            지정된 로그 메시지 레벨이 <see cref="P:TheOne.Diagnostics.EventLogHelper.BaseLogLevel"/> 보다 낮은 경우, 메시지는 필터링 된다.
            정적 Write 메서드는 간단히 한 번의 로그 메시지를 남기고자 할 때
            <see cref="T:TheOne.Diagnostics.EventLogHelper"/>의 인스턴스를 생성할 필요 없이 사용가능하므로 사용이 용이하다.
            이벤트 로그는 Application, System 등의 로그가 아닌 configuration 파일의 eventLog 특성에 
            설정된 값을 사용해서 기록되며 configuration 파일이 정의되지 않은 경우에는 "TheOne" 로그에 기록된다.
            이벤트 소스는 configuration 파일의 defaultEventSource 값을 사용하고 configuration 파일이 
            정의되지 않은 경우에는 "TheOneLog" 값을 사용한다.
            </remarks>
            <example>
            <code>
            EventLogHelper.WriteIf(!successFlag, LogLevel.Error, 1001, 1, "Processing Error !");
            </code>
            </example>
        </member>
        <member name="M:TheOne.Diagnostics.EventLogHelper.WriteIf(System.Boolean,TheOne.Diagnostics.LogLevel,System.Int32,System.Int16,System.Byte[],System.String,System.Object[])">
            <summary>
            지정된 조건식이 <b>true</b> 이면 기본값으로 정의된 이벤트 소스 이름으로 이벤트 로그에 메시지를 기록한다.
            </summary>
            <param name="expr">조건식</param>
            <param name="level">로그 메시지 레벨</param>
            <param name="eventID">이벤트 ID</param>
            <param name="category">카테고리 ID</param>
            <param name="rawData">이벤트 raw 데이터</param>
            <param name="format">메시지 포맷</param>
            <param name="args">가변 매개변수</param>
            <remarks>
            지정된 로그 메시지 레벨이 <see cref="P:TheOne.Diagnostics.EventLogHelper.BaseLogLevel"/> 보다 낮은 경우, 메시지는 필터링 된다.
            정적 Write 메서드는 간단히 한 번의 로그 메시지를 남기고자 할 때
            <see cref="T:TheOne.Diagnostics.EventLogHelper"/>의 인스턴스를 생성할 필요 없이 사용가능하므로 사용이 용이하다.
            이벤트 로그는 Application, System 등의 로그가 아닌 configuration 파일의 eventLog 특성에 
            설정된 값을 사용해서 기록되며 configuration 파일이 정의되지 않은 경우에는 "TheOne" 로그에 기록된다.
            이벤트 소스는 configuration 파일의 defaultEventSource 값을 사용하고 configuration 파일이 
            정의되지 않은 경우에는 "TheOneLog" 값을 사용한다.
            </remarks>
            <example>
            <code>
            IPAddress ip = GetPeerIPAddress();   // call user-defined method for get IP
            byte[] rawData = ip.GetAddressBytes();
            EventLogHelper.WriteIf(!successFlag, LogLevel.Error, 1001, 1, rawData, "Connection Error!");
            EventLogHelper.WriteIf(successFlag, LogLevel.Information, 1001, 1, rawData, "Connection peer : {0} ", ip);
            </code>
            </example>
        </member>
        <member name="M:TheOne.Diagnostics.EventLogHelper.WriteIf(System.Boolean,System.String,TheOne.Diagnostics.LogLevel,System.String,System.Object[])">
            <summary>
            지정된 조건식이 <b>true</b> 이면 지정된 이벤트 소스 이름으로 이벤트 로그에 메시지를 기록한다.
            </summary>
            <param name="expr">조건식</param>
            <param name="source">이벤트 소스 이름</param>
            <param name="level">로그 메시지 레벨</param>
            <param name="format">메시지 포맷</param>
            <param name="args">가변 매개변수</param>
            <remarks>
            이벤트 ID의 기본값과 카테고리의 기본값은 0 이 사용된다.
            지정된 로그 메시지 레벨이 <see cref="P:TheOne.Diagnostics.EventLogHelper.BaseLogLevel"/> 보다 낮은 경우, 메시지는 필터링 된다.
            정적 Write 메서드는 간단히 한 번의 로그 메시지를 남기고자 할 때
            <see cref="T:TheOne.Diagnostics.EventLogHelper"/>의 인스턴스를 생성할 필요 없이 사용가능하므로 사용이 용이하다.
            이벤트 로그는 Application, System 등의 로그가 아닌 configuration 파일의 eventLog 특성에 
            설정된 값을 사용해서 기록되며 configuration 파일이 정의되지 않은 경우에는 "TheOne" 로그에 기록된다.
            </remarks>
            <example>
            <code>
            EventLogHelper.WriteIf(!successFlag, "myEventSource", LogLevel.Error, "Processing Error !");
            </code>
            </example>
        </member>
        <member name="M:TheOne.Diagnostics.EventLogHelper.WriteIf(System.Boolean,System.String,TheOne.Diagnostics.LogLevel,System.Int32,System.String,System.Object[])">
            <summary>
            지정된 조건식이 <b>true</b> 이면 지정된 이벤트 소스 이름으로 이벤트 로그에 메시지를 기록한다.
            </summary>
            <param name="expr">조건식</param>
            <param name="source">이벤트 소스 이름</param>
            <param name="level">로그 메시지 레벨</param>
            <param name="eventID">이벤트 ID</param>
            <param name="format">메시지 포맷</param>
            <param name="args">가변 매개변수</param>
            <remarks>
            이벤트 카테고리의 기본값은 0 이 사용된다.
            지정된 로그 메시지 레벨이 <see cref="P:TheOne.Diagnostics.EventLogHelper.BaseLogLevel"/> 보다 낮은 경우, 메시지는 필터링 된다.
            정적 Write 메서드는 간단히 한 번의 로그 메시지를 남기고자 할 때
            <see cref="T:TheOne.Diagnostics.EventLogHelper"/>의 인스턴스를 생성할 필요 없이 사용가능하므로 사용이 용이하다.
            이벤트 로그는 Application, System 등의 로그가 아닌 configuration 파일의 eventLog 특성에 
            설정된 값을 사용해서 기록되며 configuration 파일이 정의되지 않은 경우에는 "TheOne" 로그에 기록된다.
            </remarks>
            <example>
            <code>
            EventLogHelper.WriteIf(!successFlag, "myEventSource", LogLevel.Error, "Processing Error !");
            </code>
            </example>
        </member>
        <member name="M:TheOne.Diagnostics.EventLogHelper.WriteIf(System.Boolean,System.String,TheOne.Diagnostics.LogLevel,System.Int32,System.Int16,System.String,System.Object[])">
            <summary>
            지정된 조건식이 <b>true</b> 이면 지정된 이벤트 소스 이름으로 이벤트 로그에 메시지를 기록한다.
            </summary>
            <param name="expr">조건식</param>
            <param name="source">이벤트 소스 이름</param>
            <param name="level">로그 메시지 레벨</param>
            <param name="eventID">이벤트 ID</param>
            <param name="category">카테고리 ID</param>
            <param name="format">메시지 포맷</param>
            <param name="args">가변 매개변수</param>
            <remarks>
            지정된 로그 메시지 레벨이 <see cref="P:TheOne.Diagnostics.EventLogHelper.BaseLogLevel"/> 보다 낮은 경우, 메시지는 필터링 된다.
            정적 Write 메서드는 간단히 한 번의 로그 메시지를 남기고자 할 때
            <see cref="T:TheOne.Diagnostics.EventLogHelper"/>의 인스턴스를 생성할 필요 없이 사용가능하므로 사용이 용이하다.
            이벤트 로그는 Application, System 등의 로그가 아닌 configuration 파일의 eventLog 특성에 
            설정된 값을 사용해서 기록되며 configuration 파일이 정의되지 않은 경우에는 "TheOne" 로그에 기록된다.
            </remarks>
            <example>
            <code>
            EventLogHelper.WriteIf(!successFlag, "myEventSource", LogLevel.Error, "Processing Error !");
            </code>
            </example>
        </member>
        <member name="M:TheOne.Diagnostics.EventLogHelper.WriteIf(System.Boolean,System.String,TheOne.Diagnostics.LogLevel,System.Int32,System.Int16,System.Byte[],System.String,System.Object[])">
            <summary>
            지정된 조건식이 <b>true</b> 이면 지정된 이벤트 소스 이름으로 이벤트 로그에 메시지를 기록한다.
            </summary>
            <param name="expr">조건식</param>
            <param name="source">이벤트 소스 이름</param>
            <param name="level">로그 메시지 레벨</param>
            <param name="eventID">이벤트 ID</param>
            <param name="category">카테고리 ID</param>
            <param name="rawData">이벤트 raw 데이터</param>
            <param name="format">메시지 포맷</param>
            <param name="args">가변 매개변수</param>
            <remarks>
            지정된 로그 메시지 레벨이 <see cref="P:TheOne.Diagnostics.EventLogHelper.BaseLogLevel"/> 보다 낮은 경우, 메시지는 필터링 된다.
            정적 Write 메서드는 간단히 한 번의 로그 메시지를 남기고자 할 때
            <see cref="T:TheOne.Diagnostics.EventLogHelper"/>의 인스턴스를 생성할 필요 없이 사용가능하므로 사용이 용이하다.
            이벤트 로그는 Application, System 등의 로그가 아닌 configuration 파일의 eventLog 특성에 
            설정된 값을 사용해서 기록되며 configuration 파일이 정의되지 않은 경우에는 "TheOne" 로그에 기록된다.
            </remarks>
            <example>
            <code>
            IPAddress ip = GetPeerIPAddress();   // call user-defined method for get IP
            byte[] rawData = ip.GetAddressBytes();
            EventLogHelper.WriteIf(!successFlag, "myEventSource", LogLevel.Error, 1001, 1, rawData, "Connection Error!");
            EventLogHelper.WriteIf(successFlag, "myEventSource", LogLevel.Information, 1001, 1, rawData, "Connection peer : ", ip);
            </code>
            </example>
        </member>
        <member name="M:TheOne.Diagnostics.EventLogHelper.ToEventLogEntryType(TheOne.Diagnostics.LogLevel)">
            <summary>
            LogLevel을 EventLogEntryType으로 매핑한다.
            </summary>
            <param name="level"><see cref="T:TheOne.Diagnostics.LogLevel"/> 객체</param>
            <returns><see cref="T:System.Diagnostics.EventLogEntryType"/> 객체를 반환한다.</returns>
        </member>
        <member name="P:TheOne.Diagnostics.EventLogHelper.DefaultLogLevel">
            <summary>
            <see cref="T:TheOne.Diagnostics.EventLogHelper"/> 클래스의 인스턴스나 정적 Write 메서드에서 사용하는 로그 레벨 기본값을 가져오거나 설정한다.
            </summary>
            <remarks>
            <see cref="T:TheOne.Diagnostics.EventLogHelper"/> 인스턴스를 생성하거나 정적 Write 메서드를 호출 할 때 명시적으로
            <see cref="T:TheOne.Diagnostics.LogLevel"/>이 주어지지 않으면 이 속성의 값(기본값은 <see cref="F:TheOne.Diagnostics.LogLevel.Information"/>이다.)이 사용된다.
            </remarks>
            <example>
            <code>
            EventLogHelper.Write("eventSource", "Message");			// DefaultLogLevel 프로퍼티 값 사용
            EventLogHelper.Write("eventSource", LogLevel.Warnning,	// DefaultLogLevel 값 오버라이드
            				"Warnning Message");
            </code>
            </example>
        </member>
        <member name="P:TheOne.Diagnostics.EventLogHelper.BaseLogLevel">
            <summary>
            이벤트 로그 메시지의 필터링을 위해 사용되는 베이스 로그 레벨을 가져온다.
            </summary>
            <remarks>
            베이스 로그 레벨 즉, BaseLogLevel 속성의 로그 레벨보다 낮은 메시지는 이벤트 로그에 기록되지 않는다. 
            BaseLogLevel 속성의 값은
            <see cref="P:TheOne.Diagnostics.EventLogHelper.BaseLogLevel"/>속성의 값은 configuration 파일의 baseLogLevel 특성에 설정된 값을 사용하며
            configuration 파일이 정의되지 않은 경우 기본값은 <b>Information</b> 이다
            </remarks>
            <example>
            <code>
            // configuration file like this
            &lt;?xml version="1.0" encoding="utf-8"?&gt;
            &lt;theone.configuration&gt;
            	&lt;LogSettings&gt;
            		&lt;FileLog enabled="true" baseLogLevel="Information" logDirectory="C:\Temp" defaultPrefix="SmartOne" /&gt;
            		&lt;EventLog enabled="true" baseLogLevel="Warnning" eventLog="TheOne" defaultEventSource="Framework" /&gt;
            	&lt;/LogSettings&gt;
            &lt;/theone.configuration&gt;
            
            // code
            EventLogHelper.Write("Message");						// filtered - default log level is Inforamtion
            EventLogHelper.Write(LogLevel.Error, "message");		// not filtered
            </code>
            </example>
        </member>
        <member name="P:TheOne.Diagnostics.EventLogHelper.DefaultSourceName">
            <summary>
            이벤트 소스 이름이 명시적으로 주어지지 않을 때 사용되는 이벤스 소스 이름을 가져온다.
            </summary>
            <remarks>
            이벤트 소스 이름이 명시적으로 주어지지 않을 때 <see cref="P:TheOne.Diagnostics.EventLogHelper.DefaultSourceName"/>속성의 값은 
            configuration 파일의 defaultEventSource 특성에 
            설정된 값을 사용하며 configuration 파일이 정의되지 않은 경우 기본값은 "TheOneLog" 이다.
            </remarks>
            <example>
            <code>
            EventLogHelper.Write("Message");		// DefaultSourceName 프로퍼티의 값을 이벤트 소스 이름으로 사용
            </code>
            </example>
        </member>
        <member name="P:TheOne.Diagnostics.EventLogHelper.EventLogName">
            <summary>
            이벤트 로그가 기록될 이벤트 로그 이름을 가져온다.
            </summary>
            <remarks>
            Windows NT 이상에서 제공되는 이벤트 로그는 이벤트 로그 파일에 각각 기록된다.
            기본으로 제공되는 이벤트 로그는 Application, Security, System의 세가지가 있다.
            <see cref="T:TheOne.Diagnostics.EventLogHelper"/> 클래스는 추가적으로 어플리케이션 시스템 레벨의 이벤트 로그 파일에
            이벤트 로그가 기록되게 된다. 이는 EventLog Viewer에서 Windows가 제공하는 세가지
            이벤트 로그 외에 추가적인 항목이 나타나게 됨을 의미한다.
            이를 통해 보다 독립적인 이벤트 로깅 기능을 구축할 수 있다.
            <see cref="P:TheOne.Diagnostics.EventLogHelper.EventLogName"/>속성의 값은 configuration 파일의 eventLog 특성에 
            설정된 값을 사용하며 configuration 파일이 정의되지 않은 경우 기본값은 "TheOne" 이다.
            </remarks>
        </member>
        <member name="T:TheOne.Diagnostics.Configuration.LogSetting">
            <summary>
            로그 정보 클래스들이 공통으로 가져야 하는 속성을 정의하는 기본 클래스를 정의한다.<br/>
            NeoDEEX 프레임워크 인프라를 지원하며 코드에서는 직접 사용할 수 없다.
            </summary>
        </member>
        <member name="M:TheOne.Diagnostics.Configuration.LogSetting.#ctor">
            <summary>
            <see cref="T:TheOne.Diagnostics.Configuration.LogSetting"/> 클래스의 새 인스턴스를 초기화한다.
            </summary>
        </member>
        <member name="M:TheOne.Diagnostics.Configuration.LogSetting.#ctor(System.Boolean,TheOne.Diagnostics.LogLevel)">
            <summary>
            로그 활성화 여부와 최소 로그 레벨을 사용하여 <see cref="T:TheOne.Diagnostics.Configuration.LogSetting"/> 클래스의 새 인스턴스를 초기화한다.
            </summary>
            <param name="enabled">로그 활성화 여부</param>
            <param name="baseLogLevel">최소 로그 레벨</param>
        </member>
        <member name="P:TheOne.Diagnostics.Configuration.LogSetting.Enabled">
            <summary>
            로그 활성화 여부를 가져오거나 설정하며 기본값은 <b>true</b> 이다.
            </summary>
        </member>
        <member name="P:TheOne.Diagnostics.Configuration.LogSetting.BaseLogLevel">
            <summary>
            최소 로그 레벨을 가져온다. 기본값은 <see cref="F:TheOne.Diagnostics.LogLevel.Verbose"/> 이다.
            </summary>
            <remarks>
            BaseLogLevel 보다 심각도가 높은 로그만 기록한다.
            </remarks>
        </member>
        <member name="T:TheOne.Configuration.NamedList`1">
            <summary>
            인덱스 및 이름으로 데이터를 접근할 수 있는 컬렉션 클래스이다. <br/>
            NeoDEEX 프레임워크 인프라를 지원하며 코드에서는 직접 사용할 수 없다.
            </summary>
            <typeparam name="TItem">컬렉션에 포함되는 데이터 항목의 형식.</typeparam>
        </member>
        <member name="M:TheOne.Configuration.NamedList`1.GetKeyForItem(`0)">
            <summary>
            지정된 요소(TItem)에서 키를 추출한다.
            </summary>
            <param name="item">키를 추출할 요소(TItem)</param>
            <returns>지정된 요소(TItem)의 키를 반환한다.</returns>
        </member>
        <member name="P:TheOne.Configuration.NamedList`1.Item(System.String)">
            <summary>
            컬렉션에서 지정된 키를 가진 요소(TItem)를 가져온다.
            </summary>
            <param name="key">가져올 요소(TItem)의 키</param>
            <returns>지정된 키의 요소(TItem)을 반환한다.</returns>
            <remarks>
             지정된 키를 가진 요소(TItem)가 없는 경우 null을 반환한다.
            </remarks>
        </member>
        <member name="T:TheOne.Configuration.NamedItem">
            <summary>
            <see cref="T:TheOne.Configuration.NamedItemInterface"/>를 상속받아 구현한 클래스이다.
            </summary>
        </member>
        <member name="M:TheOne.Configuration.NamedItem.#ctor">
            <summary>
            <see cref="T:TheOne.Configuration.NamedItem"/> 클래스의 새 인스턴스를 초기화한다.
            </summary>
        </member>
        <member name="M:TheOne.Configuration.NamedItem.#ctor(System.String,System.String)">
            <summary>
            지정된 이름과 문자열 값을 사용하여 <see cref="T:TheOne.Configuration.NamedItem"/> 클래스의 새 인스턴스를 초기화한다.
            </summary>
            <param name="name">이름</param>
            <param name="value">문자열 값</param>
        </member>
        <member name="P:TheOne.Configuration.NamedItem.Name">
            <summary>
            이름을 가져오거나 설정한다.
            </summary>
        </member>
        <member name="P:TheOne.Configuration.NamedItem.Value">
            <summary>
            문자열 값을 가져오거나 설정한다.
            </summary>
        </member>
        <member name="T:TheOne.Configuration.ConfigurationChangedEventHandler">
            <summary> 파일 변경 전 처리를 위한 대리자입니다.</summary>
        </member>
        <member name="T:TheOne.Configuration.ConfigurationChangingEventHandler">
            <summary> 파일 변경 후 처리를 위한 대리자입니다.</summary>
        </member>
        <member name="M:TheOne.Configuration.ConfigurationFileWatcher.StartWatching">
            <summary>
            Configuration 파일에 대한 감시를 시작한다.
            </summary>
        </member>
        <member name="M:TheOne.Configuration.ConfigurationFileWatcher.watcher_Changed(System.Object,System.IO.FileSystemEventArgs)">
            <summary>
            Configuration 파일 변경 이벤트를 발생한다.
            </summary>
        </member>
        <member name="M:TheOne.Configuration.ConfigurationFileWatcher.CallConfigurationChanged(System.Object)">
            <summary>
             Configuration 파일 변경시 여러번 발생하는 이벤트를 한번만 처리하기 위한 타이머 핸들러이다.
            </summary>
        </member>
        <member name="M:TheOne.Configuration.ConfigurationFileWatcher.StopWatching">
            <summary>
            Configuration 파일에 대한 감시를 종료한다. 
            </summary>
        </member>
        <member name="M:TheOne.Configuration.ConfigurationFileWatcher.OnConfigurationChanged(System.String)">
            <summary>
            Configuration 파일이 변경되면 이벤트를 발생한다.
            </summary>
        </member>
        <member name="T:TheOne.Text.Configuration.ParameterSetting">
            <summary>
            메세지 공급자에에 전달되는 매개변수의 이름과 값을 저장하는 클래스이다.
            </summary>
        </member>
        <member name="T:TheOne.Security.SecurityHelper">
            <summary>
            원격지에서 보안 정보를 가져오기 위하여 다양한 Helper 메서드를 제공한다.
            </summary>
        </member>
        <member name="F:TheOne.Security.SecurityHelper.CmdUserInfo">
            <summary>
            SecurityResolve 웹 페이지에 호출을 하여 <see cref="T:TheOne.Security.UserInfoContext"/> 정보를 가져오는 커맨드 상수를 정의한다. 
            </summary>	
        </member>
        <member name="F:TheOne.Security.SecurityHelper.CmdAuthMenuList">
            <summary>
            SecurityResolve 웹 페이지에 호출을 하여 메뉴 권한 정보를 가져오는 커맨드 상수를 정의한다. 
            </summary>
        </member>
        <member name="F:TheOne.Security.SecurityHelper.CmdBoth">
            <summary>
            SecurityResolve 웹 페이지에 호출을 하여 <see cref="T:TheOne.Security.UserInfoContext"/> 정보 및 메뉴 권한 정보를 가져오는 커맨드 상수를 정의한다. 
            </summary>
        </member>
        <member name="F:TheOne.Security.SecurityHelper.CmdButtonSecurityInfo">
            <summary>
            SecurityResolve 웹 페이지에 호출을 하여 화면별 버튼 권한 정보를 가져오는 커맨드 상수를 정의한다. 
            </summary>
        </member>
        <member name="M:TheOne.Security.SecurityHelper.#cctor">
            <summary>
            <see cref="T:TheOne.Security.SecurityHelper"/> 정적 클래스의 새 인스턴스를 초기화한다.
            </summary>
        </member>
        <member name="M:TheOne.Security.SecurityHelper.SerializeAuthInfoToString(TheOne.Security.UserInfoContext)">
            <summary>
            <see cref="T:TheOne.Security.UserInfoContext"/> 객체를 문자열로 serialize 한다.
            </summary>
            <param name="ctx">serialize 대상이 되는 <see cref="T:TheOne.Security.UserInfoContext"/>객체</param>
            <returns>serialize 된 문자열을 문자열을 반환한다.</returns>
        </member>
        <member name="M:TheOne.Security.SecurityHelper.DeserializeAuthInfoFromString(System.String)">
            <summary>
            문자열로부터 <see cref="T:TheOne.Security.UserInfoContext"/> 객체를 dserialize 한다.
            </summary>
            <param name="authInfoString">deserialize 대상이 되는 문자열</param>
            <returns>deserialize 된 <see cref="T:TheOne.Security.UserInfoContext"/> 객체 또는 그 파생 클래스의 객체를 반환한다.</returns>
        </member>
        <member name="M:TheOne.Security.SecurityHelper.GetUserInfoContextString(System.String,System.String)">
            <summary>
            지정된 시스템의 사용자정보(<see cref="T:TheOne.Security.UserInfoContext"/>객체)의 문자열 데이터를 웹 페이지를 호출하여
            가져온다.
            </summary>
            <param name="userid">사용자 ID</param>
            <param name="sysID">사용자정보를 얻고자 하는 시스템 ID</param>
            <returns><see cref="T:TheOne.Security.UserInfoContext"/> 가 serialize 되고 base64로 인코딩된 문자열을 반환한다.</returns>
        </member>
        <member name="M:TheOne.Security.SecurityHelper.GetAuthMenuListString(System.String,System.String)">
            <summary>
            지정된 시스템의 사용자가 갖는 메뉴 권한 목록 문자열을 웹 페이지를 호출하여 가져온다.
            </summary>
            <param name="userid">사용자 ID</param>
            <param name="sysID">메뉴 권한 문자열을 얻고자하는 시스템 ID</param>
            <returns>권한이 있는 메뉴 ID들의 목록 문자열(콜론으로 구분)을 가져온다.</returns>
        </member>
        <member name="M:TheOne.Security.SecurityHelper.GetMenuSecurityInfoString(System.String,System.String)">
            <summary>
            주어진 사용자가 주어진 시스템에 대한 사용자 정보(<see cref="T:TheOne.Security.UserInfoContext"/>객체) 문자열과 메뉴 권한 문자열을
            웹 페이지를 호출하여 가져온다.
            </summary>
            <param name="userid">사용자 ID</param>
            <param name="sysID">정보를 얻고자 하는 시스템 ID</param>
            <returns>사용자 정보 문자열과 메뉴 권한 문자열을 담는 문자열 배열(인덱스 0: 사용자 정보, 인덱스 1: 메뉴 권한 문자열)을 반환한다.</returns>
        </member>
        <member name="M:TheOne.Security.SecurityHelper.GetButtonSecurityInfoString(System.String,System.String,System.String)">
            <summary>
            지정된 사용자, 메뉴 ID에 대한 버튼 권한을 반환한다. 
            </summary>
            <param name="userid">사용자 ID</param>
            <param name="menuid">메뉴 ID</param>
            <param name="sysID">시스템 ID</param>
            <returns>버튼 권한 정보에 대한 문자열 배열을 반환한다.</returns>
        </member>
        <member name="M:TheOne.Security.SecurityHelper.ConvertInt32StringToBitArray(System.String)">
            <summary>
            문자열 정수를 <see cref="T:System.Collections.BitArray"/> 객체로 변환한다.
            </summary>
            <param name="data">정수의 문자열 표현</param>
            <returns><see cref="T:System.Collections.BitArray"/> 객체를 반환한다.</returns>
        </member>
        <member name="T:TheOne.Security.ISecurityContext">
            <summary>
            ISecurityContext 인터페이스는 프로그램 레벨에서 권한 확인을 할 때 사용되어지는
            인터페이스이다.
            </summary>
            <remarks>
            권한 검사를 수행하기 위해서 어플리케이션은 ISecurityContext를 구현하는 클래스를 정의해야
            한다.<br/>
            <b><font color="red">이 클래스는 더 이상 지원되지 않는다.</font></b>
            </remarks>
        </member>
        <member name="M:TheOne.Security.ISecurityContext.CheckRight(System.Object)">
            <summary>
            일반적인 권한 검사를 수행한다.
            </summary>
            <param name="target">권한 검사의 대상</param>
            <returns>권한 유무</returns>
        </member>
        <member name="P:TheOne.Security.ISecurityContext.CanOpen">
            <summary>
            화면 Open 여부
            </summary>
        </member>
        <member name="P:TheOne.Security.ISecurityContext.CanSelect">
            <summary>
            조회 권한 여부
            </summary>
        </member>
        <member name="P:TheOne.Security.ISecurityContext.CanInsert">
            <summary>
            추가 권한 여부
            </summary>
        </member>
        <member name="P:TheOne.Security.ISecurityContext.CanUpdate">
            <summary>
            수정 권한 여부
            </summary>
        </member>
        <member name="P:TheOne.Security.ISecurityContext.CanDelete">
            <summary>
            삭제 권한 여부
            </summary>
        </member>
        <member name="P:TheOne.Security.ISecurityContext.CanSave">
            <summary>
            저장 권한 여부
            </summary>
        </member>
        <member name="P:TheOne.Security.ISecurityContext.ContextValue">
            <summary>
            권한 값 반환
            </summary>
        </member>
        <member name="T:TheOne.Resources.Configuration.ParameterSetting">
            <summary>
            리소스 공급자에 전달되는 매개변수의 이름과 값을 저장하는 클래스이다.
            </summary>
        </member>
        <member name="T:TheOne.Security.CryptoKeyProvider">
            <summary>
            암/복호화를 위한 <b>Key/IV</b>, <b>Symmetric</b> 알고리즘을 제공하는 기본 추상(abstrac) 클래스를 정의한다.
            </summary>
        </member>
        <member name="M:TheOne.Security.CryptoKeyProvider.GetSymmetricKey">
            <summary>
            <b>Symmetric Key</b>를 반환한다.
            </summary>
            <returns><b>Symmetric Key</b> Byte 배열을 반환한다.</returns>
        </member>
        <member name="M:TheOne.Security.CryptoKeyProvider.GetSymmetricIV">
            <summary>
            <b>Symmetric IV</b>를 반환한다.
            </summary>
            <returns><b>Symmetric IV</b> Byte 배열을 반환한다.</returns>
        </member>
        <member name="M:TheOne.Security.CryptoKeyProvider.GetSymmetricAlgorithm">
            <summary>
            암/복호화에 사용할 <b>Symmetric</b> 알고리즘을 반환한다.
            </summary>
            <returns><b>Symmetric</b> 알고리즘을 반환한다.</returns>
        </member>
        <member name="T:TheOne.Security.AuthenticationException">
            <summary>
            사용자 인증 오류에 대한 예외 클래스를 나타낸다.
            </summary>
            <remarks>
            일반적으로 다음과 같은 상황에서 예외가 발생한다.
            <list>
                <item>사용자 인증을 수행하는 과정에서 예외 발생</item>
                <item>인증되지 않은 사용자가 인증을 요구하는 컨트롤에 접근하는 경우 발생</item>
                <item>인증되지 않은 사용자가 인증을 요구하는 서비스를 호출하는 경우 발생</item>
            </list>
            </remarks>
        </member>
        <member name="M:TheOne.Security.AuthenticationException.#ctor">
            <summary>
            <see cref="T:TheOne.Security.AuthenticationException"/> 클래스의 새 인스턴스를 초기화한다.
            </summary>
        </member>
        <member name="M:TheOne.Security.AuthenticationException.#ctor(System.String)">
            <summary>
            지정된 오류 메시지를 사용하여 <see cref="T:TheOne.Security.AuthenticationException"/> 클래스의 새 인스턴스를 초기화한다.
            </summary>
            <param name="message">오류를 설명하는 메시지</param>
        </member>
        <member name="M:TheOne.Security.AuthenticationException.#ctor(System.String,System.Exception)">
            <summary>
            지정된 오류 메시지와 예외 객체를 사용하여 <see cref="T:TheOne.Security.AuthenticationException"/> 클래스의 새 인스턴스를 초기화한다.
            </summary>
            <param name="message">오류를 설명하는 메시지</param>
            <param name="innerException">예외 객체</param>
        </member>
        <member name="M:TheOne.Security.AuthenticationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialize된 데이터를 사용하여 <see cref="T:TheOne.Security.AuthenticationException"/> 클래스의 새 인스턴스를 초기화한다. 
            </summary>
            <param name="info">Serialize된 객체 데이터를 유지하는 객체</param>
            <param name="context">소스 또는 대상에 대한 컨텍스트 정보</param>
        </member>
        <member name="M:TheOne.Security.AuthenticationException.#ctor(System.String,System.Int32)">
            <summary>
            지정된 오류 메시지와 오류코드를 사용하여 <see cref="T:TheOne.Security.AuthenticationException"/> 클래스의 새 인스턴스를 초기화한다.
            </summary>
            <param name="message">오류를 설명하는 메시지</param>
            <param name="code">오류 코드</param>
        </member>
        <member name="M:TheOne.Security.AuthenticationException.#ctor(System.String,System.Int32,System.Exception)">
            <summary>
            지정된 오류 메시지, 오류 코드, 예외객체를 사용하여 <see cref="T:TheOne.Security.AuthenticationException"/> 클래스의 새 인스턴스를 초기화한다.
            </summary>
            <param name="message">오류를 설명하는 메시지</param>
            <param name="code">오류 코드</param>
            <param name="innerException">예외 객체</param>
        </member>
        <member name="T:TheOne.Resources.Configuration.ResourceProviderSetting">
            <summary>
            NeoDEEX 구성요소 파일에 리소스 공급자를 설정한다.<br/>
            Configuration의 ResourceProvider 노드로 <b>serialize</b> 또는 <b>deserialize</b> 됩니다.
            </summary>
        </member>
        <member name="T:TheOne.Configuration.ConfigurationException">
            <summary>
            NeoDEEX 구성 파일 또는 구성 데이터가 없거나 각 구성 요소가 정의되지 않은 경우와 같이, 
            NeoDEEX 구성 시스템에 오류가 발생한 경우 throw 되는 예외이다. 
            </summary>
            <remarks>
            NeoDEEX 구성 파일 또는 구성 데이터가 없거나, 각 구성 요소가 정의되지 않은 경우에 발생한다.<br/>
            각 섹션을 초기화하는 SectionFactory 클래스에서는 기본값을 사용하도록 설정하거나, 예외를 throw 할 수 있다.
            </remarks>
        </member>
        <member name="M:TheOne.Configuration.ConfigurationException.#ctor">
            <summary>
            <see cref="T:TheOne.Configuration.ConfigurationException"/> 클래스의 새 인스턴스를 초기화한다.
            </summary>
        </member>
        <member name="M:TheOne.Configuration.ConfigurationException.#ctor(System.String)">
            <summary>
            지정된 오류 메시지를 사용하여 <see cref="T:TheOne.Configuration.ConfigurationException"/> 클래스의 새 인스턴스를 초기화한다.
            </summary>
            <param name="msg">오류를 설명하는 메시지</param>
        </member>
        <member name="M:TheOne.Configuration.ConfigurationException.#ctor(System.String,System.Exception)">
            <summary>
            지정된 오류 메시지와 예외 객체를 사용하여 <see cref="T:TheOne.Configuration.ConfigurationException"/> 클래스의 새 인스턴스를 초기화한다.
            </summary>
            <param name="msg">오류를 설명하는 메시지</param>
            <param name="ie">예외 객체</param>
        </member>
        <member name="M:TheOne.Configuration.ConfigurationException.#ctor(System.Int32)">
            <summary>
            지정된 오류 코드를 사용하여 <see cref="T:TheOne.Configuration.ConfigurationException"/> 클래스의 새 인스턴스를 초기화한다.
            </summary>
            <param name="code">오류 코드</param>
        </member>
        <member name="M:TheOne.Configuration.ConfigurationException.#ctor(System.String,System.Int32)">
            <summary>
            지정된 오류 메시지와 오류 코드를 사용하여 <see cref="T:TheOne.Configuration.ConfigurationException"/> 클래스의 새 인스턴스를 초기화한다.
            </summary>
            <param name="msg">오류를 설명하는 메시지</param>
            <param name="code">오류 코드</param>
        </member>
        <member name="T:TheOne.Security.DefaultDenialSecurityContext">
            <summary>
            권한 검사를 수행하는 기본 권한 검사 객체로서
            모든 권한을 허용하지 않는다. 즉, 아무런 권한이 없는 <see cref="T:TheOne.Security.SecurityContext"/>이다.
            </summary>
            <remarks>
            <b>CRUD</b> 권한에 대해 모두 허용하지 않는 보안 컨텍스트 객체로서 권한 검사에 실패
            하는 경우 설정되는 권한 컨텍스트이다.
            </remarks>
        </member>
        <member name="T:TheOne.Security.SecurityContext">
            <summary>
            사용자가 특정 화면에 대하여 어떤 권한을 가지는지 나타낸다.
            </summary>
            <remarks>
            NeoDEEX 프레임워크는 이 클래스를 통해 사용자의 권한(ACL)을 정의하고 이 권한에 의해
            화면 상에서 조회(CanSelect), 추가(CanInsert), 수정(CanUpdate), 삭제(CanDelete) 권한이
            있는지 판단한다. 화면을 열 수 있는 권한(CanOpen)은 조회/추가/수정/삭제 권한 중 하나라도
            권한이 있다면 해당 권한이 있는 것으로 인정되며 화면에 대한 저장 권한(CanSave)은 추가/수정/삭제 권한 중
            하나가 있다면 저장 권한이 있는 것으로 인정된다.
            <para>
            <see cref="T:TheOne.Security.SecurityContext"/> 클래스는 권한을 나타내기 위해 표준적으로 조회/추가/수정/삭제 권한을 나타내는
            기본 권한과 비트 인코딩된 정수를 사용하는 확장 권한 그리고 임의의 용도로 어플리케이션 내에서
            사용할 수 있는 확장 문자열 권한을 제공한다.<br/>
            기본 권한은 
            <see cref="P:TheOne.Security.SecurityContext.CanSelect">CanSelect</see>, <see cref="P:TheOne.Security.SecurityContext.CanInsert">CanInsert</see>, 
            <see cref="P:TheOne.Security.SecurityContext.CanUpdate">CanUpdate</see>, <see cref="P:TheOne.Security.SecurityContext.CanDelete">CanDelete</see>
            네 개의 속성에 의해 표시되며 어플리케이션 내에서 임의로 지정하여 사용할 수 있는 확장 권한은
            SecurityContext 클래스의 <see cref="P:TheOne.Security.SecurityContext.Item(System.Int32)">인덱서</see>와 <see cref="M:TheOne.Security.SecurityContext.GetExtACL(System.Int32)">GetExtACL</see> 메서드를
            통해 액세스 할 수 있다.
            </para>
            <para>
            확장 권한은 32비트 정수에 의해 인코딩 된 것으로써 각 비트에 권한을 설정하여 최대 32종류의
            권한을 설정할 수 있다. 확장 권한의 정의는 어플리케이션에서 정의하여 사용해야만 한다.<br/>
            비슷하게 확장 문자열 권한은 <b>ture</b> 와 <b>false</b> 가 아닌 복잡한 권한 묘사를 위해 제공되는 것으로써
            이 역시 어플리케이션이 이 문자열에 들어갈 값과 그 값의 의미를 정의하여 사용해야 한다.
            </para>
            </remarks>
        </member>
        <member name="M:TheOne.Security.SecurityContext.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            표준 권한인 CRUD(Create, Retrieve, Update, Delete) 정보를 사용하여 <see cref="T:TheOne.Security.SecurityContext"/> 클래스의 새 인스턴스를 초기화한다.
            </summary>
            <param name="create">생성 권한</param>
            <param name="retrieve">조회 권한</param>
            <param name="update">수정 권한</param>
            <param name="delete">삭제 권한</param>
        </member>
        <member name="M:TheOne.Security.SecurityContext.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            기본 ACL 정보, 확장 ACL 정보를 사용하여 <see cref="T:TheOne.Security.SecurityContext"/> 클래스의 새 인스턴스를 초기화한다.
            </summary>
            <param name="basicACL">기본 권한</param>
            <param name="extACL">확장 권한</param>
            <param name="strACL">확장 문자열 권한</param>
        </member>
        <member name="M:TheOne.Security.SecurityContext.#ctor(System.String)">
            <summary>
            문자열로 Serialize 된 ACL 정보를 사용하여 <see cref="T:TheOne.Security.SecurityContext"/> 클래스의 새 인스턴스를 초기화한다.
            </summary>
            <param name="aclString">문자열로 Serialize된 <see cref="T:TheOne.Security.SecurityContext"/> 객체</param>
            <remarks>
            VersionIndependentserailize 메서드 호출의 결과로 반환된 문자열만을 사용하여 객체를 초기화 한다.
            </remarks>
        </member>
        <member name="M:TheOne.Security.SecurityContext.GetExtACL(System.Int32)">
            <summary>
            특정 위치의 확장 권한 값을 반환한다.
            </summary>
            <param name="index">확장 권한 값의 위치.</param>
            <returns>특정 위치에 해당하는 확장 권한 값을 반환한다.</returns>
        </member>
        <member name="M:TheOne.Security.SecurityContext.GetJSONString">
            <summary>
            자바 스크립트에서 권한 객체에 접근할 수 있도록 <see cref="T:TheOne.Security.SecurityContext"/>에 대한 JSON 문자열을 반환한다.
            </summary>
            <returns>SecurityContext 객체에 대한 JSON 문자열을 반환한다.</returns>
        </member>
        <member name="M:TheOne.Security.SecurityContext.ToString">
            <summary>
            <see cref="T:TheOne.Security.SecurityContext"/> 객체를 문자열로 전환하여 나타낸다.
            </summary>
            <returns><see cref="T:TheOne.Security.SecurityContext"/> 객체의 값을 반환한다. </returns>
            <remarks>
            문자열 포맷은 C:_ R:_ U:_ D:_ (basic=0x__, ext=0x__, str=___) 이다.
            </remarks>
        </member>
        <member name="M:TheOne.Security.SecurityContext.GetACLBit(System.Int32,System.Int32)">
            <summary>
            확장 권한 정수의 특정 위치의 권한을 반환한다.
            </summary>
            <param name="index">확장 권한 값 위치</param>
            <param name="extACL">확장 권한 정수</param>
            <returns>
            특정 위치의 권한이 0이 아니면 <b>true</b>를 반환하고 그렇지 않으면 <b>false</b>를 반환한다.
            </returns>
        </member>
        <member name="M:TheOne.Security.SecurityContext.SetACLBit(System.Int32,System.Boolean,System.Int32@)">
            <summary>
            확장 권한 정수의 특정 위치의 권한을 설정한다.
            </summary>
            <param name="index">확장 권한 값의 위치</param>
            <param name="acl">특정 위치에 해당하는 확장 권한 값</param>
            <param name="extACL">확장 권한 정수</param>
        </member>
        <member name="P:TheOne.Security.SecurityContext.CanOpen">
            <summary>
            <see cref="T:TheOne.Security.SecurityContext"/> 객체에 설정된 화면 <b>Open</b> 권한을 가져온다.
            </summary>
            <remarks>
            기본적으로 CRUD 권한 중 한개의 권한이라도 갖으면 <b>Open</b> 권한은 <b>true</b>가 된다.
            </remarks>
        </member>
        <member name="P:TheOne.Security.SecurityContext.CanSelect">
            <summary>
            <see cref="T:TheOne.Security.SecurityContext"/> 객체에 설정된 조회(<b>SELECT</b>) 권한을 가져온다.
            </summary>
        </member>
        <member name="P:TheOne.Security.SecurityContext.CanInsert">
            <summary>
            <see cref="T:TheOne.Security.SecurityContext"/> 객체에 설정된 추가(<b>INSERT</b>) 권한을 가져온다.
            </summary>
        </member>
        <member name="P:TheOne.Security.SecurityContext.CanUpdate">
            <summary>
            <see cref="T:TheOne.Security.SecurityContext"/> 객체에 설정된 수정(<b>UPDATE</b>) 권한을 가져온다.
            </summary>
        </member>
        <member name="P:TheOne.Security.SecurityContext.CanDelete">
            <summary>
            <see cref="T:TheOne.Security.SecurityContext"/> 객체에 설정된 삭제(<b>DELETE</b>) 권한을 가져온다.
            </summary>
        </member>
        <member name="P:TheOne.Security.SecurityContext.CanSave">
            <summary>
            <see cref="T:TheOne.Security.SecurityContext"/> 객체에 설정된 저장(<b>SAVE</b>) 권한을 가져온다.
            </summary>
            <remarks>
            기본적으로 추가/수정/삭제 권한 중 하나라도 권한이 있다면 저장 권한은 <b>true</b>가 된다.
            </remarks>
        </member>
        <member name="P:TheOne.Security.SecurityContext.ExtendedACL">
            <summary>
            확장 권한 값을 가져온다.
            </summary>
        </member>
        <member name="P:TheOne.Security.SecurityContext.ACLString">
            <summary>
            확장 문자열 권한 값을 가져온다.
            </summary>
        </member>
        <member name="P:TheOne.Security.SecurityContext.Item(System.Int32)">
            <summary>
            특정 위치(BIT FLAG)의 확장 권한 값을 가져온다.
            </summary>
            <param name="index">확장 권한 값의 위치.</param>
            <returns>특정 위치에 해당하는 확장 권한 값을 반환한다.</returns>
        </member>
        <member name="M:TheOne.Security.DefaultDenialSecurityContext.#ctor">
            <summary>
            모든 권한을 허용하지 않는 기본 <see cref="T:TheOne.Security.DefaultDenialSecurityContext"/>클래스의 새 인스턴스를 초기화한다.
            </summary>
        </member>
        <member name="T:TheOne.Diagnostics.PerfCounterMode">
            <summary>
            성능 카운터의 모드의 형식을 정의한다.
            </summary>
            <remarks>
            지원되는 성능 카운터 모드는 두가지 로서 <see cref="F:TheOne.Diagnostics.PerfCounterMode.SimpleCounter">SimpleCounter</see>와 <see cref="F:TheOne.Diagnostics.PerfCounterMode.SystemCounter">SystemCounter</see>가 있다.<br/>
            <see cref="F:TheOne.Diagnostics.PerfCounterMode.SimpleCounter">SimpleCounter</see>는 단순히 파일로그에 객체가 <b>Activate</b>되서 <b>Deactivate</b>될 때까지 소요된
            시간을 남기는 것이다. 반면 <see cref="F:TheOne.Diagnostics.PerfCounterMode.SystemCounter">SystemCounter</see>는 Windows의 <see cref="T:System.Diagnostics.PerformanceCounter">Performance Counter
            </see>를 사용하여 성능 카운터 기록을 남긴다.<br/>
            <b>None</b>의 경우, 성능 카운터를 사용하지 않는 경우이다.
            </remarks>
        </member>
        <member name="F:TheOne.Diagnostics.PerfCounterMode.None">
            <summary>
            성능 카운터를 사용하지 않는다.
            </summary>
        </member>
        <member name="F:TheOne.Diagnostics.PerfCounterMode.SimpleCounter">
            <summary>
            단순히 객체가 <b>Activate</b>되서 <b>Deactivate</b>될 때까지 소요된 시간을 파일 로그에 기록한다.
            </summary>
        </member>
        <member name="F:TheOne.Diagnostics.PerfCounterMode.SystemCounter">
            <summary>
            Windows의 <see cref="T:System.Diagnostics.PerformanceCounter">Performance Counter</see>를 이용하여 성능 카운터 기록을 남긴다.
            </summary>
        </member>
        <member name="F:TheOne.Diagnostics.PerfCounterMode.Both">
            <summary>
            <see cref="F:TheOne.Diagnostics.PerfCounterMode.SimpleCounter">SimpleCounter</see>와 <see cref="F:TheOne.Diagnostics.PerfCounterMode.SystemCounter">SystemCounter</see>를
            모두 사용한다.
            </summary>
        </member>
        <member name="M:TheOne.Configuration.SectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            NeoDEEX 구성 데이터에 대한 구성 섹션 처리기를 만든다.
            </summary>
            <param name="parent">부모 객체</param>
            <param name="configContext">구성컨텍스트 객체</param>
            <param name="section">섹션 xml노드</param>
            <returns> NeoDEEX 구성 데이터에 대한 섹션 처리기 객체를 반환한다.</returns>
        </member>
        <member name="T:TheOne.Security.DefaultCryptoKeyProvider">
            <summary>
            <see cref="T:TheOne.Security.CryptoKeyProvider"/> 클래스로 부터 파생하여 암/복호화를 위한 Key/IV, Symmetric 알고리즘을 제공한다.
            </summary>
        </member>
        <member name="F:TheOne.Security.DefaultCryptoKeyProvider._Key">
            <summary>
            Symmetric Key
            </summary>
        </member>
        <member name="F:TheOne.Security.DefaultCryptoKeyProvider._IV">
            <summary>
            Symmetric IV
            </summary>
        </member>
        <member name="M:TheOne.Security.DefaultCryptoKeyProvider.GetSymmetricKey">
            <summary>
            Symmetric Key를 반환한다.
            </summary>
            <returns>Symmetric Key Byte 배열을 반환한다.</returns>
        </member>
        <member name="M:TheOne.Security.DefaultCryptoKeyProvider.GetSymmetricIV">
            <summary>
            Symmetric IV를 반환한다.
            </summary>
            <returns>Symmetric IV Byte 배열을 반환한다.</returns>
        </member>
        <member name="M:TheOne.Security.DefaultCryptoKeyProvider.GetSymmetricAlgorithm">
            <summary>
            암/복호화에 사용할 Symmetric 알고리즘을 반환한다.
            </summary>
            <returns>Symmetric 알고리즘을 반환한다.</returns>
        </member>
        <member name="T:TheOne.Resources.UrlResourceProvider">
            <summary>
            NeoDDEX 구성요소 파일에 설정된 Url(리소스를 가져오는 웹페이지)를 통해 리소스를 가져오기 위한 리소스 공급자를 나타낸다.
            </summary>
            <example>
            <code lang="XML" title="EmbeddResourceProvider Configruation">
            &lt;theone.configuration&gt;
              &lt;resourceSection defaultProvider="RES2"&gt;
                &lt;resource name="RES2" type="TheOne.Resources.UrlResourceProvider, OneCorLib"&gt;
                  &lt;parameter name="ResourceHandlerUrl" value="http://{서버:포트}/ResourceHandler.aspx"/&gt;
                &lt;/resource&gt;
              &lt;/resourceSection&gt;
            &lt;/theone.configuration&gt;
            </code>
            </example>
        </member>
        <member name="M:TheOne.Resources.UrlResourceProvider.GetString(System.String)">
            <summary>
            지정된 리소스명을 사용하여 <see cref="T:System.String"/> 리소스의 값을 가져온다.
            </summary>
            <returns>호출자의 현재 문화권 설정에 대해 지역화된 리소스의 값을 반환한다.</returns>
            <param name="resourceName">가져올 리소스의 이름</param>
        </member>
        <member name="M:TheOne.Resources.UrlResourceProvider.GetString(System.String,System.Globalization.CultureInfo)">
            <summary>
            지정된 문화권에 대해 지역화된 <see cref="T:System.String"/> 리소스의 값을 가져온다.
            </summary>
            <param name="resourceName">가져올 리소스의 이름</param>
            <param name="cultureInfo">리소스에 대한 문화권을 나타내는 <see cref="T:System.Globalization.CultureInfo"/> 객체</param>
            <returns>지정된 문화권에 대해 지역화된 리소스의 값이다.</returns>
        </member>
        <member name="M:TheOne.Resources.UrlResourceProvider.GetImage(System.String)">
            <summary>지정된 리소스명을 사용하여 <see cref="T:System.Drawing.Image"/> 객체를 가져온다.</summary>
            <returns><see cref="T:System.Drawing.Image"/> 객체를 반환한다.</returns>
            <param name="resourceName">가져올 리소스의 이름</param>
        </member>
        <member name="M:TheOne.Resources.UrlResourceProvider.GetImage(System.String,System.Globalization.CultureInfo)">
            <summary>지정된 문화권에 대해 지역화된 <see cref="T:System.Drawing.Image"/> 객체를 가져온다.</summary>
            <returns><see cref="T:System.Drawing.Image"/> 객체를 반환한다.</returns>
            <param name="resourceName">가져올 리소스의 이름</param>
            <param name="cultureInfo">리소스에 대한 문화권을 나타내는 <see cref="T:System.Globalization.CultureInfo"/> 객체</param>
        </member>
        <member name="M:TheOne.Resources.UrlResourceProvider.GetStream(System.String)">
            <summary>지정된 리소스명을 사용하여 <see cref="T:System.IO.Stream"/> 객체를 가져온다.</summary>
            <returns><see cref="T:System.IO.Stream"/> 객체를 반환한다.</returns>
            <param name="resourceName">가져올 리소스의 이름</param>
        </member>
        <member name="M:TheOne.Resources.UrlResourceProvider.GetStream(System.String,System.Globalization.CultureInfo)">
            <summary>지정된 문화권에 대해 지역화된 <see cref="T:System.IO.Stream"/> 객체를 가져온다.</summary>
            <returns><see cref="T:System.IO.Stream"/> 객체를 반환한다.</returns>
            <param name="resourceName">가져올 리소스의 이름</param>
            <param name="cultureInfo">소스에 대한 문화권을 나타내는 <see cref="T:System.Globalization.CultureInfo"/> 객체</param>
        </member>
        <member name="T:TheOne.Net.HttpFileInfo">
            <summary>원격 파일 서버 파일의 정보</summary>
        </member>
        <member name="M:TheOne.Net.HttpFileInfo.#ctor">
            <summary>
            기본 생성자 서버 파일 정보 생성
            </summary>
        </member>
        <member name="P:TheOne.Net.HttpFileInfo.DataKey">
            <summary>업로드 된 파일의 데이터 키 (삭제 된 파일의 데이터를 삭제 하기 위해 필요)</summary>
        </member>
        <member name="P:TheOne.Net.HttpFileInfo.CreateDate">
            <summary>
            파일 생성 일자
            </summary>
        </member>
        <member name="P:TheOne.Net.HttpFileInfo.LastWriteDate">
            <summary>마지막 파일 수정 일자</summary>
        </member>
        <member name="P:TheOne.Net.HttpFileInfo.FileName">
            <summary>파일 명 (경로 제외)</summary>
        </member>
        <member name="P:TheOne.Net.HttpFileInfo.FileSize">
            <summary>파일 크기( byte 단위 )</summary>
        </member>
        <member name="P:TheOne.Net.HttpFileInfo.UploadedFilePath">
            <summary>파일 서버 상의 저장 된 파일의 명 (상대 경로 포함)</summary>
            <example>
            \Files\PMSFiles\Guid..._test.txt
            </example>
        </member>
        <member name="P:TheOne.Net.HttpFileInfo.LocalFilePath">
            <summary>업로드 할 파일의 로컬 파일 전체 경로</summary>
        </member>
        <member name="P:TheOne.Net.HttpFileInfo.FileStatus">
            <summary>
            파일 상태 분류 
            </summary>
        </member>
        <member name="P:TheOne.Net.HttpFileInfo.FileExtension">
            <summary>
            파일 확장자
            </summary>
        </member>
        <member name="T:TheOne.Net.FileStatusType">
            <summary>파일 업로드 상태 분류</summary>
        </member>
        <member name="F:TheOne.Net.FileStatusType.NONUPLOAD">
            <summary>업로드 되지 않은 상태 (업로드 하기 위해 파일을 선택한 상태)</summary>
        </member>
        <member name="F:TheOne.Net.FileStatusType.UPLOADED">
            <summary>업로드 된 상태 (데이터 저장 이후)</summary>
        </member>
        <member name="F:TheOne.Net.FileStatusType.UPLOADEDNEW">
            <summary>신규 업로드 된 상태 (데이터 저장 이전)</summary>
        </member>
        <member name="F:TheOne.Net.FileStatusType.UPLOADEDTODELETE">
            <summary>기존 업로드 데이터가 있는 FILE 삭제 상태 (데이터 저장 이후)</summary>
        </member>
        <member name="F:TheOne.Net.FileStatusType.UPLOADNEWTODELETE">
            <summary>신규 업로드 파일 삭제 상태 (데이터 저장 이전)</summary>
        </member>
        <member name="T:TheOne.Net.HttpDirectoryInfo">
            <summary>원격 File Server Diretory 정보</summary>
            <example>
            	<para>HttpDirectoryInfo hdInfo = new HttpDirectoryInfo();</para>
            	<para>hdInfo.SubDirectoryPath = "\test\Files";</para>
            	<para>hdInfo.DirectoryName = "Documents"</para>
            	<para>hdInfo.CreateDate = new DateTime("2008-xx-xx");</para>
            	<para>hdInfo.LastWriteDate = new DateTime("2008-xx-xx");</para>
            </example>
        </member>
        <member name="P:TheOne.Net.HttpDirectoryInfo.SubDirectoryPath">
            <summary>Server Directory 의 상대 경로</summary>
            <example>
            \File\Test
            </example>
            <remarks>파일 서버의 최상위 경로 이하의 경로</remarks>
        </member>
        <member name="P:TheOne.Net.HttpDirectoryInfo.DirectoryName">
            <summary>SubDirectoryPath 경로 하위의 디렉토리 명</summary>
        </member>
        <member name="P:TheOne.Net.HttpDirectoryInfo.CreateDate">
            <summary>
            디렉토리 생성 일자
            </summary>
        </member>
        <member name="P:TheOne.Net.HttpDirectoryInfo.LastWriteDate">
            <summary>
            디렉토리 수정 일자
            </summary>
        </member>
        <member name="T:TheOne.Diagnostics.TimeCounter">
            <summary>
            성능 측정을 위해 소요된 시간을 계산해 준다.
            </summary>
            <remarks>
            WIN32 API의 QueryPerformanceCounter() 함수를
            사용하여 시간이 소요됨에 따라 증가하는 카운터 값을 통해 어떠한 작업에
            소요되는 시간을 계산해 준다.
            <br/><br/>
            일반적으로 성능 측정이란 어떤 작업에 소요되는 시간을 측정하는 것을 말한다.
            따라서 측정하고자 하는 작업 수행 전에 TimeCounter 클래스의 <see cref="M:TheOne.Diagnostics.TimeCounter.Start">Start()</see>를 호출하고
            작업이 끝난 직후에 <see cref="M:TheOne.Diagnostics.TimeCounter.Stop">Stop()</see>를 호출하면 해당 작업에 소요되는 시간을 TimeCounter 클래스의
            <b>Seconds</b>, <b>Milliseconds</b>, <b>Microseconds</b> 속성 등을 통해서 알아 낼 수 있다.
            </remarks>
            <example>
            <code>
            TimeCounter counter = new PerformanceCoutner();
            counter.Start();
            
            // do something to instrument
            System.Threading.Thread.Sleep(1000);
            
            counter.Stop();
            Console.WriteLine("ElapsedTime = {0:#.000} msec", counter.Milliseconds);
            </code>
            </example>
        </member>
        <member name="M:TheOne.Diagnostics.TimeCounter.Start">
            <summary>
            카운터를 시작한다.
            </summary>
            <remarks>
            Start 메서드 수행 시점에서 카운터 값을 기록해 두고, 후에
            Stop 메서드가 수행될 때의 카운터 값으로 부터 경과된 시간을
            계산한다.
            </remarks>
            <example>
            <code>
            TimeCounter counter = new PerformanceCoutner();
            counter.Start();
            
            // do something to instrument
            
            counter.Stop();
            Console.WriteLine("ElapsedTime = {0} msec", counter.Milliseconds);
            </code>
            </example>
        </member>
        <member name="M:TheOne.Diagnostics.TimeCounter.Stop">
            <summary>
            카운터를 정지한다.
            </summary>
            <remarks>
            Start 메서드 수행 시점에서 카운터 값을 기록해 두고, 후에
            Stop 메서드가 수행될 때의 카운터 값으로 부터 경과된 시간을
            계산한다. 카운터는 초당 일정한 값만큼 증가하므로(Frequency) 카운터의
            변화값으로부터 소요된 시간을 계산할 수 있다.
            </remarks>
            <example>
            <code>
            TimeCounter counter = new PerformanceCoutner();
            counter.Start();
            
            // do something to instrument
            
            counter.Stop();
            Console.WriteLine("ElapsedTime = {0} msec", counter.Milliseconds);
            </code>
            </example>
        </member>
        <member name="M:TheOne.Diagnostics.TimeCounter.Clear">
            <summary>
            카운터 기록을 초기화 한다. 즉, 기록해둔 소요 시간을 초기화를 하는 것이다.
            </summary>
            <remarks>
            Start 혹은 Stop 메서드에 의해 기록된 카운터 시작 값 및
            경과 시간 정보를 초기화를 한다. 새로운 성능 측정의 시작을 위해서는
            Clear 메서드를 반드시 호출해 주어야 한다.
            </remarks>
            <example>
            <code>
            TimeCounter counter = new PerformanceCoutner();
            counter.Start();
            
            // do something to instrument
            
            counter.Stop();
            Console.WriteLine("ElapsedTime = {0} msec", counter.Milliseconds);
            
            // now, start another performance test
            counter.Clear();
            counter.Start();
            
            for(int i = 0; i &lt; 1000; i ++) {
            	// do another thing to instrument
            	Console.WriteLine("Current elpased time = {0} msec", counter.Snapshot);
            }
            
            counter.Stop();
            Console.WriteLine("Total ElapsedTime = {0} msec", counter.Seconds);
            </code>
            </example>
        </member>
        <member name="M:TheOne.Diagnostics.TimeCounter.ToString">
            <summary>
            소요된 시간 값을 문자열로 반환한다.
            </summary>
            <returns>문자열을 반환한다.</returns>
        </member>
        <member name="P:TheOne.Diagnostics.TimeCounter.Microseconds">
            <summary>
            경과된 시간을 마이크로 초(micro-seconds, 백만분의 1초) 단위로 가져온다.
            </summary>
            <remarks>
            Start 메서드가 호출된 후, Stop 메서드가 호출되어야 유효한 값을 가져올 수 있다.
            </remarks>
            <example>
            <code>
            TimeCounter counter = new TimeCounter();
            counter.Start();
            
            counter.Stop();
            double t = counter.Microseconds
            </code>
            </example>
        </member>
        <member name="P:TheOne.Diagnostics.TimeCounter.Milliseconds">
            <summary>
            경과된 시간을 밀리 초(milli-seconds, 천분의 1초) 단위로 가져온다.
            </summary>
            <remarks>
            Start 메서드가 호출된 후, Stop 메서드가 호출되어야 유효한 값을 가져올 수 있다.
            </remarks>
            <example>
            <code>
            TimeCounter counter = new TimeCounter();
            counter.Start();
            
            counter.Stop();
            double t = counter.Milliseconds
            </code>
            </example>
        </member>
        <member name="P:TheOne.Diagnostics.TimeCounter.Seconds">
            <summary>
            경과된 시간을 초(second) 단위로 가져온다.
            </summary>
            <remarks>
            Start 메서드가 호출된 후, Stop 메서드가 호출되어야 유효한 값을 가져올 수 있다.
            </remarks>
            <example>
            <code>
            TimeCounter counter = new TimeCounter();
            counter.Start();
            
            counter.Stop();
            double t = counter.Seconds
            </code>
            </example>
        </member>
        <member name="P:TheOne.Diagnostics.TimeCounter.Snapshot">
            <summary>
            경과된 시간의 스넵샷 값을 밀리 초 단위(milli-second, 천분의 일초)로 가져온다.
            </summary>
            <remarks>
            SnapShot 속성는 Start 메소드 호출 이후에 Stop 메소드가 호출되지
            않더라도 반복적으로 읽을 수 있는 카운터의 스냅샷 값이다.
            </remarks>
            <example>
            <code>
            TimeCounter counter = new TimeCounter();
            counter.Start();
            
            for(int i = 0; i &lt; 1000; i ++) {
            	// do another thing to instrument
            	Console.WriteLine("Current elpased time = {0} msec", counter.Snapshot);
            }
            
            counter.Stop();
            Console.WriteLine("Total ElapsedTime = {0} msec", counter.Seconds);
            </code>
            </example>
        </member>
        <member name="P:TheOne.Diagnostics.TimeCounter.Frequency">
            <summary>
            카운터의 Frequency를 가져온다.
            </summary>
            <remarks>
            Frequency는 시스템에 따라서 다른 값으로서 WIN32 API인 QueryPerformanceFrequency() 함수를
            호출함으로써 얻을 수 있다. 이 함수는 초당 백만회 이상 증가하는 카운터의 frequency 값을
            반환해 준다. 이 frequency 값은 1초에 카운터가 얼마 증가되는가에 대한 값이며, 시스템의 CPU에 따라서
            다른 값을 가진다.<br/>
            따라서 카운터의 변화량을 Frequency로 나누면 소요된 시간을 구할 수 있다.
            </remarks>
            <example>
            <code>
            long c1 = TimeCounter.Current;
            System.Threading.Thread.Sleep(500);
            long offset = TimeCounter.Current - c1;
            // elapsed time calcuation
            double t = offset / (double)TimeCounter.Frequency;
            </code>
            </example>
        </member>
        <member name="P:TheOne.Diagnostics.TimeCounter.Current">
            <summary>
            현재 카운터 값을 가져온다.
            </summary>
            <remarks>
            카운터의 값은 64비트 정수형 값으로 시간이 지남에 따라서 증가한다.
            1초당 증가하는 카운터 값은 일정하며 static Frequency 속성를 통해 알아 낼 수 있다.
            </remarks>
            <example>
            <code>
            long c1 = TimeCounter.Current;
            System.Threading.Thread.Sleep(500);
            long offset = TimeCounter.Current - c1;
            // elapsed time calcuation
            double t = offset / (double)TimeCounter.Frequency;
            </code>
            </example>
        </member>
        <member name="M:TheOne.Configuration.ConfigurationManager.OnConfigurationChanged(System.Object,TheOne.Configuration.ConfigurationChangedEventArgs)">
            <summary>
             ConfigurationChanged 이벤트를 발생시킨다.
            </summary>
        </member>
        <member name="P:TheOne.Configuration.ConfigurationManager.Builder">
            <summary>
            현재 응용 프로그램의 ConfigurationManager 개체를 가져온다.
            </summary>
        </member>
        <member name="P:TheOne.Configuration.ConfigurationManager.ConfigurationFileName">
            <summary>
            프로그램적으로 설정한 NeoDEEX 구성 파일 경로를 가져오거나 설정합니다. 
            </summary>
        </member>
        <member name="T:TheOne.Text.MessageManager">
            <summary>
            지정된 메세지 코드에 해당하는 메세지를 반환하는 메서드를 제공하는 클래스이다. 
            </summary>
            <remarks>
            이 클래스는 NeoDEEX 구성요소 파일의 설정에 따라 MessageProvider 인스턴스를 생성하고 
            해당 MessageProvider 인스턴스의 GetMessageDataSet 메서드를 호출하여 XML 데이터를 받아와
            XML 테이터를 내부적으로 처리해서 메세지 테이블을 구성한다.<br/>
            XML 데이터는 DataSet으로 처리되므로 DataSet이 인식할 수 있는 형태이어야 하고
            XML 데이터의 첫번째 열은 카테고리(그룹), 두번째 열은 코드, 세번째 열은 메세지, 네번째 열은 캡션으로 인식합니다.
            </remarks>
            <example>
            	<code lang="XML" description="Framework Configuration 설정">
            &lt;messageSection defaultProvider="PMS"&gt;
                &lt;provider name="PMS" type="TheOne.Text.UrlMessageProvider"&gt;
                    &lt;parameter key="Url" value="http://localhost/MessagePage.aspx" /&gt;
                &lt;/provider&gt;
            &lt;/messageSection&gt;
            </code>
            </example>
        </member>
        <member name="M:TheOne.Text.MessageManager.GetMessage(System.String)">
            <summary>
            지정된 메시지 코드의 메시지를 반환한다.
            </summary>
            <param name="code">메시지 코드</param>
            <returns>메시지 문자열을 반환한다.</returns>
        </member>
        <member name="M:TheOne.Text.MessageManager.GetMessage(System.String,System.String@)">
            <summary>
            지정된 메시지 코드의 메시지와 메시지 박스 캡션을 반환한다.
            </summary>
            <param name="code">메시지 코드</param>
            <param name="caption">반환할 메시지 박스 캡션</param>
            <returns>메시지 문자열을 반환한다.</returns>
        </member>
        <member name="M:TheOne.Text.MessageManager.GetMessage(System.String,System.String,System.String@)">
            <summary>
            지정된 언어, 코드의 메시지와 메시지 박스 캡션을 반환한다.
            </summary>
            <param name="language">언어코드(ko, en, zh)</param>
            <param name="code">메시지 코드</param>
            <param name="caption">반환할 메시지 박스 캡션</param>
            <returns>메시지 문자열을 반환한다.</returns>
        </member>
        <member name="M:TheOne.Text.MessageManager.GetMessage(System.String,System.String,System.String,System.String@)">
            <summary>
            지정된 메시지 코드의 메시지와 메시지 박스 캡션을 반환한다.
            </summary>
            <param name="name">공급자의 이름</param>
            <param name="language">언어코드(ko, en, zh)</param>
            <param name="code">메시지 코드</param>
            <param name="caption">반환할 메시지 박스 캡션</param>
            <returns>메시지 문자열을 반환한다.</returns>
        </member>
        <member name="T:TheOne.Text.StdMessageInfo">
            <summary>
            메시지 정보를 담기위한 메시지 정보 객체
            </summary>
        </member>
        <member name="T:TheOne.Security.DefaultSecurityContext">
            <summary>
            권한 검사를 수행하는 기본 권한 검사 객체로서
            모든 권한을 허용한다.
            </summary>
            <remarks>
            <b>CRUD</b> 권한에 대해 모두 허용하는 보안 컨텍스트 객체로서 개발시에 테스트
            용도로 사용하거나, 권한 검사를 하지 않는 경우에 사용되는 권한 컨텍스트 이다.
            </remarks>
        </member>
        <member name="M:TheOne.Security.DefaultSecurityContext.#ctor">
            <summary>
            모든 권한을 허용하는 기본 <see cref="T:TheOne.Security.DefaultSecurityContext"/>클래스의 새 인스턴스를 초기화한다.
            </summary>
        </member>
        <member name="T:TheOne.Resources.ResourceProviderFactory">
            <summary>
            NeoDEEX 구성파일에 정의된 리소스 공급자의 인스턴스를 생성하고 관리하는 클래스이다.
            </summary>
        </member>
        <member name="M:TheOne.Resources.ResourceProviderFactory.CreateResourceProvider">
            <summary>
            NeoDEEX 구성파일의 resourceSection섹션의 defaultProvider 속성에 설정된 이름으로 <see cref="T:TheOne.Resources.ResourceProvider"/>의 인스턴스를 만들고 반환한다.
            </summary>
            <returns><see cref="T:TheOne.Resources.ResourceProvider"/> 객체를 반환한다.</returns>
        </member>
        <member name="M:TheOne.Resources.ResourceProviderFactory.CreateResourceProvider(System.String)">
            <summary>
            NeoDEEX 구성파일에 정의된 공급자의 이름을 사용하여 <see cref="T:TheOne.Resources.ResourceProvider"/>의 인스턴스를 만들고 반환한다.
            </summary>
            <param name="providerName">공급자 이름</param>
            <returns><see cref="T:TheOne.Resources.ResourceProvider"/> 객체를 반환한다.</returns>
        </member>
        <member name="T:TheOne.Net.FileHandlerTick">
            <summary>업로드/다운로드 할 때 발생 이벤트 대리자</summary>
            <param name="fileName">업로드 파일 명</param>
            <param name="index">업로드 크기(byte)</param>
        </member>
        <member name="T:TheOne.Net.HttpFileManager">
            <summary>
            Http 프로토콜을 통한 업로드/다운로드 및 원격 파일 관리 클래스 이다.
            </summary>
            <example>
            	<para>&lt;generalSection&gt;</para>
            	<para>&lt;!-- 기본 파일 처리 주소 --&gt;</para>
            	<para>&lt;add name="FileHandlerUrl"
                value="http://localhost/FileHandler.axd/&gt;</para>
            	<para>&lt;!-- TMP System 파일 처리 주소 --&gt;</para>
            	<para>&lt;add name="TMPFileHandlerUrl"
                value="http://localhost/FileHandler.axd/&gt;</para>
            	<para>&lt;/generalSection&gt;</para>
            	<para></para>
            	<para>OneUploader.SystemID 속성이 빈 값인 경우 "기본 파일 처리 주소"를 사용한다.</para>
            	<para>OneUploader.SystemID 속성이 "TMP" 인 경우 아래의 "TMP System 파일 처리 주소"를 사용한다.</para>
            </example>
        </member>
        <member name="F:TheOne.Net.HttpFileManager.CMDMOVE">
            <remarks><para>파일/폴더 이동 명령</para></remarks>
        </member>
        <member name="F:TheOne.Net.HttpFileManager.CMDCOPY">
            <remarks><para>파일/폴더 복사 명령</para></remarks>
        </member>
        <member name="F:TheOne.Net.HttpFileManager.CMDDELETE">
            <remarks><para>파일/폴더 삭제 명령</para></remarks>
        </member>
        <member name="F:TheOne.Net.HttpFileManager.CMDUPLOAD">
            <remarks><para>파일 업로드 명령</para></remarks>
        </member>
        <member name="F:TheOne.Net.HttpFileManager.CMDDOWNLOAD">
            <remarks><para>파일 다운로드 명령</para></remarks>
        </member>
        <member name="F:TheOne.Net.HttpFileManager.CMDGETINFO">
            <remarks><para>파일/폴더 정보 반환 명령</para></remarks>
        </member>
        <member name="F:TheOne.Net.HttpFileManager.CMDRENAME">
            <remarks><para>파일/폴더 이름 바꾸기 명령</para></remarks>
        </member>
        <member name="F:TheOne.Net.HttpFileManager.CMDGETLIST">
            <remarks><para>파일/폴더 파일 리스트 명령</para></remarks>
        </member>
        <member name="F:TheOne.Net.HttpFileManager.DIRTYPE">
            <summary>
            
            </summary>
        </member>
        <member name="F:TheOne.Net.HttpFileManager.FILETYPE">
            <summary>
            
            </summary>
        </member>
        <member name="F:TheOne.Net.HttpFileManager.CHUNK_SIZE">
            <summary>
            파일 업로드시에 한번에 전송할 파일의 크키를 설정하거나 가져온다.
            </summary>
            <remarks>
            파일 업로드시에 일정 크기 단위로 파일을 전송하는데, 한번에 전송할 파일의 크키를 정의한다.
            기본값은 64KB 이다.
            </remarks>
        </member>
        <member name="M:TheOne.Net.HttpFileManager.StopExecution">
            <summary>
            파일 업로드/다운로드 실행 중지
            </summary>
        </member>
        <member name="M:TheOne.Net.HttpFileManager.CheckExtension(System.String)">
            <returns>true 가능한 확장자, false 가능하지 않은 확장자</returns>
            <summary>
            	<para>파일 확장자 체크 합니다.</para>
            	<para>EXE, DLL, VSB 등 실행 파일은 업로드 불가 합니다.</para>
            </summary>
            <param name="Extension">예) test.txt 는 .txt로 비교한다.</param>
        </member>
        <member name="M:TheOne.Net.HttpFileManager.GetFileHandleURL(System.String)">
            <summary>Server의 File Handler URL을 Config 파일로 부터 읽는다.</summary>
            <returns>파일 Handler URL을 반환 한다.</returns>
            <param name="systemid">
            시스템 별 Handler의 URL을 다를 수 있으므로 설정 한다.<br/>
            기본값 사용시 string.Empty 를 넘겨 준다
            </param>
        </member>
        <member name="M:TheOne.Net.HttpFileManager.TempCopy(System.String)">
            <summary>
            	<para>임시폴더로 파일을 복사한다.</para>
            	<para>파일이 읽기전용이거나 열려있는상태에서 업로드 할 경우에 파일락을 피하기 위한 방법으로 호출 된다.</para>
            </summary>
            <returns>복사된 파일 전체 경로명</returns>
            <param name="orgPath">원본 파일명, 전체경로명이어야 함 (예:D:\Test\test.xls)</param>
        </member>
        <member name="M:TheOne.Net.HttpFileManager.MakeUri(System.String)">
            <summary>
            Url 생성
            </summary>
            <param name="uriString"></param>
            <returns></returns>
        </member>
        <member name="M:TheOne.Net.HttpFileManager.MoveFile(System.String,System.String,System.String,System.String,System.String)">
            <summary>서버 파일을 이동 시킨다.</summary>
            <param name="srcSubUrl">원본 파일 상대 경로</param>
            <param name="srcFileName">원본 파일 명</param>
            <param name="destSubUrl">대상 파일 상대 경로</param>
            <param name="destFileName">대상 파일 명(원본과 다르게 설정 가능)</param>
            <param name="systemid">시스템 아이디 (기본값을 사용시 String.Empty를 설정)</param>
        </member>
        <member name="M:TheOne.Net.HttpFileManager.MoveDirectory(System.String,System.String,System.String)">
            <summary>서버 폴더 이동</summary>
            <param name="srcSubUrl">원본 폴더 상대 경로</param>
            <param name="destSubUrl">대상 폴더 상대 경로</param>
            <param name="systemid">시스템 아이디(기본값 사용시 String.Empty 사용)</param>
        </member>
        <member name="M:TheOne.Net.HttpFileManager.CopyFile(System.String,System.String,System.String,System.String,System.String)">
            <summary>서버 파일 복사</summary>
            <param name="srcSubUrl">원본 파일 상대 경로</param>
            <param name="srcFileName">원본 파일 명</param>
            <param name="destSubUrl">대상 파일 상대 경로</param>
            <param name="destFileName">대상 파일 명(원본과 달라도 무관)</param>
            <param name="systemid">시스템 아이디(기본값 설정시 String.Empty 설정)</param>
        </member>
        <member name="M:TheOne.Net.HttpFileManager.CopyDirectory(System.String,System.String,System.String)">
            <summary>
            	<para>서버 폴더 복사</para>
            	<para>(하위 폴더 동일 함께 복사 함)</para>
            </summary>
            <param name="srcSubUrl">원본 폴더 상대 경로</param>
            <param name="destSubUrl">대상 폴더 상대 경로</param>
            <param name="systemid">시스템 아이디(기본값 설정시 String.Empty 설정)</param>
        </member>
        <member name="M:TheOne.Net.HttpFileManager.DeleteFile(System.String,System.String,System.String)">
            <summary>서버 파일 삭제</summary>
            <param name="subUrl">삭제 대상 파일 상대 경로</param>
            <param name="fileName">삭제 대상 파일 명</param>
            <param name="systemid">시스템 아이디(기본값 설정시 String.Empty 설정)</param>
        </member>
        <member name="M:TheOne.Net.HttpFileManager.DeleteDirectory(System.String,System.String)">
            <summary>서버 폴더 삭제</summary>
            <param name="subUrl">삭제 대상 폴더 상대 경로</param>
            <param name="systemid">시스템 아이디(기본값 설정시 String.Empty 설정)</param>
        </member>
        <member name="M:TheOne.Net.HttpFileManager.RenameFile(System.String,System.String,System.String,System.String)">
            <summary>서버 파일명 변경</summary>
            <param name="subUrl">파일 상대 경로</param>
            <param name="srcFileName">원본 파일 명</param>
            <param name="destFileName">대상 파일 명</param>
            <param name="systemid">시스템 아이디(기본값 설정시 String.Empty 설정)</param>
        </member>
        <member name="M:TheOne.Net.HttpFileManager.RenameDirectory(System.String,System.String,System.String)">
            <summary>서버 폴더 명 변경</summary>
            <param name="srcSubUrl">원본 폴더 상대 경로</param>
            <param name="destSubUrl">대상 폴더 상대 경로</param>
            <param name="systemid">시스템 아이디(기본값 설정시 String.Empty 설정)</param>
        </member>
        <member name="M:TheOne.Net.HttpFileManager.GetFileInfo(System.String,System.String,System.String)">
            <summary><para>서버 파일 정보를 가져 온다.</para></summary>
            <param name="subUrl">서버 상대 경록</param>
            <param name="fileName">파일명</param>
            <param name="systemid">시스템 아이디(기본값 설정시 String.Emply 설정)</param>
        </member>
        <member name="M:TheOne.Net.HttpFileManager.GetDirectoryInfo(System.String,System.String)">
            <summary>
            디렉토리 정보
            </summary>
            <param name="subUrl">SubUrl</param>
            <param name="systemid">System 분류 코드</param>
            <returns>디렉토리 정보 반환</returns>
        </member>
        <member name="M:TheOne.Net.HttpFileManager.GetFileListFromDir(System.String,System.String)">
            <summary>서버 디렉토리 하위 폴더의 파일의 가져 온다.</summary>
            <param name="subUrl">상대 경로</param>
            <param name="systemid">시스템 아이디(기본값 설정시 String.Empty 설정)</param>
        </member>
        <member name="M:TheOne.Net.HttpFileManager.GetDirList(System.String,System.String)">
            <summary>서버 디렉토리 하위 폴더의 파일의 가져 온다.</summary>
            <param name="subUrl">상대 경로</param>
            <param name="systemid">시스템 아이디(기본값 설정시 String.Empty 설정)</param>
        </member>
        <member name="M:TheOne.Net.HttpFileManager.DownloadFile(System.String,System.String,System.Int64,System.String,System.Int64,System.String)">
            <summary>서버 파일 로컬 다운로드</summary>
            <param name="subUrl">상대 경로</param>
            <param name="fileName">파일 명</param>
            <param name="index">이어 받기를 위한 값 다운 로드 시작 값</param>
            <param name="saveFileFullPath">저장 파일 전체 경로</param>
            <param name="fileSize">전체 파일 크기</param>
            <param name="systemid">시스템 아이디(기본값 설정시 String.Empty 설정)</param>
        </member>
        <member name="M:TheOne.Net.HttpFileManager.DownloadToImage(System.String,System.String,System.Int32,System.Int32,System.String,System.Boolean,System.String)">
            <summary>
            	<para>서버 이미지 파일 다운로드</para>
            	<para>로컬 디스크에 저장 하지 않음</para>
            </summary>
            <param name="subUrl">파일 상대 경로</param>
            <param name="fileName">파일 명</param>
            <param name="imageWidth">이미지 폭</param>
            <param name="imageHeight">이미지 높이</param>
            <param name="fileSize">파일 전체 크기</param>
            <param name="AllowAutoSize">이미지 크기 자동 조절</param>
            <param name="systemid">시스템 아이디(기본값 설정시 string.Empty 설정)</param>
        </member>
        <member name="M:TheOne.Net.HttpFileManager.UploadFile(System.String,System.String,System.String,System.Int64,System.String)">
            <summary>서버로 파일 업로드</summary>
            <param name="subUrl">서버 상대 경로</param>
            <param name="fileName">업로드 파일 명</param>
            <param name="fileFullPath">업로 대상 파일 전체 경로</param>
            <param name="readStartIndex">업로 읽기 시작 위치</param>
            <param name="systemid">시스템 아이디(기본값 설정시 String.Empty 설정)</param>
        </member>
        <member name="E:TheOne.Net.HttpFileManager.FileHandlerTickEvent">
            <summary><para>파일 업로드/다운로드 틱 이벤트</para></summary>
            <remarks>4096 byte 씩 분할 업로드/다운로드 하는 경우 4096 byte 업로드 후 이벤트를 발생 한다.</remarks>
        </member>
        <member name="P:TheOne.Net.HttpFileManager.NoUploadExtensions">
            <summary>
            	<para>업로드 할 수 없는 파일 확장자 리스트<br/>
                (exe, dll, aspx, ... )</para>
            </summary>
        </member>
        <member name="T:TheOne.Security.CryptoHelper">
            <summary>
            암호화/복호화를 수행하기 위한 Helper 메서드를 제공한다.
            </summary>
        </member>
        <member name="F:TheOne.Security.CryptoHelper._KeyProvider">
            <summary>
            Key/IV, Symmetric 알고리즘을 제공하는 Provider
            </summary>
        </member>
        <member name="F:TheOne.Security.CryptoHelper._Algorithm">
            <summary>
            Symmetric 알고리즘
            </summary>
        </member>
        <member name="F:TheOne.Security.CryptoHelper._Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="F:TheOne.Security.CryptoHelper._IV">
            <summary>
            IV
            </summary>
        </member>
        <member name="M:TheOne.Security.CryptoHelper.#cctor">
            <summary>
            <see cref="T:TheOne.Security.CryptoHelper"/> 정적클래스의 새 인스턴스를 초기화한다.
            </summary>
        </member>
        <member name="M:TheOne.Security.CryptoHelper.EncryptBase64(System.String)">
            <summary>
            데이터를 암호화 하고 그 결과를 <b>Base64</b>로 인코딩 하여 반환한다.
            </summary>
            <param name="inputText">암호화를 위한 문자열</param>
            <returns>암호화된 <b>Base64</b> 문자열을 반환한다.</returns>
        </member>
        <member name="M:TheOne.Security.CryptoHelper.EncryptBase64(System.Byte[])">
            <summary>
            데이터를 암호화 하고 그 결과를 <b>Base64</b>로 인코딩 하여 반환한다.
            </summary>
            <param name="inputBytes">암호화를 위하 데이터 배열</param>
            <returns>암호화된 <b>Base64</b> 문자열을 반환한다.</returns>
        </member>
        <member name="M:TheOne.Security.CryptoHelper.Encrypt(System.String)">
            <summary>
            데이터를 암호화 하고 그 결과를 데이터 배열로 반환한다.
            </summary>
            <param name="inputText">암호화를 위한 문자열</param>
            <returns>암호화된 데이터 배열을 반환한다.</returns>
        </member>
        <member name="M:TheOne.Security.CryptoHelper.Encrypt(System.Byte[])">
            <summary>
            데이터를 암호화 하고 그 결과를 데이터 배열로 반환한다.
            </summary>
            <param name="inputBytes">암호화를 위한 데이터 배열.</param>
            <returns>암호화된 데이터 배열을 반환한다.</returns>
        </member>
        <member name="M:TheOne.Security.CryptoHelper.EncryptObject(System.Object)">
            <summary>
            임의의 객체를 암호화 한다.
            </summary>
            <param name="data">암호화를 위한 객체</param>
            <returns>암호화된 데이터 배열을 반환한다.</returns>
        </member>
        <member name="M:TheOne.Security.CryptoHelper.Encrypt(System.IO.Stream,System.IO.Stream)">
            <summary>
            <see cref="T:System.IO.Stream"/>을 암호화 하고 그 결과를 <see cref="T:System.IO.Stream"/>으로 생성한다.
            </summary>
            <param name="inputStream">암호화를 위한 <see cref="T:System.IO.MemoryStream"/></param>
            <param name="outputStream">암호화된 결과를 위한 <see cref="T:System.IO.MemoryStream"/></param>
            <returns>암호화 된 MemoryStream</returns>
        </member>
        <member name="M:TheOne.Security.CryptoHelper.DecryptText(System.String)">
            <summary>
            데이터를 복호화 하고 그 결과를 문자열로 반환한다.
            </summary>
            <param name="inputText">복호화를 위한 문자열</param>
            <returns>복호화된 문자열을 반환한다.</returns>
        </member>
        <member name="M:TheOne.Security.CryptoHelper.DecryptText(System.Byte[])">
            <summary>
            데이터를 복호화 하고 그 결과를 문자열로 반환한다.
            </summary>
            <param name="inputBytes">복호화를 위한 데이터 배열</param>
            <returns>복호화된 문자열</returns>
        </member>
        <member name="M:TheOne.Security.CryptoHelper.Decrypt(System.String)">
            <summary>
            데이터를 복호화 하고 그 결과를 데이터 배열로 반환한다.
            </summary>
            <param name="inputText">복호화를 위한 문자열</param>
            <returns>복호화된 데이터 배열을 반환한다.</returns>
        </member>
        <member name="M:TheOne.Security.CryptoHelper.Decrypt(System.Byte[])">
            <summary>
            데이터를 복호화 하고 그 결과를 데이터 배열로 반환한다.
            </summary>
            <param name="inputBytes">복호화를 위한 데이터 배열</param>
            <returns>복호화된 데이터 배열을 반환한다.</returns>
        </member>
        <member name="M:TheOne.Security.CryptoHelper.DecryptObject(System.Byte[])">
            <summary>
            <see cref="M:TheOne.Security.CryptoHelper.EncryptObject(System.Object)"/>에 의해 암호화된 데이터를 복호화 한다.
            </summary>
            <param name="inputBytes">복호화를 위한 데이터 배열</param>
            <returns>복호화되어 재구성된 <see cref="T:System.Object"/>객체를 반환한다.</returns>
        </member>
        <member name="M:TheOne.Security.CryptoHelper.Decrypt(System.IO.Stream,System.IO.Stream)">
            <summary>
            <see cref="T:System.IO.Stream"/> 내용을 복호화하여 그 결과를 <see cref="T:System.IO.Stream"/>에 기록한다.
            </summary>
            <param name="inputStream">암호화된 내용을 읽을 <see cref="T:System.IO.MemoryStream"/></param>
            <param name="outputStream">복호환된 내용을 기록할 <see cref="T:System.IO.MemoryStream"/></param>
        </member>
        <member name="M:TheOne.Security.CryptoHelper.Transform(System.Security.Cryptography.ICryptoTransform,System.IO.MemoryStream,System.IO.MemoryStream)">
            <summary>
            암호화/복호화 변환 수행한다.
            </summary>
            <param name="transform">암호화 변환 작업을 수행하기 위한 인터페이스</param>
            <param name="inputStream">변환을 위한 MemoryStream</param>
            <param name="outputStream">암호화 결과를 기록하기 위한 메모리 스트림</param>
            <returns>변환된 MemoryStream</returns>
        </member>
        <member name="M:TheOne.Security.CryptoHelper.GetCryptoTransform(System.Boolean)">
            <summary>
            대칭키 암호화 알고리즘의 Encryptor또는 Decryptor를 반환한다.
            </summary>
            <param name="isEncrypt">암/복호화 여부</param>
            <returns>ICryptoTransform</returns>
        </member>
        <member name="P:TheOne.Security.CryptoHelper.Key">
            <summary>
            키(Key)
            </summary>
        </member>
        <member name="P:TheOne.Security.CryptoHelper.IV">
            <summary>
            벡터(IV)
            </summary>
        </member>
        <member name="P:TheOne.Security.CryptoHelper.Algorithm">
            <summary>
            Symmetric 알고리즘
            </summary>
        </member>
        <member name="P:TheOne.Security.CryptoHelper.KeyProvider">
            <summary>
            <b>Key/IV</b>, <b>Symmetric</b> 알고리즘을 제공하는 공급자를 가져오거나 설정한다.
            </summary>
        </member>
        <member name="T:TheOne.Resources.UrlResourceStrings">
            <summary>
            <see cref="T:TheOne.Resources.UrlResourceProvider"/>에서 사용되는 매개변수 아이템을 나타낸다.
            </summary>
        </member>
        <member name="P:TheOne.Resources.UrlResourceStrings.Strings">
            <summary>
            URL 리소스 공급자의 매개변수 아이템의 컬렉션을 가져오거나 설정한다.
            </summary>
        </member>
        <member name="T:TheOne.Resources.UrlResourceStrings.UrlResourceStringItem">
            <summary>
            URL 리소스 공급자의 매개변수 아이템을 나타낸다.
            </summary>
        </member>
        <member name="M:TheOne.Resources.UrlResourceStrings.UrlResourceStringItem.#ctor">
            <summary>
            <see cref="T:TheOne.Resources.UrlResourceStrings.UrlResourceStringItem"/>클래스의 새 인스턴스를 초기화한다.
            </summary>
        </member>
        <member name="M:TheOne.Resources.UrlResourceStrings.UrlResourceStringItem.#ctor(System.String,System.String)">
            <summary>
            지정된 이름과 값을 사용하여 <see cref="T:TheOne.Resources.UrlResourceStrings.UrlResourceStringItem"/>클래스의 새 인스턴스를 초기화한다.
            </summary>
            <param name="name">이름</param>
            <param name="value">값</param>
        </member>
        <member name="P:TheOne.Resources.UrlResourceStrings.UrlResourceStringItem.Name">
            <summary>
            리소스의 이름을 가져오거나 설정한다.
            </summary>
        </member>
        <member name="P:TheOne.Resources.UrlResourceStrings.UrlResourceStringItem.Value">
            <summary>
            리소스 공급자에게 전달되는 매개변수의 값을 가져오거나 설정한다.
            </summary>
        </member>
        <member name="T:TheOne.GlobalConstants">
            <summary>
            NeoDEEX Frameowork내부에서 사용되는 상수를 정의한다.
            </summary>
        </member>
        <member name="T:TheOne.Configuration.ConfigurationChangingEventArgs">
            <summary>
            <see cref="!:ConfigurationManager.ConfigurationChanging"/> 이벤트를 처리할 메서드를 나타낸다.
            </summary>
            <param name="sender">
            이벤트 소스
            </param>
            <param name="e">
            <para>이벤트 데이터가 들어있는 <see cref="T:TheOne.Configuration.ConfigurationChangingEventArgs"/> 객체</para>
            </param>
        </member>
        <member name="P:TheOne.Configuration.ConfigurationChangingEventArgs.ConfigFileName">
            <summary>
            NeoDEEX 구성 파일 경로를 가져온다.
            </summary>
        </member>
    </members>
</doc>
