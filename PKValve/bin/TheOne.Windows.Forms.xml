<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TheOne.Windows.Forms</name>
    </assembly>
    <members>
        <member name="T:TheOne.Windows.Forms.MsgBox">
            <summary>
            표준 메시지 박스를 제어하는 클래스
            </summary>
            <remarks>
            <para>MsgBox 클래스는 닷넷 프레임워크의 MessageBox 클래스를 대체할 수 있는 클래스로써
            메시지 박스를 표시하는데 사용한다. MsgBox 클래스는 윈도우 플랫폼에 상관없이 일관된
            UI를 제시할 수 있으며 Console.Write 메쏘드 처럼 포맷팅된 문자열을 표시할 수 있다.</para>
            <para>MsgBox 클래스는 <see cref="T:TheOne.Windows.Forms.MsgCodeBox"/>에 의해서도 사용되는 클래스로써
            다국어 메시지를 코드를 통해 관리하여 메시지를 표시하고자 하는 경우에 사용할 수 있다.</para>
            <para>MsgBox 클래스가 표시할 메시지 박스 다이얼로그는 <see cref="T:TheOne.Windows.Forms.Internal.MessageBoxForm"/> 클래스에
            의해 구현된다. 이 폼 클래스 대신 다른 UI를 가진 메시지 박스 폼을 사용하고자 한다면
            <see cref="P:TheOne.Windows.Forms.MsgBox.FormFactory"/> 정적 속성을 설정하면 된다.</para>
            </remarks>
        </member>
        <member name="F:TheOne.Windows.Forms.MsgBox.StdCaption">
            <summary>
            메시지 박스 Caption이 주어지지 않을 때 사용할 기본 캡션 메시지
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.MsgBox.Show(System.String)">
            <summary>
            지정된 텍스트가 있는 표준 메시지 박스를 표시한다..
            </summary>
            <param name="message">메시지</param>
            <returns>메시지 박스 버튼 선택 결과</returns>
            <remarks>
            기본적으로 메시지 상자에는 확인 단추가 표시된다.
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.MsgBox.Show(System.String,System.String)">
            <summary>
            지정된 텍스트와 캡션이 있는 표준 메시지 박스를 표시한다.
            </summary>
            <param name="message">메시지</param>
            <param name="caption">메시지 박스 캡션</param>
            <returns>메시지 박스 버튼 선택 결과</returns>
            <remarks>
            기본적으로 메시지 상자에는 확인 단추가 표시된다.
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.MsgBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons)">
            <summary>
            지정된 텍스트, 캡션, 버튼이 있는 표준 메시지 박스를 표시한다.
            </summary>
            <param name="message">메시지</param>
            <param name="caption">메시지 박스 캡션</param>
            <param name="buttons">메시지 박스 버튼</param>
            <returns>메시지 박스 버튼 선택 결과</returns>
        </member>
        <member name="M:TheOne.Windows.Forms.MsgBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,TheOne.Windows.Forms.ImageKinds)">
            <summary>
            지정된 메시지, 캡션, 버튼, 이미지가 있는 표준 메시지 박스를 표시한다.
            </summary>
            <param name="message">메시지</param>
            <param name="caption">메시지 박스 캡션</param>
            <param name="buttons">메시지 박스 버튼</param>
            <param name="imageKind">메시지 박스에 표시할 이미지 종류</param>
            <returns>메시지 박스 버튼 선택 결과</returns>
        </member>
        <member name="M:TheOne.Windows.Forms.MsgBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Drawing.Image)">
            <summary>
            지정된 메시지, 캡션, 버튼, 사용자 정의 이미지가 있는 표준 메시지 박스를 표시한다.
            </summary>
            <param name="message">메시지</param>
            <param name="caption">메시지 박스 캡션</param>
            <param name="buttons">메시지 박스 버튼</param>
            <param name="image">메시지 박스에 표시할 이미지 객체</param>
            <returns>메시지 박스 버튼 선택 결과</returns>
        </member>
        <member name="M:TheOne.Windows.Forms.MsgBox.Show(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,TheOne.Windows.Forms.ImageKinds)">
            <summary>
            지정된 메시지, 캡션, 버튼, 이미지가 있는 표준 메시지 박스를 지정된 객체 앞에 표시한다.
            </summary>
            <param name="owner">메시지 박스를 소유하는 부모 윈도우</param>
            <param name="message">메시지</param>
            <param name="caption">메시지 박스 캡션</param>
            <param name="buttons">메시지 박스 버튼</param>
            <param name="imageKind">메시지 박스에 표시할 이미지 종류</param>
            <returns>메시지 박스 버튼 선택 결과</returns>
        </member>
        <member name="M:TheOne.Windows.Forms.MsgBox.Show(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Drawing.Image)">
            <summary>
            지정된 메시지, 캡션, 버튼, 사용자 정의 이미지가 있는 표준 메시지 박스를 지정된 객체 앞에 표시한다.
            </summary>
            <param name="owner">메시지 박스를 소유하는 부모 윈도우</param>
            <param name="message">메시지</param>
            <param name="caption">메시지 박스 캡션</param>
            <param name="buttons">메시지 박스 버튼</param>
            <param name="image">메시지 박스에 표시할 이미지 객체</param>
            <returns>메시지 박스 버튼 선택 결과</returns>
            <remarks>
            owner 매개 변수를 사용하여 IWin32Window 인터페이스를 구현하는 특정 개체를 지정할 수 있으며, 
            이 개체는 나중에 대화 상자의 최상위 창 및 소유자의 역할을 한다. 
            메시지 상자는 모달 폼의 개체 이외에는 키보드나 마우스를 사용하여 입력할 수 없는 모달 대화 상자이다. 
            프로그램에서는 다른 폼에 입력하기 전에 보통 사용자의 일부 동작에 대한 응답으로 모달 폼을 
            숨기거나 닫아야 한다.
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.MsgBox.Show(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,TheOne.Windows.Forms.ImageKinds,System.Drawing.Image,System.Object)">
            <summary>
            지정된 메시지, 캡션, 버튼, 이미지가 있는 표준 메시지 박스를 지정된 객체 앞에 표시한다.
            </summary>
            <param name="owner">메시지 박스를 소유하는 부모 윈도우</param>
            <param name="message">메시지</param>
            <param name="caption">메시지 박스 캡션</param>
            <param name="buttons">메시지 박스 버튼</param>
            <param name="imageKind">메시지 박스에 표시할 이미지 종류</param>
            <param name="image">메시지 박스에 표시할 커스텀 이미지 객체</param>
            <param name="data">메시지 박스에 전달하고자 하는 추가 데이터</param>
            <returns>메시지 박스 버튼 선택 결과</returns>
            <remarks>
            owner 매개 변수를 사용하여 IWin32Window 인터페이스를 구현하는 특정 개체를 지정할 수 있으며, 
            이 개체는 나중에 대화 상자의 최상위 창 및 소유자의 역할을 한다. 
            메시지 상자는 모달 폼의 개체 이외에는 키보드나 마우스를 사용하여 입력할 수 없는 모달 대화 상자이다. 
            프로그램에서는 다른 폼에 입력하기 전에 보통 사용자의 일부 동작에 대한 응답으로 모달 폼을 
            숨기거나 닫아야 한다.
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.MsgBox.ShowFormat(System.String,System.String,System.Object[])">
            <summary>
            포매팅 된 문자열, 캡션을 메시지 박스에 표시한다.
            </summary>
            <param name="format">메시지 포맷</param>
            <param name="caption">메시지 박스 캡션</param>
            <param name="args">포매팅 매개변수</param>
            <returns>메시지 박스 버튼 선택 결과</returns>
        </member>
        <member name="M:TheOne.Windows.Forms.MsgBox.ShowFormat(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Object[])">
            <summary>
            포매팅 된 문자열, 캡션, 버튼을 메시지 박스에 표시한다.
            </summary>
            <param name="format">메시지 포맷</param>
            <param name="caption">메시지 박스 캡션</param>
            <param name="buttons">메시지 박스 버튼</param>
            <param name="args">포매팅 매개변수</param>
            <returns>메시지 박스 버튼 선택 결과</returns>
        </member>
        <member name="M:TheOne.Windows.Forms.MsgBox.ShowFormat(System.String,System.String,System.Windows.Forms.MessageBoxButtons,TheOne.Windows.Forms.ImageKinds,System.Object[])">
            <summary>
            포매팅 된 문자열, 캡션, 버튼, 이미지를 메시지 박스에 표시한다.
            </summary>
            <param name="format">메시지 포맷</param>
            <param name="caption">메시지 박스 캡션</param>
            <param name="buttons">메시지 박스 버튼</param>
            <param name="imageKind">메시지 박스에 표시할 이미지 종류</param>
            <param name="args">포매팅 매개변수</param>
            <returns>메시지 박스 버튼 선택 결과</returns>
        </member>
        <member name="M:TheOne.Windows.Forms.MsgBox.ShowFormat(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,TheOne.Windows.Forms.ImageKinds,System.Object[])">
            <summary>
            포매팅 된 문자열, 캡션, 버튼, 이미지를 메시지 박스에 표시한다.
            </summary>
            <param name="owner">메시지 박스를 소유하는 부모 윈도우</param>
            <param name="format">메시지 포맷</param>
            <param name="caption">메시지 박스 캡션</param>
            <param name="buttons">메시지 박스 버튼</param>
            <param name="imageKind">메시지 박스에 표시할 이미지 종류</param>
            <param name="args">포매팅 매개변수</param>
            <returns>메시지 박스 버튼 선택 결과</returns>
        </member>
        <member name="M:TheOne.Windows.Forms.MsgBox.ShowFormat(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Drawing.Image,System.Object[])">
            <summary>
            포매팅 된 문자열, 캡션, 버튼, 사용자 정의 이미지를 메시지 박스에 표시한다.
            </summary>
            <param name="format">메시지 포맷</param>
            <param name="caption">메시지 박스 캡션</param>
            <param name="buttons">메시지 박스 버튼</param>
            <param name="imageIcon">메시지 박스에 표시할 사용자 정의 이미지</param>
            <param name="args">포매팅 매개변수</param>
            <returns>메시지 박스 버튼 선택 결과</returns>
        </member>
        <member name="M:TheOne.Windows.Forms.MsgBox.ShowFormat(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Drawing.Image,System.Object[])">
            <summary>
            포매팅 된 문자열, 캡션, 버튼, 사용자 정의 이미지를 메시지에 표시한다.
            </summary>
            <param name="owner">메시지 박스를 소유하는 부모 윈도우</param>
            <param name="format">메시지 포맷</param>
            <param name="caption">메시지 박스 캡션</param>
            <param name="buttons">메시지 박스 버튼</param>
            <param name="imageIcon">메시지 박스에 표시할 사용자 정의 이미지</param>
            <param name="args">포매팅 매개변수</param>
            <returns>메시지 박스 버튼 선택 결과</returns>
        </member>
        <member name="P:TheOne.Windows.Forms.MsgBox.FormFactory">
            <summary>
            메시지 박스 폼을 생성하는 팩토리 객체
            </summary>
            <remarks>
            	<para>FormFactory 속성에 사용자 정의 팩토리 객체를 설정함으로써
            프레임워크에서 제공하는 메시지 박스 폼(<see cref="T:TheOne.Windows.Forms.Internal.MessageBoxForm"/>) 대신
            사용자 정의 메시지 박스 폼을 사용할 수 있다. 사용자 정의 팩토리 객체는
            <see cref="T:TheOne.Windows.Forms.Internal.MessageBoxFormFactory"/> 클래스에서
            파생된 클래스의 인스턴스로써 <see cref="M:TheOne.Windows.Forms.Internal.MessageBoxFormFactory.CreateMessageBoxForm(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,TheOne.Windows.Forms.ImageKinds,System.Drawing.Image,System.Object)"/> 메쏘드를
            오버라이드 하여 사용자 정의 메시지 박스 폼을 프레임워크에게 제공하면 된다.</para>
            </remarks>
            <example>
            	<code lang="CS" title="메시지 박스 커스터 마이징" description="다음 예제는 메시지 박스 폼 팩토리 객체를 작성하고 FormFactory 속성에 설정함으로써 커스터 마이징이 가능하다.">
            // startup code such as Main() or a contructor of MenuControl
            MsgBox.FormFactory = new CustomFormFactory();
             
            // custom factory class
            class CustomFormFactory : TheOne.Windows.Forms.Internal.MessageBoxFormFactory
            {
                public override Form CreateMessageBoxForm(IWin32Window owner, string message, string caption, 
                                                        MessageBoxButtons buttons, ImageKinds imageKind, 
                                                        Image image, object data)
                {
                    CustomMessageBoxForm frm = new CustomMessageBoxForm();
                    frm.Message = message;
                    frm.Text = caption;
             
                    // other settings...
             
                    return frm;
                }
            }
            </code>
            </example>
        </member>
        <member name="T:TheOne.Windows.Forms.ImageKinds">
            <summary>
            표준 메세지 박스의 이미지 종류
            </summary>
        </member>
        <member name="F:TheOne.Windows.Forms.ImageKinds.Question">
            <summary>
            의문
            </summary>
        </member>
        <member name="F:TheOne.Windows.Forms.ImageKinds.Warnning">
            <summary>
            경고
            </summary>
        </member>
        <member name="F:TheOne.Windows.Forms.ImageKinds.Information">
            <summary>
            정보
            </summary>		
        </member>
        <member name="F:TheOne.Windows.Forms.ImageKinds.Error">
            <summary>
            에러
            </summary>
        </member>
        <member name="F:TheOne.Windows.Forms.ImageKinds.Custom">
            <summary>
            사용자 정의 이미지
            </summary>
        </member>
        <member name="F:TheOne.Windows.Forms.ImageKinds.None">
            <summary>
            없음
            </summary>
        </member>
        <member name="T:TheOne.Windows.Forms.Internal.ExceptionDialogForm">
            <summary>
            Exception 정보를 보여주는 폼 클래스.
            </summary>
            <remarks>
            Exception에 대한 정보를 보여주고, 서버에 전송하는 기능을 수행한다.
            Exception 정보를 서버로 전송하기 위해서는 Configuration 에 "ExceptionReportUrl"값이
            정의되어 있어야 한다.
            </remarks>
            <example>
            Configuration GeneralSection 설정 예제.
            <code>
              &lt;generalSection&gt;
                &lt;add key="ExceptionReportUrl" value="http://localhost/TMP/ExceptionReportPage.aspx" /&gt;
              &lt;/generalSection&gt;
            </code>
            </example>
        </member>
        <member name="M:TheOne.Windows.Forms.Internal.ExceptionDialogForm.#ctor">
            <summary>
            ExceptionDialog 객체를 생성한다.
            </summary>
        </member>
        <member name="F:TheOne.Windows.Forms.Internal.ExceptionDialogForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.Internal.ExceptionDialogForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TheOne.Windows.Forms.Internal.ExceptionDialogForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Internal.ExceptionDialogForm.Exception">
            <summary>
            다이얼로그에 표시할 예외 객체
            </summary>
        </member>
        <member name="T:TheOne.Windows.Forms.Internal.MessageBoxFormFactory">
            <summary>
            <see cref="T:TheOne.Windows.Forms.MsgBox"/> 및 <see cref="T:TheOne.Windows.Forms.MsgCodeBox"/> 에서 사용하는 메시지 박스 폼에 대한 팩토리 클래스
            </summary>
            <remarks>
            <para>사용자는 MessageBoxFormFactory 클래스와 <see cref="T:TheOne.Windows.Forms.MsgBox"/> 클래스의
            <see cref="P:TheOne.Windows.Forms.MsgBox.FormFactory">FormFactory</see> 속성을 사용하여
            MsgBox 클래스에 의해 표시되는 메시지 박스를 커스터마이징 할 수 있다. 메시지 박스를 커스터마이징 하기
            위해서는 MessageBoxFormFactory 클래스에서 파생된 사용자 정의 팩토리 클래스를 정의하고
            이 팩토리 클래스의 인스턴스를 MsgBox 클래스의 FormFactory 속성에 설정하면 된다.</para>
            </remarks>
            <example>
            	<code lang="CS" title="메시지 박스 커스터 마이징" description="다음 예제는 메시지 박스 폼 팩토리 객체를 작성하고 FormFactory 속성에 설정함으로써 커스터 마이징이 가능하다.">
            // startup code such as Main() or a contructor of MenuControl
            MsgBox.FormFactory = new CustomFormFactory();
             
            // custom factory class
            class CustomFormFactory : TheOne.Windows.Forms.Common.MessageBoxFormFactory
            {
                public override Form CreateMessageBoxForm(IWin32Window owner, string message, string caption, 
                                                        MessageBoxButtons buttons, ImageKinds imageKind, 
                                                        Image image, object data)
                {
                    CustomMessageBoxForm frm = new CustomMessageBoxForm();
                    frm.Message = message;
                    frm.Text = caption;
             
                    // other settings...
             
                    return frm;
                }
            }
            </code>
            </example>
        </member>
        <member name="M:TheOne.Windows.Forms.Internal.MessageBoxFormFactory.CreateMessageBoxForm(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,TheOne.Windows.Forms.ImageKinds,System.Drawing.Image,System.Object)">
            <summary>
            <see cref="T:TheOne.Windows.Forms.MsgBox"/> 및 <see cref="T:TheOne.Windows.Forms.MsgCodeBox"/> 에서 메시지 박스를 생성하기 위해 호출한다.
            </summary>
            <param name="owner">메시지 박스 폼의 소유 폼</param>
            <param name="message">메시지 박스에 표시될 메시지</param>
            <param name="caption">메시지 박스 폼의 캡션</param>
            <param name="buttons">메시지 박스에 나타날 버튼들</param>
            <param name="imageKind">메시지 박스에 표시될 이미지 종류를 나타내는 ImageKinds 열거 타입</param>
            <param name="image">ImageKinds.Custom 이 주어졌을 때 표시할 이미지 객체</param>
            <param name="data">메시지 박스에서 사용할 추가적인 데이터 객체</param>
            <returns>메시지를 표시할 메시지 박스 폼(Form) 객체</returns>
            <remarks>
            <para>이 메쏘드에서 반환하는 Form 객체는 ShowDialog 메쏘드 호출에 의해 화면에 표시된다.</para>
            </remarks>
        </member>
        <member name="T:TheOne.Windows.Forms.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:TheOne.Windows.Forms.Controls.UploaderProgress">
            <summary>
            
            </summary>
        </member>
        <member name="F:TheOne.Windows.Forms.Controls.UploaderProgress.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.Controls.UploaderProgress.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TheOne.Windows.Forms.Controls.UploaderProgress.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.Controls.UploaderProgress.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.Controls.UploaderProgress.StartProgress">
            <summary>
            진행 상황(progress) 다이얼로그를 표시한다
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.Controls.UploaderProgress.StopProgress">
            <summary>
            진행 상황(progress) 다이얼로그를 감춘다
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.Controls.UploaderProgress.btnCancel_Click(System.Object,System.EventArgs)">
            <summary>
            파일 업로드 취소 버튼 이벤트 핸들러
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Controls.UploaderProgress.ProgressMessage">
            <summary>
            진행 상황 메시지를 설정한다
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Controls.UploaderProgress.ShowProgressValue">
            <summary>
            진행 상황 값 표시 여부를 설정한다.
            </summary>        
        </member>
        <member name="P:TheOne.Windows.Forms.Controls.UploaderProgress.MaxValue">
            <summary>
            진행 상황 값의 최대치를 설정한다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Controls.UploaderProgress.CurrentValue">
            <summary>
            진행 상황의 현재값을 설정한다
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Controls.UploaderProgress.MaxStepValue">
            <summary>
            진행 상황 값의 최대치를 설정한다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Controls.UploaderProgress.CurrentStepValue">
            <summary>
            진행 상황의 현재값을 설정한다
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Controls.UploaderProgress.HasCancel">
            <summary>
            실행 취소 플래그
            </summary>
        </member>
        <member name="T:TheOne.Windows.Forms.Win32.Win32API">
            <summary>
            Win32 API 들에 대한 Wrapper 클래스
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.Win32.Win32API.BringWindowToTop(System.IntPtr)">
            <summary>
            Win32 BringWindowToTop API 선언
            </summary>
            <param name="hwnd">윈도우 핸들</param>
            <returns>성공 여부</returns>
        </member>
        <member name="M:TheOne.Windows.Forms.Win32.Win32API.GetCurrentThreadId">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:TheOne.Windows.Forms.Win32.Win32API.RECT">
            <summary>
            Win32 RECT 구조체
            </summary>
        </member>
        <member name="T:TheOne.Windows.Forms.Resources.Default">
            <summary>
              지역화된 문자열 등을 찾기 위한 강력한 형식의 리소스 클래스입니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.ResourceManager">
            <summary>
              이 클래스에서 사용하는 캐시된 ResourceManager 인스턴스를 반환합니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.Culture">
            <summary>
              이 강력한 형식의 리소스 클래스를 사용하여 모든 리소스 조회에 대한 현재 스레드의 CurrentUICulture
              속성을 재정의합니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.BasicMenuControl_CanGoBack_1">
            <summary>
              호출자 메뉴 ID [{0}] 를 인식할 수 없습니다.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.BasicMenuControl_GetMyMenuLocation_1">
            <summary>
              지원되지 않는 저장소 위치 입니다.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.BasicMenuControl_GetMyMenuLocation_2">
            <summary>
              내 메뉴 저장 위치가 유효하지 않습니다.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.BasicMenuControl_GoBack_1">
            <summary>
              호출자 메뉴 ID [{0}] 를 인식할 수 없습니다.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.BasicMenuControl_InitializeMenu_1">
            <summary>
              시작 프로그램과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.BasicMenuControl_InitializeMenu_2">
            <summary>
              Start up과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.BasicMenuControl_LoadMyMenu_1">
            <summary>
              메뉴를 로드 하는데 오류가 발생하였습니다.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.BasicMenuControl_MenuStatisticsWorker_1">
            <summary>
              메뉴 통계 정보 기록 오류\r\n\r\n{0}과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.BasicMenuControl_MoveTo_1">
            <summary>
              네비게이트 할 메뉴 ID [{0}] 를 찾을 수 없습니다.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.BasicMenuControl_Navigate_1">
            <summary>
              호출자 메뉴 ID [{0}] 를 인식할 수 없습니다.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.BasicMenuControl_Navigate_2">
            <summary>
              네비게이트 할 메뉴 ID [{0}] 를 찾을 수 없습니다.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.BasicMenuControl_Navigate_3">
            <summary>
              Navigate로 열 수 없는 메뉴 ID [{0}] 를 사용하였습니다.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.BasicMenuControl_OnOpenUIError_1">
            <summary>
              메뉴를 로드할 수 없습니다. 상세한 오류는 메시지를 참조 하십시요.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.BasicMenuControl_OnOpenUIError_2">
            <summary>
              더 이상 메뉴를 열 수 없습니다. 다른 메뉴를 닫은 후에 시도 하십시요.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.BasicMenuControl_ReplaceTo_1">
            <summary>
              호출자 메뉴 ID [{0}] 를 인식할 수 없습니다.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.BasicMenuControl_ReplaceTo_2">
            <summary>
              네비게이트 할 메뉴 ID [{0}] 를 찾을 수 없습니다.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.BasicMenuControl_SaveMyMenu_1">
            <summary>
              메뉴를 저장 하는데 오류가 발생하였습니다.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.DownloadDialog_GetFileTypeName_1">
            <summary>
              알수 없음과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.ExceptionDialogForm_ExceptionDlg_Load_1">
            <summary>
              표시할 예외 정보가 없습니다.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.ExceptionDialogForm_ExceptionDlg_Load_2">
            <summary>
              로그온 오류과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.ExceptionDialogForm_ExceptionDlg_Load_3">
            <summary>
              인증되지 않은 사용자 입니다.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.ExceptionDialogForm_ExceptionDlg_Load_4">
            <summary>
              로그온을 하지 않았거나 세션 타임아웃이 발생했습니다.\r\n 다시 로그온 해주십시요.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.ExceptionDialogForm_ExceptionDlg_Load_5">
            <summary>
              권한 오류과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.ExceptionDialogForm_ExceptionDlg_Load_6">
            <summary>
              사용자 권한 오류 입니다.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.ExceptionDialogForm_ExceptionDlg_Load_7">
            <summary>
              로그온 된 사용자는 해당 액세스를 수행할 권한이 없습니다.\r\n 사용자에게 할당된 권한을 확인하십시요.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.ExceptionDialogForm_ExceptionDlg_Load_8">
            <summary>
              예외 발생과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.ExceptionDialogForm_ExceptionDlg_Load_9">
            <summary>
              프로그램에서 예상하지 못한 오류가 발생하였습니다.\r\n 오류 메시지는 다음과 같습니다.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.ExceptionDialogForm_ExceptionReport_1">
            <summary>
              사용자 ID를 알 수 없습니다. 오류 기록은 무기명으로 기록됩니다.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.ExceptionDialogForm_ExceptionReport_2">
            <summary>
              예외 관리자과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.ExceptionDialogForm_ExceptionReport_3">
            <summary>
              오류 정보 기록을 위한 URL 설정이 존재하지 않습니다.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.ExceptionDialogForm_ExceptionReport_4">
            <summary>
              오류 정보를 서버에 전송하였습니다.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.ExceptionDialogForm_ExceptionReport_5">
            <summary>
              오류 정보를 보내는 서버에 대한 설정이 잘못되었습니다. \r\n{0}과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.ExceptionDialogForm_ExceptionReport_6">
            <summary>
              오류 정보를 서버에 전송하는데 실패하였습니다. \n{0}과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.FlowMenuList_CreateControlsInstance_1">
            <summary>
              Normal Label과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.FlowMenuList_CreateControlsInstance_2">
            <summary>
              Mouse Hover Label과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.FlowMenuList_CreateControlsInstance_3">
            <summary>
              Selected Label과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.FlowMenuList_CreateControlsInstance_4">
            <summary>
              보통 상태과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.FlowMenuList_CreateControlsInstance_5">
            <summary>
              마우스 호버 상태과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.GlobalState_GetItem_1">
            <summary>
              name과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.GlobalState_GetItem_2">
            <summary>
              키 값은 null 일 수 없습니다.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.GlobalState_RemoveItem_1">
            <summary>
              name과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.GlobalState_RemoveItem_2">
            <summary>
              키 값은 null 일 수 없습니다.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.GlobalState_SetItem_1">
            <summary>
              name과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.GlobalState_SetItem_2">
            <summary>
              키 값은 null 일 수 없습니다.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.MenuControlBase_CanGoBack_1">
            <summary>
              {0} MenuControlBase 클래스에서 이 기능은 구현되지 않습니다.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.MenuControlBase_CloseUIControl_1">
            <summary>
              {0} MenuControlBase 클래스에서 이 기능은 구현되지 않습니다.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.MenuControlBase_CreateUserInfoContext_1">
            <summary>
              UserInfoContextType 속성이 UserInfoContext 에서 파생되지 않았습니다.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.MenuControlBase_ExecWebScript_1">
            <summary>
              브라우저 윈도우가 존재하지 않습니다.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.MenuControlBase_ExecWebScript_2">
            <summary>
              브라우저 스크립트 호출에 오류가 발생했습니다.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.MenuControlBase_GoBack_1">
            <summary>
              {0} MenuControlBase 클래스에서 이 기능은 구현되지 않습니다.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.MenuControlBase_MoveTo_1">
            <summary>
              {0} MenuControlBase 클래스에서 이 기능은 구현되지 않습니다.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.MenuControlBase_Navigate_1">
            <summary>
              {0} MenuControlBase 클래스에서 이 기능은 구현되지 않습니다.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.MenuControlBase_OnLoad_1">
            <summary>
              인증 정보 생성에 실패했습니다.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.MenuControlBase_OnLoad_2">
            <summary>
              유효한 인증정보를 찾을 수 없습니다.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.MenuControlBase_ReplaceTo_1">
            <summary>
              {0} MenuControlBase 클래스에서 이 기능은 구현되지 않습니다.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.MenuControlBase_SetUserInfoContext_1">
            <summary>
              인증 정보 객체는 null 일 수 없습니다과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.MessageBoxFormBase_GetButtonControls_1">
            <summary>
              GetButtonControls 메쏘드를 오버라이드 해야 합니다.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.MessageBoxFormBase_LayoutControls_1">
            <summary>
              MessageLabel 속성이나 IconPictureBox 속성을 설정해야 합니다.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.OneUploader_btnAppend_Click_1">
            <summary>
              파일은 {0}개 이상 추가 할수 없습니다.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.OneUploader_btnAppend_Click_2">
            <summary>
              경고과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.OneUploader_btnAppend_Click_3">
            <summary>
              같은 파일이 존재 합니다.\n({0})과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.OneUploader_btnRemove_Click_1">
            <summary>
              선택된 파일이 없습니다.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.OneUploader_Download_1">
            <summary>
              이미 존재 하는 파일 입니다. 새로 받으시겠습니까?\n({0})과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.OneUploader_Download_2">
            <summary>
              경고과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.OneUploader_Download_3">
            <summary>
              이미 존재 하는 파일 입니다. 이어 받으시겠습니까?\n({0})과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.OneUploader_ExecuteDownload_1">
            <summary>
              선택된 파일이 없습니다.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.OneUploader_ExecuteDownload_2">
            <summary>
              경고과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.OneUploader_ExecuteUpload_1">
            <summary>
              이미 존재 하는 파일 입니다. 새로 올리시겠습니까?\n({0})과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.OneUploader_ExecuteUpload_2">
            <summary>
              경고과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.OneUploader_ExecuteUpload_3">
            <summary>
              이미 존재 하는 파일 입니다. 이어 올리시겠습니까?\n({0})과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.UserControlBase_BeforeInvokeServer_1">
            <summary>
              서버 호출 중 입니다과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.UserControlBase_Close_1">
            <summary>
              메뉴 컨트롤이 존재하지 않으므로 Close 작업을 수행할 수 없습니다.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.UserControlBase_CreateSecurityContext_1">
            <summary>
              SecurityContextType 속성이 ISecurityContext 를 구현하지 않습니다.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.UserControlBase_CreateUserInfoContext_1">
            <summary>
              UserInfoContextType 속성이 UserInfoContext 에서 파생되지 않았습니다.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.UserControlBase_ExecWebScript_1">
            <summary>
              브라우저 윈도우가 존재하지 않습니다.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.UserControlBase_ExecWebScript_2">
            <summary>
              브라우저 스크립트 호출에 오류가 발생했습니다.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.UserControlBase_InitializeTimeoutHandler_1">
            <summary>
              주어진 세션 메니저가 필요한 메쏘드를 제공하지 않습니다.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.UserControlBase_InitializeTimeoutHandler_2">
            <summary>
              세션메니저를 초기화할 수 없습니다.\r\n{0}\r\n과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.UserControlBase_OnLoad_1">
            <summary>
              인증 정보 생성에 실패했습니다.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.UserControlBase_OnLoad_2">
            <summary>
              유효한 인증정보를 찾을 수 없습니다.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.UserControlBase_OnLoad_3">
            <summary>
              권한 정보 생성에 실패했습니다.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.UserControlBase_OnLoad_4">
            <summary>
              화면을 사용할 권한이 없습니다.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.UserControlBase_SetSecurityContext_2">
            <summary>
              권한 정보 객체는 null 일 수 없습니다과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.UserControlBase_SetUserInfoContext_1">
            <summary>
              인증 정보 객체는 null 일 수 없습니다.과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.UserControlBase_UIMoveTo_1">
            <summary>
              네비게이션 기능은 메뉴 컨트롤이 존재하는 경우에만 유효합니다과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.UserControlBase_UIMoveTo_2">
            <summary>
              컨트롤 네비게이션 관리자과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.UserControlBase_UINavigate_1">
            <summary>
              네비게이션 기능은 메뉴 컨트롤이 존재하는 경우에만 유효합니다과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.UserControlBase_UINavigate_2">
            <summary>
              컨트롤 네비게이션 관리자과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.UserControlBase_UIReplaceTo_1">
            <summary>
              네비게이션 기능은 메뉴 컨트롤이 존재하는 경우에만 유효합니다과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Resources.Default.UserControlBase_UIReplaceTo_2">
            <summary>
              컨트롤 네비게이션 관리자과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="T:TheOne.Windows.Forms.MessageFilter">
            <summary>
            동기 작업 (서버 호출, 파일 다운로드 등) 수행시 발생하는 키보드, 마우스등의 윈도우
            메시지 이벤트를 필터링 하기 위한 메시지 필터.
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.MessageFilter.CreateInstance">
            <summary>
            MessageFilter 객체를 생성한다.
            </summary>
            <returns>생성된 MessageFilter 객체</returns>
            <remarks>
            <para>MessageFilter는 어플리케이션에 유일한 싱글톤 인스턴스이다.</para>
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.MessageFilter.InstallFilter">
            <summary>
            메시지 필터를 설치합니다.
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.MessageFilter.UninstallFilter">
            <summary>
            설치된 메시지 필터를 제거한다.
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.MessageFilter.Reset">
            <summary>
            메시지 필터를 Disable 한다.
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.MessageFilter.PreFilterMessage(System.Windows.Forms.Message@)">
            <summary>
            IMessageFilter 인터페이스 PreFilterMessage 메쏘드 구현
            </summary>
            <param name="m">메시지 객체</param>
            <returns>필터링 여부</returns>
        </member>
        <member name="P:TheOne.Windows.Forms.MessageFilter.FilterInstance">
            <summary>
            MessageFilter 인스턴스를 반환한다.
            </summary>
            <value>메시지 필터 인스턴스를 반환한다.</value>
            <remarks>
            <para>MessageFilter는 어플리케이션에 유일한 싱글톤 인스턴스이다.</para>
            </remarks>
        </member>
        <member name="P:TheOne.Windows.Forms.MessageFilter.Enabled">
            <summary>
            필터링 작업 수행 여부
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.MessageFilter.FilterMouseEvent">
            <summary>
            마우스 이벤트 필터링 여부
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.MessageFilter.FilterKeyboardEvent">
            <summary>
            키보드 이벤트 필터링 여부
            </summary>
        </member>
        <member name="T:TheOne.Windows.Forms.Menu.MenuLoaderFactory">
            <summary>
            메뉴로딩 스플래쉬 폼 팩토리 클래스
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.MenuLoaderFactory.CreateMenuLoaderForm(System.Type)">
            <summary>
            메뉴로딩시 스플래쉬 폼을 생성하여 반환한다.
            </summary>
            <param name="splashFormType"></param>
            <returns></returns>
        </member>
        <member name="T:TheOne.Windows.Forms.Menu.MenuControlBase">
            <summary>
            메뉴를 제어 하고 UI 컨트롤들을 로드하고 제어하는 메뉴 컨트롤의 베이스 클래스.
            이 클래스를 직접 사용할 수 없으며 이 클래스에서 파생된 메뉴 컨트롤을 사용해야 한다.
            </summary>
            <remarks>
            <para>MenuControlBase 클래스는 스마트 클라이언트를 위한 메뉴 컨트롤의 기초 구현을
            제공한다. 이 클래스는 메뉴 제어와 사용자 인증, 권한 관리, 네비게이션 등의 기능을
            제공하지만 UI에 관련된 능력은 전혀 갖고 있지 않다. 이 클래스에서 파생된 클래스를 통해
            각 어플리케이션에 맞는 메뉴 UI를 구현할 수 있다.</para>
            </remarks>
        </member>
        <member name="T:TheOne.Windows.Forms.DSmartClientEventSource">
            <summary>
            컨테이너에게 이벤트를 발생시키기 위한 인터페이스
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.DSmartClientEventSource.Fire_Redirect(System.Int32,System.String)">
            <summary>
            Redirect 이벤트를 발생시킨다
            </summary>
            <param name="reason">Redirect의 원인코드</param>
            <param name="url">Redirect할 URL</param>
        </member>
        <member name="M:TheOne.Windows.Forms.DSmartClientEventSource.Fire_AuthenticationError">
            <summary>
            인증 오류 이벤트를 발생시킨다.
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.DSmartClientEventSource.Fire_AuthorityError">
            <summary>
            권한 오류 이벤트를 발생시킨다.
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.DSmartClientEventSource.Fire_Exit">
            <summary>
            사용자 종료 이벤트 발생시킨다.
            </summary>
        </member>
        <member name="E:TheOne.Windows.Forms.DSmartClientEventSource.Redirect">
            <summary>
            Redirect 이벤트
            </summary>
        </member>
        <member name="E:TheOne.Windows.Forms.DSmartClientEventSource.AuthenticationError">
            <summary>
            인증 오류 이벤트
            </summary>
        </member>
        <member name="E:TheOne.Windows.Forms.DSmartClientEventSource.AuthorityError">
            <summary>
            권한 오류 이벤트
            </summary>
        </member>
        <member name="E:TheOne.Windows.Forms.DSmartClientEventSource.Exit">
            <summary>
            사용자 종료 이벤트
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.MenuControlBase.#ctor">
            <summary>
            메뉴 컨트롤을 생성한다
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.MenuControlBase.OnLoad(System.EventArgs)">
            <summary>
            UserControl.OnLoad에 대한 오버라이드. 인증 및 기타 처리를 수행한다.
            </summary>
            <param name="e">표준 이벤트 객체</param>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.MenuControlBase.InitControl(System.Object)">
            <summary>
            메뉴 컨트롤을 초기화 한다.
            </summary>
            <param name="arg">초기화를 위한 매개변수</param>
            <remarks>
            메뉴 컨트롤을 호스팅하는 웹 페이지 혹은 윈도우 폼이 이 메쏘드를 호출한다.
            파생 클래스에서는 이 메쏘드 내에서 다양한 메뉴에 대한 다양한 초기화 작업을 수행한다.
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.MenuControlBase.TerminateControl">
            <summary>
            메뉴 컨트롤을 종료한다.
            </summary>
            <returns>메뉴 컨트롤을 종료해도 되는지를 나타내는 bool 값.</returns>
            <remarks>
            <para>TerminateControl 메쏘드는 메뉴 컨트롤을 호스트하는 폼 혹은 브라우저에 의해
            메뉴 컨트롤이 종료될 때 호출된다. 이 메쏘드가 true를 반환하면 메뉴 컨트롤 호스트는
            메뉴 컨트롤을 제거하게 된다. 만약 이 메쏘드가 false를 반환하면 메뉴 컨트롤 호스트는
            메뉴 컨트롤 제거를 취소한다.</para>
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.MenuControlBase.CreateUserInfoContext">
            <summary>
            사용자 정보를 담는 UserInfoContext 객체를 반환한다.
            </summary>
            <returns>UserInfoContext 객체 혹은 그 파생 객체</returns>
            <remarks>
            <para>MenuControlBase에서 파생되는 사용자 정의 컨트롤은 사용자 정보 및 추가 인증 및 개인
            정보를 UserInfoContext 클래스를 통해 기록해 둘 수 있다.
            MenuControlBase의 파생 클래스는 CreateUserInfoContext 메쏘드를 오버라이드 함으로써
            현재 사용자에 대한 필요한 정보를 가지고 있는 UserInfoContext 객체를 생성하도록하고 이 메쏘드에서 생성된
            UserInfoContext 객체는 UserInfo 프로퍼티를 통해 액세스 가능하다.</para>
            <para>UserInfoContext 객체를 생성하기 위한 정보는 MenuControlBase 의 컨테이너(메뉴 컨트롤 혹은 IE 브라우저)가
            설정해 주는 AuthString 프로퍼티를 통해 얻거나, 필요에 따라 웹 서비스 호출, COM+ 컴포넌트 호출 등을
            통해 정보를 얻어 낼 수도 있다.</para>
            <para>CreateUserInfoContext 메쏘드의 기본 구현은 <see cref="P:TheOne.Windows.Forms.Menu.MenuControlBase.UserInfoContextType"/> 속성이 지정하는
            UserInfoContext 타입의 객체를 생성하여 반환하도록 되어 있다. 이때 <see cref="P:TheOne.Windows.Forms.Menu.MenuControlBase.AuthString"/> 속성의 값이
            UserInfoContext 객체를 생성할 때의 생성자의 매개변수로 넘겨진다.</para>
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.MenuControlBase.SetUserInfoContext(TheOne.Security.UserInfoContext)">
            <summary>
            사용자 인증 정보 객체를 설정한다.
            </summary>
            <param name="ctx">UserInfoContext 객체 혹은 그 파생 객체</param>
            <remarks>
            <para>사용자 인증 정보 객체는 메뉴 컨트롤(MenuControlBase의 파생 클래스)가 OnLoad 메쏘드 오버라이드에서
            스스로 그 값을 설정할 수도 있으며 이 메쏘드를 통해 설정될 수도 있다. SetUserInfoContext 메쏘드가
            Load 이벤트 전에 메뉴 호스트(폼 혹은 브라우저)에 의해 호출된다면 추가적인 작업은 전혀 필요 없다.
            하지만 메뉴 컨트롤이 이미 로드되고 사용 중인 상황에서 이 메쏘드가 호출되면 문제가 발생할 수도 있다.
            사용자 별로 서로 다른 권한을 가진 메뉴나 이미 열려있는 UI 컨트롤들은 바뀌기 이전의 UserInfoContext 객체를
            참조하고 있을 것이기 때문이다. 따라서 메뉴 컨트롤이 수행 중인 상황에 SetUserInfoContext 메쏘드를 호출하여
            사용자 정보 객체를 변경할 때는 메뉴를 재구성하고 열려있는 UI 컨트롤의 사용자 정보 역시 갱신해
            주어야 하며, 각 UI 컨트롤의 사용자별 권한 역시 갱신되어야 한다.</para>
            <para>SetUserInfoContext 메쏘드에 대한 권장 사항은 메뉴 컨트롤이 로드 되기 전에 이 메쏘드를 호출하는
            것이다. 메뉴 컨트롤이 이미 로드된 이후라면 열려있는 모든 UI 컨트롤을 닫고 메뉴를 새로이 구성하는 것이다.
            </para>
            <para>주의) 이 메쏘드는 UserInfoContext 클래스의 SetCallContext 메쏘드와 SetThreadPrincipal 메쏘드를
            호출하지 않는다. 어플리케이션의 필요에 따라 이들 메쏘드를 호출하는 것은 호출자의 책임이다.</para>
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.MenuControlBase.CreateMenuManager">
            <summary>
            메뉴 매니저(<see href="TheOne.UIModel.MenuManager">MenuManager</see>) 객체를 생성하여 반환한다.
            </summary>
            <returns>생성한 메뉴 매니저(<see href="TheOne.UIModel.MenuManager">MenuManager</see>) 객체</returns>
            <remarks>
            메뉴 프레임워크는 프레임워크에서 사용할 메뉴 매니저를 생성하기 위해 이 메쏘드를 호출한다.
            기본구현은 <see href="TheOne.UIModel.MenuItemInfo">MenuItemInfo</see> 클래스를 사용하는 메뉴 매니저를
            생성하여 반환한다. 만약 MenuItemInfo 클래스가 아닌 다른 클래스를 사용해야 한다면 이 메쏘드를 오버라이드
            하여 MenuItemInfo 에서 파생된 클래스의 타입을 MenuManager 에게 제공해야만 한다.
            </remarks>
            <example>
            	<code lang="CS" title="MenuItemInfo 확장" description="MenuItemInfo 에 추가적인 정보를 담을 때 필요한 메뉴 아이템 정보 클래스 정의와 메뉴 컨트롤에서 CreateMenuManager 메쏘드의 오버라이드 예제를 보여준다.">
            public MyMenuControl : MenuControlBase
            {
                ......
                
                protected override MenuManager CreateMenuManager()
                {
                    return new MenuManager(typeof(MyMenuItemInfo));
                }
                
                ......
            }
             
            public class MyMenuItemInfo : MenuItemInfo
            {
                public string Designer;
                
                public override MenuItemInfo CreateInstance(MenuItemInfo parent)
                {
                    MenuItemInfo menuInfo = new MyMenuItemInfo();
                    menuInfo.Parent = parent;
                    return menuInfo;
                }
                
                public override void ParseMenuInfo(System.Xml.XmlNode xmlNode, bool enableDefault)
                {
                    base.ParseMenuInfo(xmlNode, enableDefault);
                    MenuItemInfo.GetOptionalStringAttribute(xmlNode, "designer", out Designer);
                }
            }
            </code>
            </example>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.MenuControlBase.InitializeMenu">
            <summary>
            메뉴 데이터를 로드하여 메뉴 아이템 트리를 구성하는 등 메뉴 관련 초기화를 수행한다.
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.MenuControlBase.InitializeMenu(System.Boolean)">
            <summary>
            메뉴 데이터를 로드하여 메뉴 아이템 트리를 구성한다.
            </summary>
            <param name="loadMenuXml">메뉴 XML 로드 여부를 나타내는 bool 값.</param>
            <remarks>
            <para>메뉴가 메뉴 XML이 아닌 다른 방법으로 구성되었다면 메뉴 XML을 로드하지 않도록
            loadMenuXml 매개변수에 false를 넘겨야 한다. 예를 들어 메뉴 아이템 데이터가 데이터베이스에
            존재하거나 직접 프로그램적인 방법으로 구성될 수 있다. 이 때 응용 프로그램은
            <see href="TheOne.UIModel.MenuManager">MenuManager</see> 클래스의 AddMenuItem 메쏘드 혹은
            LoadMenuItems 메쏘드를 통해 메뉴 아이템들을 로드할 수 있다. 이런 상황이라면 메뉴 XML을
            로드하지 말아야 하기 때문에 loadMenuXml 매개변수 값을 false로 주어야 하는 것이다.</para>
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.MenuControlBase.AuthorizeMenuItem">
            <summary>
            로드된 메뉴 아이템들에 대해 사용자별 권한에 따라 메뉴를 enable/disable 한다.
            </summary>
            <remarks>
            <para>
            이 메쏘드는 메뉴를 로드하고 초기화하는 과정에서 호출되는 메쏘드로써 MenuControlBase에서
            파생된 메뉴 컨트롤은 이 메쏘드를 오버라이드하여 사용자별로 사용할 수 있는 메뉴에 대한
            권한을 사용자 지정할 수 있다. 이 메쏘드의 기본 구현은 <see href="AuthMenuData">AuthMenuData</see> 속성에
            의해 지정된 메뉴들을 사용가능하도록 enable 시키는 것이다. 즉, AuthMenuData에 콜론(:)으로 구분된
            메뉴 아이디들을 enable 시킨다.
            </para>
            <para>
            가장 전형적으로 이 메뉴를 구현하는 방법은 웹 서비스를 호출하거나 데이터베이스를
            액세스하여 사용자가 어떤 메뉴들을 액세스 할 수 있는가 정보를 알아내고 각 메뉴 아이템에 대해
            <see href="TheOne.UIModel.MenuItemInfo.Enabled">Enabled</see> 속성을 true 혹은 false로 지정해 주면 된다. 각 메뉴 아이템들의 Enabled 속성은
            MenuControlBase 클래스의 <see href="MenuEnableDefault">MenuEnableDefault</see> 속성의
            값으로 초기화 되며 이 속성은 대개 false 이므로, 사용자가 권한을 가진 메뉴 아이템에 대해
            Enabled 속성을 true로 설정해 주는 것이 일반적이다. 
            </para>
            <para>
            메뉴 아이템의 Enabled 속성이 true이고 이 아이템의 Hide 속성이 true가 아니라면 메뉴가 표시될
            것이지만 그렇다고 사용자가 이 화면을 "사용"할 수 있는 것은 아님에 유의한다. 각 화면은 화면별로
            사용권한을 다시 확인하며 조회/추가/수정/삭제 등의 권한이 모두 없다면 화면은 열리지 않게 된다.
            </para>
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.MenuControlBase.ExecWebScript(System.String,System.String)">
            <summary>
            UI 컨트롤을 호스팅하는 외부 브라우저에 대해 스크립트를 수행한다.
            </summary>
            <param name="script">자바 스크립트 문자열</param>
            <param name="language">스크립트 언어(VBScript 혹은 javascript)</param>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.MenuControlBase.ProcessTabKey(System.Boolean)">
            <summary>
            탭키를 통한 이동이 사용자 정의 컨트롤 바깥으로 나가지 않도록 제어 한다.
            </summary>
            <param name="forward">전/후 방향</param>
            <returns>컨트롤 선택 여부</returns>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.MenuControlBase.Navigate(System.String,System.String,System.Object)">
            <summary>
            destinationMenuID 로 주어진 UI 컨트롤로 네비게이션 한다.
            </summary>
            <param name="sourceMenuID">호출자의 UI 컨트롤의 메뉴 ID</param>
            <param name="destinationMenuID">네비게이트할 UI 컨트롤의 메뉴 ID</param>
            <param name="args">새 UI 컨트롤에 넘겨줄 매개변수</param>
            <remarks>
            이 메쏘드를 호출하면 destinationMenuID를 갖는 UI 컨트롤을 찾는다. 이미 열려 있다면 해당 컨트롤이
            활성화 되고 아직 열려 있지 않다면 컨트롤이 로드된다.
            Navigate 메쏘드를 통해서 열린 UI 컨트롤은 GoBack 메쏘드를 통해 되돌아 올 수 있다.
            컨트롤이 이미 열려 있다면 args 매개변수는 컨트롤의 InitControl 메쏘드 호출을 통해
            전달된다.
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.MenuControlBase.CanGoBack(System.String)">
            <summary>
            GoBack 메쏘드를 통해 네비게이트 할 수 있는 여부를 반환한다.
            </summary>
            <param name="sourceMenuID">호출자의 UI 컨트롤의 메뉴 ID</param>
            <returns>GoBack 가능 여부</returns>
            <remarks>
            GoBack 메쏘드를 통해 네비게이트 가능한 경우는 Navigate 메쏘드를 통해 UI 컨트롤이
            활성화 된 경우 이다.
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.MenuControlBase.GoBack(System.String)">
            <summary>
            이전 UI 컨트롤로 되돌아 간다.
            </summary>
            <param name="sourceMenuID">호출자의 UI 컨트롤의 메뉴 ID</param>
            <returns>이전 UI 컨트롤로 되돌아 갔는지 여부를 나타내는 boolean 값. 이전 UI 컨트롤로 되돌아 갔다면 true를,
            이전 UI 컨트롤이 닫혔거나 오류가 발생하면 false를 반환한다.</returns>
            <remarks>
            GoBack 메쏘드를 통해 네비게이트 가능한 경우는 Navigate 메쏘드를 통해 UI 컨트롤이
            활성화 된 경우 이다.
            만약 Navigate 메쏘드를 호출한 UI 컨트롤이 이미 닫혀있다면 GoBack 메쏘드는 아무런
            작업도 하지 않고 false를 반환한다.
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.MenuControlBase.MoveTo(System.String,System.Object)">
            <summary>
            등록된 메뉴 중에서 destinationMenuID를 갖는 UI 컨트롤로 이동한다.
            </summary>
            <param name="destinationMenuID">UI 컨트롤의 메뉴 ID</param>
            <param name="args">새 UI 컨트롤에 넘겨줄 매개변수</param>
            <remarks>
            MoveTo는 Back을 제공하지 않는 단순한 UI 컨트롤의 활성화이다.
            MoveTo 호출 시 목적지 UI 컨트롤이 이미 존재한다면 해당 컨트롤(탭)이 활성화 되고
            UI 컨트롤이 존재하지 않는다면 새로운 탭을 생성하고 컨트롤이 로드된다.
            컨트롤이 이미 열려 있다면 args 매개변수는 컨트롤의 InitControl 메쏘드 호출을 통해
            전달된다. 이 경우 InitControl 은 1회 이상 호출된다.
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.MenuControlBase.ReplaceTo(System.String,System.String,System.Object)">
            <summary>
            현재 열린 UI 컨트롤을 닫고 destinationMenuID가 지시하는 UI 컨트롤로 이동한다.
            </summary>
            <param name="sourceMenuID">호출자의 UI 컨트롤의 메뉴 ID</param>
            <param name="destinationMenuID">UI 컨트롤의 메뉴 ID</param>
            <param name="args">새 UI 컨트롤에 넘겨줄 매개변수</param>
            <remarks>
            현재 열린 UI 컨트롤을 닫고 destinationMenuID가 지시하는 목적지 UI 컨트롤로 이동한다.
            ReplaceTo 호출시 목적지 UI 컨트롤이 이미 존재한다면 해당 컨트롤(탭)이 활성화 되면서
            InitControl 이 호출된다. 그리고 ReplaceTo를 호출한 UI 컨트롤은 닫힌다.
            목적지 UI 컨트롤이 존재하지 않는다면 그 컨트롤은 새로이 로드되어 열리며 InitControl에
            매개변수 args가 전달된다.
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.MenuControlBase.CloseUIControl(TheOne.Windows.Forms.UserControlBase)">
            <summary>
            주어진 UI 컨트롤을 닫는다.
            </summary>
            <param name="ctrl">닫을 UI 컨트롤을 나타내는 UserControlBase 객체.</param>
            <remarks>
            UI 컨트롤은 근본적으로 폼(Form)이 아니라 사용자 정의 컨트롤(User Control)이기 때문에
            스스로를 닫을 수 없다. 따라서 메뉴 컨트롤이 UI 컨트롤을 닫는 등의 행동을 취해야만 한다.
            이 메쏘드는 구현되어 있지 않기 때문에 NotImplementedException을 유발한다.
            파생 클래스는 이 메쏘드를 오버라이드하여 UI 컨트롤의 Close 메쏘드 호출을 처리 해야 한다.
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.MenuControlBase.OnShown(System.EventArgs)">
            <summary>
            Shown 이벤트를 발생시킨다.
            </summary>
            <param name="e">이벤트 객체 (EventArgs.Empty)</param>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.MenuControlBase.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paint 이벤트를 발생시킨다.
            </summary>
            <param name="e">이벤트 데이터가 들어 있는 PaintEventArgs 객체. </param>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.MenuControlBase.TheOne#Windows#Forms#DSmartClientEventSource#Fire_Redirect(System.Int32,System.String)">
            <summary>
            Redirect 가 필요함을 컨테이너(웹 페이지, 윈폼)에게 알린다.
            </summary>
            <param name="reason">Redirect 원인 코드 (어플리케이션 정의)</param>
            <param name="url">리다이렉트할 URL</param>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.MenuControlBase.TheOne#Windows#Forms#DSmartClientEventSource#Fire_AuthenticationError">
            <summary>
            인증(로그온) 오류가 발생했음을 컨테이너(웹 페이지, 윈폼)에게 알린다.
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.MenuControlBase.TheOne#Windows#Forms#DSmartClientEventSource#Fire_AuthorityError">
            <summary>
            권한 오류가 발생했음을 컨테이너(웹 페이지, 윈폼)에게 알린다.
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.MenuControlBase.TheOne#Windows#Forms#DSmartClientEventSource#Fire_Exit">
            <summary>
            어플리케이션 종료 이벤트를 발생 시킨다.
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.MenuControlBase.DoExit">
            <summary>
            어플리케이션 종료 이벤트를 발생 시킨다.
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.MenuControlBase.SetupRelaySmartClientEvent(TheOne.Windows.Forms.UserControlBase)">
            <summary>
            이 메쏘드는 메뉴 프레임워크 내부에서 사용되는 메쏘드이므로 개발자가 이 메쏘드를 직접 호출하지 않도록
            한다.
            </summary>
            <param name="ctrl">UI 컨트롤</param>
            <remarks>
            UI 컨트롤이 발생하는 스마트 클라이언트 이벤트를 받아 릴레이 하도록 이벤트 핸들러 설정을 수행한다.
            MenuControlBase 에서 직접 파생한 메뉴 컨트롤은 UI 컨트롤을 로드 한 후 이 메쏘드를 호출하여
            인증/권한 오류와 같은 이벤트가 발생하면 이것이 메뉴 컨트롤을 통해 호스트(윈폼 혹은 브라우저 HTML)에게
            전달 될 수 있도록 해야 한다.
            </remarks>
        </member>
        <member name="P:TheOne.Windows.Forms.Menu.MenuControlBase.AuthString">
            <summary>
            인증 문자열을 읽거나 설정한다.
            </summary>
            <value>사용자 인증을 위한 인증 문자열.</value>
            <remarks>
            메뉴 컨트롤이 생성되고 화면(브라우저 혹은 폼)에 표시되기 전에 이 속성값을
            설정해야만 효과가 있다. HTML 내에서는 &lt;object&gt; 태그의 &lt;param&gt; 태그를
            통해 값을 설정해야 한다.
            </remarks>
        </member>
        <member name="P:TheOne.Windows.Forms.Menu.MenuControlBase.RequireAuthentication">
            <summary>
            UI 컨트롤이 인증을 필요로 하는가 설정
            </summary>
            <remarks>
            메뉴 컨트롤이 생성되고 화면(브라우저 혹은 폼)에 표시되기 전에 이 속성값을
            설정해야만 효과가 있다. HTML 내에서는 &lt;object&gt; 태그의 &lt;param&gt; 태그를
            통해 값을 설정해야 한다.
            </remarks>
        </member>
        <member name="P:TheOne.Windows.Forms.Menu.MenuControlBase.UserID">
            <summary>
            현재 UI 컨트롤(화면)을 사용하는 사용자 ID를 반환한다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Menu.MenuControlBase.UserInfo">
            <summary>
            현재 사용자 정보를 포함하는 UserInfoContext 객체를 반환한다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Menu.MenuControlBase.UserInfoContextType">
            <summary>
            프레임워크에서 생성할 UserInfoContext 타입 정보
            </summary>
            <remarks>
            프레임워크는 인증 정보를 생성할 때 UserInfoContextType 프로퍼티가
            지정하는 타입의 UserInfoConetx 객체(UserInfoContext 클래스 혹은 그 파생 클래스)를
            생성한다. 이 프로퍼티에 값은 생성자에서 설정할 때만 유효하며 디폴트 값은
            UserInfoContext 클래스이다.
            <br/><br/>
            UserTypeInfoContextType 이 지정하는 클래스는 UserInfoContext 클래스에서 파생된 타입이어야
            하며, 문자열을 매개변수로 하는 생성자를 반드시 가져야 한다. 생성자에 전달되는 매개변수는
            인증 정보를 포함하는 문자열이다. 인증 정보 문자열을 파싱하여 적절한 정보로 변환하는 것은
            UserInfoContext (및 그 파생 클래스) 객체의 역할이다.
            </remarks>
            <example>
            public class MyUserControl : UserControlBase
            {
            	public MyUserControl()
            	{
            		this.UserInfoContextType = typeof(MyUserInfoContext);
            		
            		InitializeComponents();
            	}
            	
            	// 보다 명확한 형정의를 위해 UserInfo 프로퍼티를 재정의 한다.
            	protected new MyUserInfoContext UserInfo
            	{
            		get { return (MyUserInfoContext)base.UserInfo; }
            	}
            	
            	// 이하 코드 생략
            }
            
            public class MyUserInfoContext : UserInfoContext
            {
            	private string _DeptID;
            	
            	public MyUserInfoContext(string authString) : base("")
            	{
            		string[] info = authString.Split(";");
            		base.SetUserID(info[0]);
            		_DeptID = info[1];
            	}
            	
            	public string DeptID
            	{
            		get { return _DeptID; }
            	}
            }
            </example>
        </member>
        <member name="P:TheOne.Windows.Forms.Menu.MenuControlBase.IsLogon">
            <summary>
            현재 로그온 상태를 반환한다.
            </summary>
            <remarks>
            로그온 여부는 현재 UserControl에 UserInfoContext 객체가 설정되어 있는가와
            UserInfoContext 객체의 UserID 프로퍼티가 설정되어 있느가에 의해 판별된다.
            </remarks>
        </member>
        <member name="P:TheOne.Windows.Forms.Menu.MenuControlBase.MenuManager">
            <summary>
            메뉴 컨트롤이 사용하는 메뉴 데이터에 대한 <see href="TheOne.UIModel.MenuManager">MenuManager</see> 객체를 반환한다.
            </summary>
            <value>메뉴 데이터를 관리하는 <see href="TheOne.UIModel.MenuManager">MenuManager</see> 객체.</value>
        </member>
        <member name="P:TheOne.Windows.Forms.Menu.MenuControlBase.MenuXmlUrl">
            <summary>
            메뉴 XML 파일에 대한 상대/절대 경로.
            </summary>
            <remarks>
            <para>
            메뉴 XML에 대한 경로는 URL 혹은 파일 경로를 모두 지원한다. 경로가 상대 경로라면
            AppDomain.BaseDirectory 속성에 의해 결정되는 어플리케이션 도메인의 베이스 디렉터리로
            부터의 상대 경로이다. 절대 경로가 사용되면 해당 절대 경로로부터 메뉴 XML을 읽어 들인다.
            </para>
            <para>
            메뉴 컨트롤이 생성되고 화면(브라우저 혹은 폼)에 표시되기 전에 이 속성값을
            설정해야만 효과가 있다. HTML 내에서는 &lt;object&gt; 태그의 &lt;param&gt; 태그를
            통해 값을 설정해야 한다.
            </para>
            </remarks>
        </member>
        <member name="P:TheOne.Windows.Forms.Menu.MenuControlBase.MenuEnableDefault">
            <summary>
            메뉴의 기본 활성화 값을 설정한다.
            </summary>
            <remarks>
            <para>이 값이 false이면 명시적으로 enabled 속성이
            true가 되어 있지 않은 모든 메뉴는 비활성화 된다. 개발시에 이 값을 true로 설정하여
            모든 메뉴가 표시되도록 할 수 있다.
            </para>
            <para>
            메뉴 컨트롤이 생성되고 화면(브라우저 혹은 폼)에 표시되기 전에 이 속성값을
            설정해야만 효과가 있다. HTML 내에서는 &lt;object&gt; 태그의 &lt;param&gt; 태그를
            통해 값을 설정해야 한다.
            </para>
            </remarks>
        </member>
        <member name="P:TheOne.Windows.Forms.Menu.MenuControlBase.AuthMenuData">
            <summary>
            권한이 있는 메뉴 목록을 설정한다.
            </summary>
            <remarks>
            <para>
            이 속성은 메뉴를 호스팅하는 브라우저 HTML 혹은 Form 에서 설정해 주는 값으로써
            현재 사용자가 사용할 수 있는 메뉴의 목록을 지정하는데 사용한다. 이 속성은 콜론(:)으로
            구분된 메뉴 ID들의 목록을 나타내는 문자열이다. 사용자가 권한을 가지는 메뉴들의 ID 목록을
            구하는 방법은 어플리케이션 마다 서로 다르지만 대개 사용자 권한을 저장하고 있는 데이터 베이스에서
            구할 수 있다.
            </para>
            <para>
            이 속성이 유효하게 사용되려면 <see href="AuthorizeMenuItem">AuthorizeMenuItem</see> 메쏘드의 기본
            구현을 사용해야 한다. 만약 AuthorizeMenuItem를 오버라이드 했다면 개발자가 직접 이 속성의 값을 사용해야만 한다.
            </para>
            </remarks>
        </member>
        <member name="P:TheOne.Windows.Forms.Menu.MenuControlBase.BrowserWindow">
            <summary>
            외부 브라우저 window 객체 포인터
            </summary>
            <remarks>
            외부 브라우저 객체 포인터. 프레임워크에 의해서만 사용된다.
            </remarks>
        </member>
        <member name="E:TheOne.Windows.Forms.Menu.MenuControlBase.Shown">
            <summary>
            사용자 정의 컨트롤이 화면 상에 표시 되었음을 알리는 이벤트
            </summary>
        </member>
        <member name="E:TheOne.Windows.Forms.Menu.MenuControlBase.Redirect">
            <summary>
            리다이렉트 요청 이벤트
            </summary>
        </member>
        <member name="E:TheOne.Windows.Forms.Menu.MenuControlBase.AuthenticationError">
            <summary>
            인증 오류 알림 이벤트
            </summary>
        </member>
        <member name="E:TheOne.Windows.Forms.Menu.MenuControlBase.AuthorityError">
            <summary>
            권한 오류 알림 이벤트
            </summary>
        </member>
        <member name="E:TheOne.Windows.Forms.Menu.MenuControlBase.Exit">
            <summary>
            사용자 종료 이벤트
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Menu.MenuControlBase.InitThema">
            <summary>
            XP 테마 혹은 Vista 테마를 적용하는 코드 수행 여부. 프레임워크 내부 사용을 위한 속성이므로
            개발자는 이 속성을 사용하지 않는 것이 좋다.
            </summary>
            <remark>
            <para>Windows Forms에서 XP 테마 혹은 Vista 테마를 적용하기 위해서는 일련의 메쏘드 호출이 필요하다.
            이 호출은 어플리케이션 시작 시점에서 1회 호출해 주어야 한다. 대개 Windows Forms 어플리케이션은
            Main 메쏘드 내에서 다음과 같은 호출을 수행한다.</para>
            <code>
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            </code>
            <para>스마트 클라이언트, 특히 브라우저 임베디드 스마트 클라이언트는 수행될 Main 메쏘드가 존재하지
            않기 때문에 이 코드를 호출할 곳이 마땅치 않다.
            MenuControlBase 클래스는 생성자에서 InitThema 속성의 값을 점검하여 아직 초기화가 되어 있지
            않다면(false 라면) 테마 설정을 수행하고 이 속성의 값을 true로 바꾼다.</para>
            프레임워크의 메뉴 컨트롤을 사용하는 경우라면 이 속성의 값을 바꿀 필요가 전혀 없다. 메뉴 컨트롤이
            필요한 작업을 모두 수행해줄 것이기 때문이다. 메뉴 컨트롤을 사용하지 않더라고 이 속성은 테마 설정
            후 자동으로 true로 바뀌므로 이 속성의 값을 바꿀 필요는 없다. 
            </remark>
        </member>
        <member name="T:TheOne.Windows.Forms.ProgressDialogBase">
            <summary>
            작업 진행 상황을 알리는 기본 다이얼로그
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.ProgressDialogBase.#ctor">
            <summary>
            ProgressDialog 객체를 생성한다.
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.ProgressDialogBase.StartProgress">
            <summary>
            진행 상황(progress) 다이얼로그를 표시한다
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.ProgressDialogBase.StopProgress">
            <summary>
            진행 상황(progress) 다이얼로그를 감춘다
            </summary>
        </member>
        <member name="F:TheOne.Windows.Forms.ProgressDialogBase.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.ProgressDialogBase.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TheOne.Windows.Forms.ProgressDialogBase.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.ProgressDialogBase.ProgressMessage">
            <summary>
            진행 상황 메시지를 설정한다
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.ProgressDialogBase.ShowProgressValue">
            <summary>
            진행 상황 값 표시 여부를 설정한다.
            </summary>        
        </member>
        <member name="P:TheOne.Windows.Forms.ProgressDialogBase.MaxValue">
            <summary>
            진행 상황 값의 최대치를 설정한다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.ProgressDialogBase.CurrentValue">
            <summary>
            진행 상황의 현재값을 설정한다
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.ProgressDialogBase.ProgressStyle">
            <summary>
            진행 상황의 표현 형태를 설정한다.
            </summary>
        </member>
        <member name="T:TheOne.Windows.Forms.ProgressDialog">
            <summary>
            작업 진행 상황을 알리는 기본 다이얼로그
            </summary>
        </member>
        <member name="F:TheOne.Windows.Forms.ProgressDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.ProgressDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TheOne.Windows.Forms.ProgressDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.ProgressDialog.#ctor">
            <summary>
            ProgressDialog 객체를 생성한다.
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.ProgressDialog.StartProgress">
            <summary>
            진행 상황(progress) 다이얼로그를 표시한다
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.ProgressDialog.StopProgress">
            <summary>
            진행 상황(progress) 다이얼로그를 감춘다
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.ProgressDialog.ProgressMessage">
            <summary>
            진행 상황 메시지를 설정한다
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.ProgressDialog.ShowProgressValue">
            <summary>
            진행 상황 값 표시 여부를 설정한다.
            </summary>        
        </member>
        <member name="P:TheOne.Windows.Forms.ProgressDialog.MaxValue">
            <summary>
            진행 상황 값의 최대치를 설정한다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.ProgressDialog.CurrentValue">
            <summary>
            진행 상황의 현재값을 설정한다
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.ProgressDialog.ProgressStyle">
            <summary>
            진행 상황의 표현 형태를 설정한다.
            </summary>
        </member>
        <member name="T:TheOne.Windows.Forms.Menu.FlowMenuList">
            <summary>
            메뉴 아이템들을 flow layout에 의해 나열하는 컨트롤
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.FlowMenuList.#ctor">
            <summary>
            FlowMenuList의 인스턴스를 생성하고 초기화 한다.
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.FlowMenuList.Add(TheOne.UIModel.MenuItemInfo)">
            <summary>
            메뉴 라벨을 추가한다.
            </summary>
            <param name="menuInfo">생성할 메뉴 라벨에 대한 <see href="TheOne.UIModel.MenuItemInfo">MenuItemInfo</see> 객체</param>
            <returns>생성한 메뉴 라벨 컨트롤 객체</returns>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.FlowMenuList.GetSelectedMenuItemInfo">
            <summary>
            선택된 메뉴의 메뉴 아이템 정보 객체를 반환한다.
            </summary>
            <returns>선택된 메뉴를 나타내는 메뉴 아이템 정보(<see href="TheOne.UIModel.MenuItemInfo">MenuItemInfo</see>) 객체</returns>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.FlowMenuList.UnselectMenuItem">
            <summary>
            현재 선택된 메뉴 아이템의 선택을 해제한다.
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.FlowMenuList.SelectMenuItem(System.String)">
            <summary>
            메뉴 id를 통해 메뉴 목록에서 메뉴 아이템을 선택한다.
            </summary>
            <param name="id">선택할 메뉴 아이템의 아이디</param>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.FlowMenuList.SelectMenuItem(TheOne.UIModel.MenuItemInfo)">
            <summary>
            메뉴 아이템 정보를 통해 메뉴 목록에서 메뉴 아이템을 선택한다.
            </summary>
            <param name="menuInfo">선택할 메뉴 아이템을 나타내는 메뉴 아이템 정보(<see href="TheOne.UIModel.MenuItemInfo">MenuItemInfo</see>) 객체</param>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.FlowMenuList.RemoveMenuItem(TheOne.UIModel.MenuItemInfo)">
            <summary>
            메뉴 아이템 목록에서 메뉴 아이템을 제거한다.
            </summary>
            <param name="menuInfo">제거할 메뉴 아이템을 나타내는 메뉴 아이템 정보(<see href="TheOne.UIModel.MenuItemInfo">MenuItemInfo</see>) 객체</param>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.FlowMenuList.Clear">
            <summary>
            메뉴 아이템들을 모두 제거한다.
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.FlowMenuList.CreateControlsInstance">
            <summary>
            디자인 타임에 미리보기가 가능하도록 예제 아이템을 추가한다.
            </summary>
            <remarks>
            <para>이 메쏘드는 디자인 타임을 위한 것으로 런타임에서는 베이스 구현과 동일하다.</para>
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.FlowMenuList.OnFontChanged(System.EventArgs)">
            <summary>메뉴리스트의 폰트가 변경되면 메뉴 라벨들을 업데이트 한다.</summary>
            <param name="e">표준 이벤트 매개변수 객체</param>
        </member>
        <member name="E:TheOne.Windows.Forms.Menu.FlowMenuList.MenuSelected">
            <summary>
            나열된 메뉴 아이템들 중 하나가 선택되었을 때 발생하는 이벤트.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Menu.FlowMenuList.LabelPadding">
            <summary>
            메뉴 라벨들 사이의 간격을 읽거나 설정한다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Menu.FlowMenuList.NormalFont">
            <summary>
            보통 상태의 메뉴 라벨을 위한 폰트를 읽거나 설정한다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Menu.FlowMenuList.NormalImage">
            <summary>
            보통 상태의 메뉴 라벨을 위한 배경 이미지
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Menu.FlowMenuList.MouseHoverFont">
            <summary>
            마우스 호버 상태의 메뉴 라벨을 위한 폰트를 읽거나 설정한다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Menu.FlowMenuList.MouseHoverImage">
            <summary>
            마우스 호버 상태의 메뉴 라벨을 위한 배경 이미지
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Menu.FlowMenuList.SelectedFont">
            <summary>
            선택 상태의 메뉴 라벨을 위한 폰트를 읽거나 설정한다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Menu.FlowMenuList.SelectedImage">
            <summary>
            선택 상태의 메뉴 라벨을 위한 배경 이미지
            </summary>
        </member>
        <member name="F:TheOne.Windows.Forms.Controls.DownloadDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.Controls.DownloadDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TheOne.Windows.Forms.Controls.DownloadDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.Controls.DownloadDialog.btnRun_Click(System.Object,System.EventArgs)">
            <summary>
            실행
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.Controls.DownloadDialog.btnSave_Click(System.Object,System.EventArgs)">
            <summary>
            저장
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Controls.DownloadDialog.ExecuteType">
            <summary>
            S:Save, R:Run
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Controls.DownloadDialog.FileName">
            <summary>
            파일명
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Controls.DownloadDialog.FileSize">
            <summary>
            파일 크기
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Controls.DownloadDialog.DownloadMessage">
            <summary>
            메시지
            </summary>
        </member>
        <member name="T:TheOne.Windows.Forms.ProgressDialogFactory">
            <summary>
            프로그레스 다이알로그 폼 팩토리 클래스
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.ProgressDialogFactory.CreateProgressDialogForm">
            <summary>
            프로그레스 다이알로그 폼을 생성하여 반환한다.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TheOne.Windows.Forms.Menu.MenuLoader">
            <summary>
            메뉴 아이템을 로드하는 메뉴 로더 클래스.
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.MenuLoader.LoadUIControl(TheOne.UIModel.MenuItemInfo,System.Exception@)">
            <summary>
            메뉴 아이템 정보가 나타내는 UI 컨트롤을 로드한다.
            </summary>
            <param name="menuInfo">로드할 UI 컨트롤 정보를 갖는 메뉴 아이템 정보(<see href="TheOne.UIModel.MenuItemInfo">MenuItemInfo</see>) 객체</param>
            <param name="resultException">UI 컨트롤을 생성하면서 발생한 예외</param>
            <returns>생성한 UI 컨트롤 및 다른 정보를 포함하는 UI 컨트롤 정보(<see href="TheOne.Windows.Forms.Menu.UIControlInfo">UIControlInfo</see>) 객체</returns>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.MenuLoader.LoadUIControl(TheOne.Windows.Forms.Menu.MenuControlBase,TheOne.UIModel.MenuItemInfo,System.Exception@)">
            <summary>
            메뉴 아이템 정보가 나타내는 UI 컨트롤을 로드한다.
            </summary>
            <param name="menuControl">UI 컨트롤을 로드하는 메뉴 컨트롤 객체</param>
            <param name="menuInfo">로드할 UI 컨트롤 정보를 갖는 메뉴 아이템 정보(<see href="TheOne.UIModel.MenuItemInfo">MenuItemInfo</see>) 객체</param>
            <param name="resultException">UI 컨트롤을 생성하면서 발생한 예외</param>
            <returns>생성한 UI 컨트롤 및 다른 정보를 포함하는 UI 컨트롤 정보(<see href="TheOne.Windows.Forms.Menu.UIControlInfo">UIControlInfo</see>) 객체</returns>
        </member>
        <member name="P:TheOne.Windows.Forms.Menu.MenuLoader.SplashFormType">
            <summary>
            메뉴 로딩 스플래쉬 폼을 위한 타입을 읽거나 설정한다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Menu.MenuLoader.UIAssemblyPath">
            <summary>
            ClickOnce 기반의 배포 시나리오에서 UI 어셈블리를 로드할 때 사용하는 UI 어셈블리의 상대 경로.
            </summary>
            <remarks>
            ClickOnce를 이용하여 메인(메뉴) 어셈블리가 배포되고 로드되는 경우, 메인 어셈블리로부터
            상대 경로에서 UI 어셈블리를 다운받고 로드(LoadFrom 사용)하려고 시도한다.
            </remarks>
        </member>
        <member name="P:TheOne.Windows.Forms.Menu.MenuLoader.UseThreadForSplash">
            <summary>
            메뉴 어셈블리(DLL) 로드 시 표시되는 스플래쉬 윈도우에 별도의 쓰레드를 사용할 것인지 여부.
            </summary>
            <remarks>
            이 속성의 기본값은 false 이며 스플래쉬 윈도우를 표시하는데 별도의 쓰레드를 사용하지 않는다.
            이 경우, 스플래쉬 윈도우에서 타이머 등을 이용하여 애니메이션, 프로그래스 바 등이 작동하지
            않게 된다. 이 속성을 true로 설정하면 스플래쉬 윈도우가 별도의 쓰레드를 통해 표시되며
            애니메이션, 프로그래스 바 등이 작동한다. 일반적으로 빠르게 스플래쉬 윈도우를 표시하기 위해서는
            스플래쉬 윈도우를 위한 폼은 간단한 이미지만을 사용하도록 하고 별도의 쓰레드를 사용하지 않는 것이
            좋다. 만약 애니메이션과 같이 UI 적인 요소가 필요하다면 SlashFormType 속성을 사용하여
            사용자 정의 폼을 스플래쉬 폼으로 사용하고 UseThreadForSplash 속성을 true로 지정할 수 있다.
            사용자 정의 스플래쉬 폼이 메인 UI 쓰레드와 다른 쓰레드에서 작동하기 때문에 이 폼이 사용하는
            UI 컨트롤이 메인 UI 쓰레드를 가정하고 있다면 오류를 유발할 수 있음에 주의해야 한다.
            </remarks>
        </member>
        <member name="T:TheOne.Windows.Forms.Menu.MenuItemEventHandler">
            <summary>
            메뉴 프레임워크에 의해 발생하는 다양한 메뉴 이벤트 핸들러를 위한 대리자(delegate) 타입.
            </summary>
            <param name="sender">이벤트를 발생시킨 객체.</param>
            <param name="e">메뉴 아이템 정보를 포함하는 <see href="TheOne.Windows.Forms.Menu.MenuItemEventArgs">MenuItemEventArgs</see> 매개변수 객체.</param>
        </member>
        <member name="T:TheOne.Windows.Forms.Menu.MenuItemEventArgs">
            <summary>
            메뉴 프레임워크에 의해 발생하는 이벤트의 이벤트 매개변수 클래스.
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.MenuItemEventArgs.#ctor(TheOne.UIModel.MenuItemInfo)">
            <summary>
            이벤트 매개변수 객체를 생성하고 초기화 한다.
            </summary>
            <param name="menuInfo">이벤트와 관련된 메뉴 아이템을 나타내는 <see href="TheOne.UIModel.MenuItemInfo">MenuItemInfo</see> 객체.</param>
        </member>
        <member name="P:TheOne.Windows.Forms.Menu.MenuItemEventArgs.MenuItemInfo">
            <summary>
            이벤트와 관련있는 메뉴 아이템 정보 객체를 반환한다.
            </summary>
            <value>이벤트와 관련있는 메뉴 아이템을 나타내는 <see href="TheOne.UIModel.MenuItemInfo">MenuItemInfo</see> 객체.</value>
        </member>
        <member name="T:TheOne.Windows.Forms.Menu.UIControlEventHandler">
            <summary>
            메뉴 프레임워크에 의해 발생하는 다양한 UI 컨트롤 이벤트 핸들러를 위한 대리자(delegate) 타입.
            </summary>
            <param name="sender">이벤트를 발생시킨 객체.</param>
            <param name="e">UI 컨트롤 정보를 포함하는 <see href="TheOne.Windows.Forms.Menu.UIControlEventArgs">UIControlEventArgs</see> 매개변수 객체.</param>
        </member>
        <member name="T:TheOne.Windows.Forms.Menu.UIControlEventArgs">
            <summary>
            메뉴 프레임워크에 의해 발생하는 UI 컨트롤 제어 이벤트의 이벤트 매개변수 클래스.
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.UIControlEventArgs.#ctor(TheOne.Windows.Forms.Menu.UIControlInfo)">
            <summary>
            이벤트 매개변수 객체를 생성하고 초기화 한다.
            </summary>
            <param name="ctrlInfo">이벤트와 관련된 UI 컨트롤의 정보를 나타내는 <see href="TheOne.Windows.Forms.Menu.UIControlInfo">UIControlInfo</see> 객체.</param>
        </member>
        <member name="P:TheOne.Windows.Forms.Menu.UIControlEventArgs.UIControlInfo">
            <summary>
            이벤트와 관련된 UI 컨트롤의 정보 객체를 반환한다.
            </summary>
            <value>이벤트와 관련된 UI 컨트롤의 정보를 나타내는 <see href="TheOne.Windows.Forms.Menu.UIControlInfo">UIControlInfo</see> 객체.</value>
        </member>
        <member name="T:TheOne.Windows.Forms.Itf_Redirect">
            <summary>
            스마트 클라이언트가 컨테이너에게 Redirect를 요청하는 이벤트용 delegate
            </summary>
        </member>
        <member name="T:TheOne.Windows.Forms.Itf_AuthenticationError">
            <summary>
            스마트 클라이언트가 컨테이너에게 인증 오류를 알리는 이벤트용 delegate
            </summary>
        </member>
        <member name="T:TheOne.Windows.Forms.Itf_AuthorityError">
            <summary>
            스마트 클라이언트가 컨테이너에게 권한 오류를 알리는 이벤트용 delegate
            </summary>
        </member>
        <member name="T:TheOne.Windows.Forms.Itf_Exit">
            <summary>
            사용자 종료 이벤트용 delegate
            </summary>
        </member>
        <member name="T:TheOne.Windows.Forms.DSmartClientEvent">
            <summary>
            스마트 클라이언트와 외부 컨테이너와의 통신을 위한 이벤트 인터페이스
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.DSmartClientEvent.Redirect(System.Int32,System.String)">
            <summary>
            컨테이너에게 Redirect를 요구한다.
            </summary>
            <param name="reason">Redirect의 원인 코드</param>
            <param name="url">Redirect할 URL</param>
        </member>
        <member name="M:TheOne.Windows.Forms.DSmartClientEvent.AuthenticationError">
            <summary>
            인증 오류가 발생했음을 컨테이너에게 알린다.
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.DSmartClientEvent.AuthorityError">
            <summary>
            권한 오류가 발생했음을 컨테이너에게 알린다.
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.DSmartClientEvent.Exit">
            <summary>
            사용자 종료를 요구 한다.
            </summary>
        </member>
        <member name="T:TheOne.Windows.Forms.UserControlBase">
            <summary>
            스마트 클라이언트 화면에 대한 베이스 클래스
            </summary>
            <remarks>
            <para>UserControlBase 클래스는 <see cref="T:System.Windows.Forms.UserControl"/>에서 파생된 클래스로써
            스마트 클라이언트를 작성하는데 필요한 다양한 기능을 포함하고 있다. UserControlBase 클래스를
            사용자 정의 컨트롤(UserControl)의 베이스 클래스로 사용함으로써 인증, 권한 기능 등을 비롯한
            기본적으로 화면이 필요한 기능과 스마트 클라이언트가 갖는 기술적인 문제를 모두 해결할 수 있다.</para>
            <para>UserControlBase 클래스는 기본적으로 바탕색으로 흰색을, 폰트는 9pt 굴림을 사용한다.
            일반적인 폼 기반인 경우에는 문제가 되지 않지만 브라우저 임베디드 스마트 클라이언트는
            ActiveX와 마찬가지로 브라우저의 폰트와 바탕색(CSS 기반)이 기본 적용되고 이는 UI를 깔끔하게 처리하지
            못하는 경우가 많기 때문이다.</para>
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.UserControlBase.#ctor">
            <summary>
            스마트 클라이언트 용 사용자 정의 컨트롤의 생성자.
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.UserControlBase.OnLoad(System.EventArgs)">
            <summary>
            Load 이벤트를 발생시킨다. UI 컨트롤을 위해 필요한 인증, 권한 확인 등의 작업을 수행한다.
            </summary>
            <param name="e">표준 이벤트 객체</param>
        </member>
        <member name="M:TheOne.Windows.Forms.UserControlBase.InitControl(System.Object)">
            <summary>
            UI 컨트롤이 Load되었고 초기화를 수행하는 메쏘드
            </summary>
            <param name="args">임의의 매개변수</param>
            <remarks>
            이 메쏘드는 프레임워크 메뉴 컨트롤에 의해 호출되거나 UI 컨트롤이 포함된
            웹 페이지의 스크립트가 초기화 시에 호출해 주는 메쏘드로서 Load 이벤트가
            발생한 이후에 호출되어 진다.
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.UserControlBase.Close">
            <summary>
            UI 컨트롤을 닫도록 메뉴 컨트롤에게 요청한다.
            </summary>
            <remarks>
            UI 컨트롤, 즉 UserControlBase 클래스에서 파생된 컨트롤은 폼(Form)이 아닌 사용자 정의
            컨트롤(User Control)이기 때문에 스스로를 닫을 능력이 없다. UI 컨트롤을 닫는 기능은
            UI 컨트롤을 호스팅하는 메뉴 컨트롤에 의해 좌우 된다. 따라서 이 메쏘드는 UI 컨트롤을
            호스팅하는 메뉴 컨트롤이 존재하지 않으면 작동하지 않는다.
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.UserControlBase.TerminateControl">
            <summary>
            UI 컨트롤이 제거됨을 알리는 메쏘드
            </summary>
            <returns>컨트롤을 닫을 것인지 여부</returns>
            <remarks>
            이 메쏘드는 프레임워크 메뉴 컨트롤이 컨트롤을 제거할 때 호출되는 메쏘드이다.
            이 메쏘드가 false를 반환하면 UI 컨트롤은 닫히지 않는다.
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.UserControlBase.Dispose(System.Boolean)">
            <summary> 
            리소스 해제를 위한 Dispose 패턴 구현.
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.UserControlBase.SetUserInfoContext(TheOne.Security.UserInfoContext)">
            <summary>
            사용자 인증 정보 객체를 설정한다.
            </summary>
            <param name="ctx">UserInfoContext 객체 혹은 그 파생 객체</param>
            <remarks>
            <para>사용자 인증 정보 객체는 UserControlBase가 스스로 그 값을 설정할 수도 있으며
            메뉴 컨트롤과 같은 UserControlBase(혹은 그 파생 클래스)를 호스팅 하는 외부에서
            설정해 줄 수도 있다. UserControlBase의 호스트는 SetUserInfoContext 메쏘드 호출을 통해
            UserControlBase의 사용자 인증 정보를 설정한다.</para>
            <para>메뉴 프레임워크가 사용되는 경우, 메뉴 프레임워크는 메뉴를 호스팅하는 윈폼 혹은
            브라우저 HTML로 부터 인증 정보를 인식하여 UserInfoContext를 구성하며 메뉴에 의해 UI 컨트롤
            (UserControlBase 파생 클래스)이 로드될 때 SetUserInfoContext 메쏘드를 호출하여 UI 컨트롤이
            사용할 사용자 정보를 설정한다.</para>
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.UserControlBase.SetSecurityContext(TheOne.Security.SecurityContext)">
            <summary>
            권한 정보 객체를 설정한다.
            </summary>
            <param name="ctx">SecurityContext 객체</param>
            <remarks>
            <para>팝업 폼 내에 UserControlBase 이 포함될 때, UserControlBase 자체가 권한 정보를 읽지 않고
            팝업을 호출한 부모에 의해 권한 정보가 설정된다면 이 메쏘드를 통해 권한 정보를 설정할 수
            있다. 이 메쏘드에 호출에 의해 UserControlBase 의 SecurityContext가 설정된다.</para>
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.UserControlBase.CreateUserInfoContext">
            <summary>
            사용자 정보를 담는 UserInfoContext 객체를 반환한다.
            </summary>
            <returns>UserInfoContext 객체 혹은 그 파생 객체</returns>
            <remarks>
            UserControlBase에서 파생되는 사용자 정의 컨트롤은 사용자 정보 및 추가 인증 및 개인
            정보를 UserInfoContext 클래스를 통해 기록해 둘 수 있다.
            UserControlBase의 파생클래스는 CreateUserInfoContext 메쏘드를 오버라이드 함으로써
            필요한 정보를 가지고 있는 UserInfoContext 객체를 생성하도록 하고 이 메쏘드에서 생성된
            UserInfoContext 객체는 UserInfo 프로퍼티를 통해 액세스 가능하다.
            <br/><br/>
            UserInfoContext 객체를 생성하기 위한 정보는 UserControlBase 의 컨테이너(메뉴 컨트롤 혹은 IE 브라우저)가
            설정해 주는 AuthString 프로퍼티를 통해 얻거나, 필요에 따라 웹 서비스 호출, COM+ 컴포넌트 호출 등을
            통해 정보를 얻어 낼 수도 있다.
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.UserControlBase.CreateSecurityContext">
            <summary>
            사용자 권한 정보를 담는 SecurityContext 객체를 반환한다.
            </summary>
            <returns>ISecurityContext 인터페이스를 구현하는 SecurityContext 객체</returns>
            <remarks>
            SecurityContext 객체는 사용자의 현재 화면에 대한 권한 정보를 담는 객체로서
            반드시 ISecurityContext 인터페이스를 구현해야 한다.
            이 메쏘드는 RuntimeEnvironment 클래스의 DefaultSecurityContextType 프로퍼티가
            지시하는 타입의 SecurityContext 객체를 생성하여 반환한다.
            생성되는 SecurityContext 객체에 전달되는 매개변수는 UserControlBase 인스턴스
            혹은 그 파생 클래스의 인스턴스가 전달된다.
            <br/><br/>
            필요에 따라서 UserControlBase의 파생클래스에서 CreateSecurityContext 메쏘드를
            오버라이드 하여 개별 SecurityContext 객체를 반환할 수도 있다.
            <br/><br/>
            이 메쏘드가 반환한 SecurityContext 객체는 UserControlBase 클래스의 SecurityContext 프로퍼티를
            통해 접근할 수 있다.
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.UserControlBase.SetButtonsByAuthLevel">
            <summary>
            필요에 의해 비 표준 버튼들에 대해 권한 레벨을 설정한다.
            </summary>
            <remarks>
            <para>버튼들에 대한 권한 설정은 OnLoad 이벤트 발생 전에 수행된다. 그리고 SetButtonsByAuthLevel 메쏘드 역시
            OnLoad 이벤트 발생 전에 호출됨에 유의한다. 따라서 버튼의 권한 설정을 오버라이드 할 수 있다.</para>
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.UserControlBase.PurgeMouseKeyboardEvent">
            <summary>
            마우스 이벤트와 키보드 이벤트를 필터링 하여 발생하지 않도록 한다.
            </summary>
            <remarks>
            서버 호출이나 기타 시간을 요하는 동기(synchronous)작업 후, 작업 시간동안
            사용자의 마우스/키보드 입력을 필터링 하는 용도로 사용한다.
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.UserControlBase.BeforeInvokeServer">
            <summary>
            서버 호출 등과 같이 시간을 소요하는 동기 작업을 수행하기 전에 호출한다.
            </summary>
            <remarks>
            BeforeInvokeServer 메쏘드는 마우스 커서를 모래 시계로 바꾸고
            필요에 따라 작업 진행 다이얼로그(Progress Dialog)를 표시하는 등의
            작업을 수행한다.
            <br/><br/>
            필요에 따라 이 메쏘드를 오버라이드 하여 각 화면에서 버튼, 입력 상자들을
            disable 하는 작업을 수행할 수 있다.
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.UserControlBase.BeforeInvokeServer(System.Boolean)">
            <summary>
            서버 호출 등과 같이 시간을 소요하는 동기 작업을 수행하기 전에 호출한다.
            </summary>
            <param name="showProgress">작업 진행 다이얼로그 표시 여부</param>
            <remarks>
            BeforeInvokeServer 메쏘드는 마우스 커서를 모래 시계로 바꾸고
            필요에 따라 작업 진행 다이얼로그(Progress Dialog)를 표시하는 등의
            작업을 수행한다.
            <br/><br/>
            필요에 따라 이 메쏘드를 오버라이드 하여 각 화면에서 버튼, 입력 상자들을
            disable 하는 작업을 수행할 수 있다.
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.UserControlBase.BeforeInvokeServer(System.String)">
            <summary>
            서버 호출 등과 같이 시간을 소요하는 동기 작업을 수행하기 전에 호출한다.
            </summary>
            <param name="message">작업 진행 다이얼로그에 표시할 메시지</param>
            <remarks>
            BeforeInvokeServer 메쏘드는 마우스 커서를 모래 시계로 바꾸고
            필요에 따라 작업 진행 다이얼로그(Progress Dialog)를 표시하는 등의
            작업을 수행한다.
            <br/><br/>
            필요에 따라 이 메쏘드를 오버라이드 하여 각 화면에서 버튼, 입력 상자들을
            disable 하는 작업을 수행할 수 있다.
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.UserControlBase.BeforeInvokeServer(System.Boolean,System.String,System.Boolean,System.Int32)">
            <summary>
            서버 호출 등과 같이 시간을 소요하는 동기 작업을 수행하기 전에 호출한다.
            </summary>
            <param name="showProgress">작업 진행 다이얼로그 표시 여부</param>
            <param name="message">작업 진행 다이얼로그에 표시할 메시지</param>
            <param name="showProgressValue">작업 진행 상황 값 표시 여부</param>
            <param name="progressMaxValue">작업 진행 다이얼로그의 진행 상황 최대 값</param>
            <remarks>
            BeforeInvokeServer 메쏘드는 마우스 커서를 모래 시계로 바꾸고
            필요에 따라 작업 진행 다이얼로그(Progress Dialog)를 표시하는 등의
            작업을 수행한다.
            <br/><br/>
            필요에 따라 이 메쏘드를 오버라이드 하여 각 화면에서 버튼, 입력 상자들을
            disable 하는 작업을 수행할 수 있다.
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.UserControlBase.SetCurrentProgressValue(System.Int32)">
            <summary>
            진행 상태 값을 설정한다.
            </summary>
            <param name="currentValue">진행 상태 값</param>
        </member>
        <member name="M:TheOne.Windows.Forms.UserControlBase.AfterInvokeServer">
            <summary>
            서버 호출 등과 같이 시간을 소요하는 동기 작업을 수행한 후에 호출한다.
            </summary>
            <remarks>
            반드시 BeforeInvokeServer 메쏘드 호출과 짝을 이루어 호출되어야 하므로
            try ~ finally로 묶어주는 것이 좋다. AfterInvokeServer는 마우스 커서를 원상
            복구하고 표시된 다이얼로그를 감추는 등의 작업을 수행한다.
            <br/><br/>
            필요에 따라 이 메쏘드를 오버라이드 하여 각 화면에서 버튼, 입력 상자들을
            원상 복구하는 작업을 수행할 수 있다.
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.UserControlBase.InitializeTimeoutHandler(System.String,System.String,System.Boolean)">
            <summary>
            타임아웃 핸들러를 Configuration 설정에 의해 초기화 한다. 
            </summary>
            <remarks>
            이 메쏘드는 프레임워크 내부에서 사용되는 메쏘드로서 일반 개발자가 직접
            호출해서는 안 된다.
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.UserControlBase.InitTimeoutEx(System.String,System.String,System.Boolean)">
            <summary>
            타임아웃을 초기화 한다.
            </summary>
            <param name="typeName">타임아웃 매니저 타입</param>
            <param name="methodName">초기화할 메쏘드 이름</param>
            <param name="readConfig">설정값 읽기 여부</param>
            <remarks>
            이 메쏘드는 일부 특별한 경우를 제외하고 일반 개발자가 호출해서는 안 된다.
            컨트롤이 메뉴를 사용하지 않고 독립적으로 수행될 때 타임아웃 설정을 초기화한다.
            이 메쏘드는 대개 컨트롤을 호스팅하는 웹 페이지의 javascript가 컨트롤이
            로드된 직후에 호출한다.
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.UserControlBase.ProcessTabKey(System.Boolean)">
            <summary>
            탭키를 통한 이동이 사용자 정의 컨트롤 바깥으로 나가지 않도록 제어 한다.
            </summary>
            <param name="forward">전/후 방향</param>
            <returns>컨트롤 선택 여부</returns>
        </member>
        <member name="M:TheOne.Windows.Forms.UserControlBase.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            <summary>
            스마트 클라이언트 상에서 CTRL+C, CTRL+A 가 처리되지 않는 현상을
            패치하는 구현
            </summary>
            <param name="msg">Windows 메세지 구조체</param>
            <param name="keyData">키 상황을 나타내는 Keys 열거자</param>
            <returns>커맨드 키로 처리 되었음을 나타내는 boolean 값. Control.ProcessCmdKey 메쏘드 참조.</returns>
        </member>
        <member name="M:TheOne.Windows.Forms.UserControlBase.OnShown(System.EventArgs)">
            <summary>
            Shown 이벤트를 발생시킨다.
            </summary>
            <param name="e">이벤트 객체 (EventArgs.Empty)</param>
        </member>
        <member name="M:TheOne.Windows.Forms.UserControlBase.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paint 이벤트를 발생시킨다.
            </summary>
            <param name="e">이벤트 데이터가 들어 있는 PaintEventArgs 객체. </param>
        </member>
        <member name="M:TheOne.Windows.Forms.UserControlBase.ExecWebScript(System.String,System.String)">
            <summary>
            UI 컨트롤을 호스팅하는 외부 브라우저에 대해 스크립트를 수행한다.
            </summary>
            <param name="script">스크립트 문자열</param>
            <param name="language">스크립트 언어(VBScript 혹은 javascript)</param>
        </member>
        <member name="M:TheOne.Windows.Forms.UserControlBase.TheOne#Windows#Forms#DSmartClientEventSource#Fire_Redirect(System.Int32,System.String)">
            <summary>
            Redirect 가 필요함을 컨테이너(웹 페이지, 윈폼)에게 알린다.
            </summary>
            <param name="reason">Redirect 원인 코드 (어플리케이션 정의)</param>
            <param name="url">리다이렉트할 URL</param>
        </member>
        <member name="M:TheOne.Windows.Forms.UserControlBase.TheOne#Windows#Forms#DSmartClientEventSource#Fire_AuthenticationError">
            <summary>
            인증(로그온) 오류가 발생했음을 컨테이너(웹 페이지, 윈폼)에게 알린다.
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.UserControlBase.TheOne#Windows#Forms#DSmartClientEventSource#Fire_AuthorityError">
            <summary>
            권한 오류가 발생했음을 컨테이너(웹 페이지, 윈폼)에게 알린다.
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.UserControlBase.TheOne#Windows#Forms#DSmartClientEventSource#Fire_Exit">
            <summary>
            어플리케이션 종료 이벤트를 발생 시킨다.
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.UserControlBase.DoExit">
            <summary>
            어플리케이션 종료 이벤트를 발생 시킨다.
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.UserControlBase.UINavigate(System.String,System.Object)">
            <summary>
            주어진 메뉴 ID로 네비게이션 한다.
            </summary>
            <param name="destinationMenuID">네비게이트할 메뉴 ID</param>
            <param name="args">넘겨줄 매개변수</param>
            <remarks>
            주어진 메뉴 ID가 이미 열려 있다면 해당 탭으로 이동하고 그렇지 않은 경우
            새로운 탭이 열리게 된다. args 매개변수는 InitControl 메쏘드 호출을 통해
            전달되게 된다.<br/>
            UINavigate를 통해 열린 메뉴는 UIGoBack 메쏘드 호출을 통해 되돌아 갈 수 있다.
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.UserControlBase.UIGoBack">
            <summary>
            현재 화면을 Navigate 한 이전 메뉴 ID로 되돌아 간다.
            </summary>
            <returns>이전 UI 컨트롤로 되돌아 갔는지 여부를 나타내는 boolean 값. 이전 UI 컨트롤로 되돌아 갔다면 true를,
            이전 UI 컨트롤이 닫혔거나 오류가 발생하면 false를 반환한다.</returns>
            <remarks>
            현재 UI 화면이 <see href="UINavigate">UINavigate</see>로 열렸다면 이전 화면으로 되돌아 간다.
            만약 UINavigate를 호출했던 이전 UI 컨트롤이 닫혔다면 아무런 작업도 하지 않고 false를 반환한다.
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.UserControlBase.UIMoveTo(System.String,System.Object)">
            <summary>
            주어진 메뉴 ID로 이동 한다.
            </summary>
            <param name="destinationMenuID">이동할 메뉴 ID</param>
            <param name="args">넘겨줄 매개변수</param>
            <remarks>
            주어진 메뉴 ID가 이미 열려 있다면 해당 UI 컨트롤이 활성화 되고 그렇지 않은 경우
            메뉴가 새로이 로드된다. args 매개변수는 목적지 UI 컨트롤의 InitControl이 호출되면서 전달된다.
            UIMoveTo 메쏘드는 <see href="GoBack">GoBack</see>을 지원하지 않다는 점에서 <see href="UINavigate">UINavigate</see>와 다르다.
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.UserControlBase.UIReplaceTo(System.String,System.Object)">
            <summary>
            현재 UI 컨트롤이 닫히고 주어진 메뉴 ID의 UI 컨트롤이 로드되거나 활성화 된다.
            </summary>
            <param name="destinationMenuID">새로이 대체할 메뉴 ID</param>
            <param name="args">넘겨줄 매개변수</param>
            <remarks>
            주어진 메뉴 ID가 이미 열려 있다면 해당 화면이 활성화 되고 그렇지 않은 경우
            메뉴가 새로이 로드된다. 그리고 이 메쏘드를 호출한 UI 컨트롤을 닫힌다.
            args 매개변수는 목적지 UI 컨트롤의 InitControl이 호출되면서 전달된다.
            UIReplaceTo 메쏘드는 <see href="GoBack">GoBack</see>을 지원하지 않으며 호출자 UI 컨트롤이 닫힌다는 점에서
            <see href="UINavigate">UINavigate</see> 및 <see href="UIMoveTo">UIMoveTo</see> 메쏘드와 다르다.
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.UserControlBase.SetStandardControlSecurity">
            <summary>
            권한 제어 지정된 컨트롤들에 대해 권한에 의해 Enable/Disable 설정을 수행한다.
            </summary>
            <remarks>
            컨트롤이 디자인 타임에 false로 설정된 경우에는 권한에 의해 enable 되지 않는다.
            </remarks>
        </member>
        <member name="P:TheOne.Windows.Forms.UserControlBase.UserID">
            <summary>
            현재 UI 컨트롤(화면)을 사용하는 사용자 ID를 반환한다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.UserControlBase.UserInfo">
            <summary>
            현재 사용자 정보를 포함하는 UserInfoContext 객체를 반환한다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.UserControlBase.ProgramID">
            <summary>
            UI 컨트롤(화면)의 프로그램 ID를 읽거나 설정한다.
            </summary>
            <remarks>
            UserControlBase는 기본적으로 사용자 ID와 프로그램 ID를 통해 사용자 권한을 파악하려고 시도한다.
            ProgramID가 명시되지 않으면 클래스 이름이 ProgramID로 초기화 되며 
            메뉴 프레임워크에 의해 UI 컨트롤이 생성되었다면 ProgramID는 MenuID로 초기화 된다.
            </remarks>
        </member>
        <member name="P:TheOne.Windows.Forms.UserControlBase.SecurityContext">
            <summary>
            현재 UI 컨트롤(화면)에 대한 사용자의 권한 정보를 담는 보안 객체를 반환한다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.UserControlBase.IsLogon">
            <summary>
            현재 로그온 상태를 반환한다.
            </summary>
            <remarks>
            로그온 여부는 현재 UserControl에 UserInfoContext 객체가 설정되어 있는가와
            UserInfoContext 객체의 UserID 프로퍼티가 설정되어 있느가에 의해 판별된다.
            </remarks>
        </member>
        <member name="P:TheOne.Windows.Forms.UserControlBase.AuthString">
            <summary>
            인증 정보 문자열을 설정하는 프로퍼티.
            </summary>
            <remarks>
            인증 정보 문자열은 사용자 정의 컨트롤을 사용하는 외부 호스트에 의해
            사용자의 인증 정보를 넘겨주는데 사용된다. 인증 정보 문자열은 어플리케이션 마다
            그 사용법이 다르며 이 인증 정보 문자열의 해석 역시 어플리케이션에 의해 수행된다.
            프레임워크에서는 인증 문자열을 넘겨주는 역할만을 담당하며 메뉴 컨트롤 혹은
            UserControlBase에서 파생된 클래스에서 인증 문자열의 해석을 책임진다.
            </remarks>
        </member>
        <member name="P:TheOne.Windows.Forms.UserControlBase.RequireAuthentication">
            <summary>
            UI 컨트롤이 인증을 필요로 하는가 설정
            </summary>
            <remarks>
            이 설정은 Load 이벤트가 발생하기 전, 즉 컨트롤 생성 후 부터
            컨테이너의 Controls.Add 호출 전 사이에 설정되어야 한다.
            </remarks>
        </member>
        <member name="P:TheOne.Windows.Forms.UserControlBase.RequireAuthorization">
            <summary>
            UI 컨트롤이 권한검사를 필요로 하는가 설정
            </summary>
            <remarks>
            이 설정은 Load 이벤트가 발생하기 전, 즉 컨트롤 생성 후 부터
            컨테이너의 Controls.Add 호출 전 사이에 설정되어야 한다.
            </remarks>
        </member>
        <member name="P:TheOne.Windows.Forms.UserControlBase.UserInfoContextType">
            <summary>
            UserControlBase 클래스에서 사용자 정보를 위해 생성할 UserInfoContext 타입 정보
            </summary>
            <remarks>
            <para>UI 컨트롤 프레임워크는 기본적으로 인증 정보를 생성할 때 UserInfoContextType 속성이
            지정하는 타입의 UserInfoContext 객체(UserInfoContext 클래스 혹은 그 파생 클래스)를
            생성한다. 이 프로퍼티에 값은 생성자에서 설정할 때만 유효하며 디폴트 값은
            UserInfoContext 클래스이다. Load 이벤트 발생 직전(OnLoad 메쏘드에서) 프레임워크는
            CreateUserInfoContext 메쏘드를 호출하며 이 메쏘드의 기본 구현은 UserInfoContextType 속성이
            지정하는 타입의 UserInfoContext 객체를 생성하여 사용한다.</para>
            <para>UserTypeInfoContextType 이 지정하는 클래스는 UserInfoContext 클래스에서 파생된 타입이어야
            하며, 문자열을 매개변수로 하는 생성자를 반드시 가져야 한다. 생성자에 전달되는 매개변수는
            인증 정보를 포함하는 문자열이다. 인증 정보 문자열을 파싱하여 적절한 정보로 변환하는 것은
            UserInfoContext (및 그 파생 클래스) 객체의 역할이다.</para>
            <para>UI 컨트롤 프레임워크의 기본 행동을 바꾸기 위해서는 CreateUserInfoContext 메쏘드를
            오버라이드 하면 되고 이 오버라이드 구현에 따라 UserInfoContextType 속성의 값을 사용하거나
            혹은 완전히 무시할 수도 있다.</para>
            </remarks>
            <example>
            public class MyUserControl : UserControlBase
            {
            	public MyUserControl()
            	{
            		this.UserInfoContextType = typeof(MyUserInfoContext);
            		
            		InitializeComponents();
            	}
            	
            	// 보다 명확한 형정의를 위해 UserInfo 프로퍼티를 재정의 한다.
            	protected new MyUserInfoContext UserInfo
            	{
            		get { return (MyUserInfoContext)base.UserInfo; }
            	}
            	
            	// 이하 코드 생략
            }
            
            public class MyUserInfoContext : UserInfoContext
            {
            	private string deptID;
            	
            	public MyUserInfoContext(string authString) : base("")
            	{
            		string[] info = authString.Split(";");
            		base.SetUserID(info[0]);
            		this.deptID = info[1];
            	}
            	
            	public string DeptID
            	{
            		get { return this.deptID; }
            	}
            }
            </example>
        </member>
        <member name="P:TheOne.Windows.Forms.UserControlBase.SecurityContextType">
            <summary>
            UI 컨트롤 프레임워크에서 생성할 SecurityContext 타입 정보
            </summary>
            <remarks>
            <para>프레임워크는 권한 정보를 생성할 때 SecurityContextType 속성이
            지정하는 타입의 SecurityContext 객체(SeucrityContext 혹은 그 파생 클래스)를
            생성한다. 이 속성의 값은 생성자에서 설정할 때만 유효하며 디폴트 값은
            모든 권한을 허용하는 DefaultSecurityContext 클래스이다.</para>
            </remarks>
        </member>
        <member name="P:TheOne.Windows.Forms.UserControlBase.MenuControl">
            <summary>
            UI 컨트롤을 호스팅하는 메뉴 컨트롤 참조를 반환한다.
            </summary>
            <value>메뉴 컨트롤을 나타내는 <see href="TheOne.Windows.Forms.Menu.MenuControlBase">MenuControlBase</see> 객체.</value>
            <remark>
            	<para>UI 컨트롤이 메뉴 프레임워크에 의해 호스팅되는 경우 MenuControl 속성은 UI 컨트롤을 호스팅하는
            	메뉴 컨트롤에 대한 참조를 반환한다. UI 컨트롤이 메뉴와는 독립적으로 사용될때 이 속성의 값은 null 이다.</para>
            </remark>
        </member>
        <member name="P:TheOne.Windows.Forms.UserControlBase.MenuItemInfo">
            <summary>
            UI 컨트롤과 연결된 메뉴 아이템 정보 객체를 반환한다.
            </summary>
            <value>UI 컨트롤과 연결된 메뉴 아이템 정보(<see href="TheOne.UIModel.MenuItemInfo">MenuItemInfo</see>) 객체.</value>
        </member>
        <member name="P:TheOne.Windows.Forms.UserControlBase.MenuID">
            <summary>
            현재 UI 컨트롤(화면)의 메뉴 ID를 반환한다.
            </summary>
            <remarks>
            프로그램 ID와 메뉴 ID는 대부분 일치하지만 항상 그렇지는 않다.
            예를 들어 동일한 프로그램이 서로 다른 메뉴 항목에 의해 로드되는 경우,
            메뉴 ID는 달라지게 된다.
            </remarks>
        </member>
        <member name="P:TheOne.Windows.Forms.UserControlBase.MenuExtraInfo">
            <summary>
            메뉴 XML의 extra 속성으로 주어진 정보를 반환한다.
            </summary>
            <remarks>
            메뉴 XML의 MenuItem 요소에는 extra 속성을 지정할 수 있고, 이 extra 속성에
            지정된 문자열 값은 UserControlBase.MenuExtraInfo 속성을 통해 읽을 수 있다.
            메뉴상에서 특정 매개변수를 전달하기 위한 목적으로 사용할 수 있다.
            </remarks>
        </member>
        <member name="P:TheOne.Windows.Forms.UserControlBase.InitThema">
            <summary>
            XP 테마 혹은 Vista 테마를 적용하는 코드 수행 여부. 프레임워크 내부 사용을 위한 속성이므로
            개발자는 이 속성을 사용하지 않는 것이 좋다.
            </summary>
            <remark>
            <para>Windows Forms에서 XP 테마 혹은 Vista 테마를 적용하기 위해서는 일련의 메쏘드 호출이 필요하다.
            이 호출은 어플리케이션 시작 시점에서 1회 호출해 주어야 한다. 대개 Windows Forms 어플리케이션은
            Main 메쏘드 내에서 다음과 같은 호출을 수행한다.</para>
            <code>
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            </code>
            <para>스마트 클라이언트, 특히 브라우저 임베디드 스마트 클라이언트는 수행될 Main 메쏘드가 존재하지
            않기 때문에 이 코드를 호출할 곳이 마땅치 않다.
            UserControlBase 클래스는 생성자에서 InitThema 속성의 값을 점검하여 아직 초기화가 되어 있지
            않다면(false 라면) 테마 설정을 수행하고 이 속성의 값을 true로 바꾼다.</para>
            프레임워크의 메뉴 컨트롤을 사용하는 경우라면 이 속성의 값을 바꿀 필요가 전혀 없다. 메뉴 컨트롤이
            필요한 작업을 모두 수행해줄 것이기 때문이다. 메뉴 컨트롤을 사용하지 않더라고 이 속성은 테마 설정
            후 자동으로 true로 바뀌므로 이 속성의 값을 바꿀 필요는 없다. 
            </remark>
        </member>
        <member name="E:TheOne.Windows.Forms.UserControlBase.Shown">
            <summary>
            사용자 정의 컨트롤이 화면 상에 표시 되었음을 알리는 이벤트
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.UserControlBase.IsIE7xParent">
            <summary>
            TopParent가 IE 7.x 이하 버전인지 아닌지를 가져옵니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.UserControlBase.CheckIEParent">
            <summary>
            TopParent가 Internet Explorer 인지 아닌지를 가져옵니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.UserControlBase.IEVersion">
            <summary>
            Internet Explorer의 버전을 가져옵니다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.UserControlBase.BrowserWindow">
            <summary>
            외부 브라우저 window 객체 포인터
            </summary>
            <remarks>
            외부 브라우저 객체 포인터. 프레임워크에 의해서만 사용되므로 일반 개발자는 이 속성을
            사용해서는 안된다.
            </remarks>
        </member>
        <member name="E:TheOne.Windows.Forms.UserControlBase.Redirect">
            <summary>
            리다이렉트 요청 이벤트
            </summary>
        </member>
        <member name="E:TheOne.Windows.Forms.UserControlBase.AuthenticationError">
            <summary>
            인증 오류 알림 이벤트
            </summary>
        </member>
        <member name="E:TheOne.Windows.Forms.UserControlBase.AuthorityError">
            <summary>
            권한 오류 알림 이벤트
            </summary>
        </member>
        <member name="E:TheOne.Windows.Forms.UserControlBase.Exit">
            <summary>
            사용자 종료 이벤트
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.UserControlBase.UICanGoBack">
            <summary>
            현재 UI 컨트롤이 뒤로 네비게이션 할 수 있는지 여부를 반환한다.
            </summary>
            <remarks>
            UICanGoBack 속성은 Load 이벤트 이후(Load 이벤트 포함)에서 읽을 수 있다.
            Load 이벤트 전에는 항상 false를 반환한다.
            </remarks>
        </member>
        <member name="P:TheOne.Windows.Forms.UserControlBase.QueryControls">
            <summary>
            조회 권한에 의해 제어되는 컨트롤 목록.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.UserControlBase.UpdateControls">
            <summary>
            수정 권한에 의해 제어되는 컨트롤 목록.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.UserControlBase.InsertControls">
            <summary>
            추가 권한에 의해 제어되는 컨트롤 목록.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.UserControlBase.DeleteControls">
            <summary>
            삭제 권한에 의해 제어되는 컨트롤 목록.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.UserControlBase.SaveControls">
            <summary>
            저장 권한에 의해 제어되는 컨트롤 목록.
            </summary>
        </member>
        <member name="T:TheOne.Windows.Forms.Menu.MenuTreeView">
            <summary>
            메뉴 아이템을 위한 트리 컨트롤.
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.MenuTreeView.AddMenuItem(TheOne.UIModel.MenuItemInfo)">
            <summary>
            메뉴 아이템을 트리 상에 추가한다.
            </summary>
            <param name="menuInfo">메뉴 아이템 정보 객체.</param>
            <returns>트리 상에 추가된 MenuTreeNode 객체.</returns>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.MenuTreeView.AddMenuItem(TheOne.Windows.Forms.Menu.MenuTreeNode,TheOne.UIModel.MenuItemInfo)">
            <summary>
            메뉴 아이템을 트리 상에 추가한다.
            </summary>
            <param name="rootNode">추가할 기준이 되는 트리 루트 노드. null 이면 최상위에 추가된다.</param>
            <param name="menuInfo">메뉴 아이템 정보 객체.</param>
            <returns>트리 상에 추가된 MenuTreeNode 객체.</returns>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.MenuTreeView.ClearMenuItems">
            <summary>
            트리 뷰 컨트롤 상의 모든 트리와 메뉴 노드 리스트를 클리어 한다.
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.MenuTreeView.OnMenuItemRightClick(TheOne.UIModel.MenuItemInfo,TheOne.Windows.Forms.Menu.MenuTreeNode,System.Windows.Forms.MouseEventArgs)">
            <summary>
            <see href="MenuItemRightClick">MenuItemRightClick</see> 이벤트를 발생시킨다.
            </summary>
            <param name="menuInfo">이벤트를 유발한 메뉴 아이템 정보 객체.</param>
            <param name="node">이벤트를 유발한 트리 노드 객체.</param>
            <param name="args">이벤트를 유발한 마우스 이벤트의 마우스 이벤트 매개변수 객체.</param>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.MenuTreeView.OnMenuItemLeftClick(TheOne.UIModel.MenuItemInfo,TheOne.Windows.Forms.Menu.MenuTreeNode,System.Windows.Forms.MouseEventArgs)">
            <summary>
            <see href="MenuItemLeftClick">MenuItemLeftClick</see> 이벤트를 발생시킨다.
            </summary>
            <param name="menuInfo">이벤트를 유발한 메뉴 아이템 정보 객체.</param>
            <param name="node">이벤트를 유발한 트리 노드 객체.</param>
            <param name="args">이벤트를 유발한 마우스 이벤트의 마우스 이벤트 매개변수 객체.</param>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.MenuTreeView.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            메뉴 아이템 오른쪽 클릭 및 메뉴 아이템 선택 이벤트를 발생을 처리하고 MouseUp 이벤트를 발생한다.
            </summary>
            <param name="e">MouseEventArgs 이벤트 매개변수 객체</param>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.MenuTreeView.OnAfterExpand(System.Windows.Forms.TreeViewEventArgs)">
            <summary>
            트리 노드가 확장 되었음을 알리는 AfterExpand 이벤트를 발생한다. 트리 노드의
            확장/축소 상태가 메뉴 아이템에 기록되도록 한다.
            </summary>
            <param name="e">이벤트 매개변수 객체</param>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.MenuTreeView.OnAfterCollapse(System.Windows.Forms.TreeViewEventArgs)">
            <summary>
            트리 노드가 축소 되었음을 알리는 AfterCollapse 이벤트를 발생한다. 트리 노드의
            확장/축소 상태가 메뉴 아이템에 기록되도록 한다.
            </summary>
            <param name="e">이벤트 매개변수 객체</param>
        </member>
        <member name="P:TheOne.Windows.Forms.Menu.MenuTreeView.MenuTreeNodeList">
            <summary>
            메뉴 트리 뷰 컨트롤이 내부적으로 관리하는 트리 노드에 대한 리스트를 반환한다.
            </summary>
            <remarks>
            메튜 트리 뷰 컨트롤은 메뉴 아이템들을 표현하는 트리 노드(<see cref="T:TheOne.Windows.Forms.Menu.MenuTreeNode">MenuTreeNode</see>)들에
            대한 리스트를 유지한다. 이 트리 노드를 이용하여 메뉴 아이템을 손쉽게 추가 제거할 수 있는 기능을 제공하는 것이다.
            MenuTreeNodeList는 이 리스트를 반환한다.
            </remarks>
        </member>
        <member name="E:TheOne.Windows.Forms.Menu.MenuTreeView.MenuItemRightClick">
            <summary>
            트리 노드에서 마우스 오른쪽 버튼이 클릭 되었음을 알리는 이벤트.
            </summary>
            <remarks>
            <para>NodeClick 이벤트나 Click 이벤트와 달리 반복적으로 발생하는 이벤트이다.</para>
            </remarks>
        </member>
        <member name="E:TheOne.Windows.Forms.Menu.MenuTreeView.MenuItemLeftClick">
            <summary>
            트리 노드에서 마우스 왼쪽 버튼이 클릭 되었음을 알리는 이벤트.
            </summary>
            <remarks>
            <para>NodeClick 이벤트나 Click 이벤트와 달리 반복적으로 발생하는 이벤트이다.</para>
            </remarks>
        </member>
        <member name="T:TheOne.Windows.Forms.Menu.MenuTreeNode">
            <summary>
            메뉴 트리 컨트롤의 트리 노드를 나타내는 MenuTreeNode 클래스 구현.
            </summary>
            <remarks>
            MenuTreeNode 클래스는 TreeNode 클래스에서 파생되었기 때문에 일반적인 트리 노드와 동일하게
            사용할 수 있다. MenuTreeNode 클래스는 추가적으로 메뉴 아이템에 관련된 다양한 속성과 기능들을
            제공한다.
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.MenuTreeNode.#ctor(TheOne.UIModel.MenuItemInfo)">
            <summary>
            트리 노드를 초기화한다.
            </summary>
            <param name="menuInfo">메뉴 트리 노드를 초기화할 메뉴 아이템 정보 객체.</param>
        </member>
        <member name="P:TheOne.Windows.Forms.Menu.MenuTreeNode.MenuItemInfo">
            <summary>
            메뉴 트리 노드에 설정된 메뉴 아이템 정보를 반환한다.
            </summary>
        </member>
        <member name="T:TheOne.Windows.Forms.Menu.MenuItemClickEventHandler">
            <summary>
            메뉴 아이템 클릭 이벤트 핸들러를 위한 delegate 타입.
            </summary>
            <param name="sender">이벤트를 발생한 객체.</param>
            <param name="e">이벤트 매개변수 객체.</param>
        </member>
        <member name="T:TheOne.Windows.Forms.Menu.MenuItemClickEventArgs">
            <summary>
            메뉴 아이템 클릭 이벤트를 위한 이벤트 매개변수 
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.MenuItemClickEventArgs.#ctor(TheOne.UIModel.MenuItemInfo,TheOne.Windows.Forms.Menu.MenuTreeNode,System.Windows.Forms.MouseEventArgs)">
            <summary>
            이벤트 매개변수를 초기화 한다.
            </summary>
            <param name="menuInfo">이벤트를 유발한 메뉴 아이템(MenuItemInfo) 객체.</param>
            <param name="node">이벤트를 발생한 메뉴 트리 노드(MenuTreeNode) 객체.</param>
            <param name="args">마우스 이벤트에 매개변수 객체(<see cref="P:TheOne.Windows.Forms.Menu.MenuItemClickEventArgs.MouseEventArgs">MouseEventArgs</see>)</param>
        </member>
        <member name="P:TheOne.Windows.Forms.Menu.MenuItemClickEventArgs.Node">
            <summary>
            메뉴 아이템 클릭을 발생시킨 트리 노드 객체.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Menu.MenuItemClickEventArgs.MouseEventArgs">
            <summary>
            메뉴 아이템 클릭을 유발한 마우스 이벤트에 대한 마우스 이벤트 매개변수.
            </summary>
            <remarks>
            <para>메뉴 아이템 클릭 이벤트는 마우스 이벤트에서 비롯된 것이므로 마우스 이벤트 발생시
            전달된 <see cref="P:TheOne.Windows.Forms.Menu.MenuItemClickEventArgs.MouseEventArgs">MouseEventArgs</see> 객체를 그대로 제공한다.</para>
            </remarks>
        </member>
        <member name="T:TheOne.Windows.Forms.Menu.BasicMenuControl">
            <summary>
            메뉴 UI 렌더링 및 메뉴 제어 구조를 갖춘 메뉴 컨트롤의 베이스 클래스
            </summary>
        </member>
        <member name="F:TheOne.Windows.Forms.Menu.BasicMenuControl.StartupControlMenuID">
            <summary>
            시작 화면 URL을 위해 임시 생성되는 메뉴 아이템의 메뉴 아이디.
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.BasicMenuControl.TerminateControl">
            <summary>
            메뉴 컨트롤을 종료한다.
            </summary>
            <returns>메뉴 컨트롤을 종료해도 되는지를 나타내는 bool 값.</returns>
            <remarks>
            <para>TerminateControl 메쏘드는 열려있는 UI 컨트롤을 모두 닫으려고 시도한다. 하지만
            UI 컨트롤 중 어느 하나라도 닫기를 취소하면 UI 컨트롤 닫기 작업은 즉시 중단되며
            이 메쏘드는 false를 반환한다.</para>
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.BasicMenuControl.InitializeMenu(System.Boolean)">
            <summary>
            메뉴 데이터 구조를 초기화하고 시작 메뉴 ID 등의 초기화 작업을 수행한다.
            </summary>
            <param name="loadMenuXml">메뉴 XML 로드 여부를 나타내는 bool 값.</param>
            <remarks>
            <para>
            BasicMenuControl의 InitializeMenu 메쏘드는 메뉴를 로드하여 메뉴 트리 데이터 구조를
            생성할 뿐만 아니라 메뉴를 렌더링하는 일련의 메쏘드들을 호출하여 메뉴를 렌더링한다.
            BasicMenuControl에는 메뉴를 직접적으로 렌더링하는 코드는 포함되어 있지 않다. 따라서
            이 클래스에서 파생된 클래스는 OnDoCreateMenuItem, OnDoExpandMenu 메쏘드들을 오버라이드 하거나
            DoCreateMenuItem, DoExpandMenu 이벤트 핸들러를 작성하여 메뉴 UI 구조를 렌더링 해야 한다.
            </para>
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.BasicMenuControl.OpenStartupUrl">
            <summary>
            <see cref="P:TheOne.Windows.Forms.Menu.BasicMenuControl.StartupControlUrl">StartupControlUrl</see> 속성이 지정하는 화면을 로드 한다.
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.BasicMenuControl.OpenStartupMenu">
            <summary>
            <see cref="P:TheOne.Windows.Forms.Menu.BasicMenuControl.StartupMenuID">StartupMenuID</see> 속성이 지정하는 메뉴를 수행한다.
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.BasicMenuControl.OpenHomeMenu">
            <summary>
            <see cref="P:TheOne.Windows.Forms.Menu.BasicMenuControl.HomeMenuID">HomeMenuID</see> 속성이 지정하는 메뉴를 수행한다.
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.BasicMenuControl.GetFirstTopLevelMenu">
            <summary>
            최상위 메뉴 중 사용 가능한 첫번째 메뉴를 반환한다.
            </summary>
            <returns>Enable 속성이 true 이고 Hide 속성이 false인 첫번째 최상위 메뉴 아이템 객체.</returns>
            <remarks>
            이 메쏘드는 최상위 메뉴 중 Enable 속성이 true 이고 Hide 속성이 false인
            메뉴 아이템 객체를 반환한다.
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.BasicMenuControl.CreateUserInfoContext">
            <summary>
            <see cref="P:TheOne.Windows.Forms.Menu.MenuControlBase.AuthString"/> 속성 값을 deserialize 하여 UserInfoContext 객체를 구성하여 반환한다.
            </summary>
            <returns>UserInfoContext 객체 혹은 그 파생 객체</returns>
            <remarks>
            <para>BasicMenuControl 클래스에서 CreateUserInfoContext 메쏘드의 기본 구현은
            메뉴 컨트롤을 포함하는 컨테이너(폼 혹은 HTML)에서 설정한 <see cref="P:TheOne.Windows.Forms.Menu.MenuControlBase.AuthString"/> 속성 값을
            UserInfoContext 객체의 직렬화된(serialized) 데이터로 간주하고 이를 역직렬화(deserialize) 하여
            UserInfoContext 객체를 생성하여 반환한다.</para>
            <para>AuthString 속성을 역직렬화 할 때 사용하는 방법은 기본적으로
            UserInfoContext 클래스의 <see cref="M:TheOne.Security.UserInfoContext.VersionIndependantDeserialize(System.String)"/> 메쏘드를
            호출하는 것이다. 따라서 BasicMenuControl 클래스의 CreateUserInfoContext 메쏘드 구현을 그대로
            사용하고자 하는 경우 메뉴 컨테이너는 <see cref="M:TheOne.Security.UserInfoContext.VersionIndependantSerialize(TheOne.Security.UserInfoContext)"/> 메쏘드의
            호출 결과값을 AuthString 속성의 값으로 설정해야 한다.</para>
            <para>BasicMenuControl 클래스에서 파생된 메뉴 컨트롤 클래스는 기본 구현을 그대로 사용하거나
            이 메쏘드를 오버라이드 하여 고유의 UserInfoContext 객체를 생성하여 반환할 수 있다.</para>
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.BasicMenuControl.HandleUserInfoContext(TheOne.Windows.Forms.UserControlBase,TheOne.UIModel.MenuItemInfo)">
            <summary>
            UI 컨트롤의 UserInfoContext 를 설정한다.
            </summary>
            <param name="ctrl">로드된 UI 컨트롤(<see cref="T:TheOne.Windows.Forms.UserControlBase">UserControlBase</see>) 객체</param>
            <param name="menuInfo">메뉴 아이템 정보</param>
            <remarks>
            <para>로드된 UI 컨트롤에 대해 사용자 정보 객체(<see cref="T:TheOne.Security.UserInfoContext">UserInfoContext</see>)를 설정한다.
            기본 구현은 메뉴 컨트롤이 구성한 사용자 정보 객체를 UI 컨트롤에 그대로 넘겨주거나
            <see cref="P:TheOne.Windows.Forms.Menu.BasicMenuControl.ForceUseAuthString">ForceUseAuthString</see> 속성에 의해 메뉴 컨트롤의 사용자 정보 객체를 넘겨주는 대신
            메뉴 컨트롤이 사용하는 <see cref="P:TheOne.Windows.Forms.Menu.MenuControlBase.AuthString">AuthString</see> 속성의 값을 그대로 넘겨준다.</para>
            <para>BasicMenuControl 클래스에서 파생된 파생 메뉴 컨트롤은 이 메쏘드를 오버라이드 하여 UI 컨트롤의
            사용자 정보 객체를 생성하는 작업을 재 정의할 수 있다. 예를 들어 메뉴의 특정 속성에 의해
            웹 서비스를 호출하여 사용자 정보 객체를 구성하거나 다른 인증 방식을 사용하여 사용자 정보 객체를
            구성하도록 할 수 있다.</para>
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.BasicMenuControl.RenderMenuStructure">
            <summary>
            메뉴 구조에 의해 메뉴를 렌더링하기 시작한다.
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.BasicMenuControl.BuildTopLevelMenu">
            <summary>
            최상위 수준의 메뉴를 렌더링 한다.
            </summary>
            <remarks>
            <para>
            이 메쏘드는 RenderMenuStructure 메쏘드를 호출함으로써 시작되는 메뉴 렌더링 프레임워크에 의해
            호출되는 메쏘드이다. 이 메쏘드에서는 메뉴 그룹과 같이 최상위 수준의 메뉴를 렌더링하는데
            사용된다.
            </para>
            <para>RenderMenuStructure 메쏘드의 기본 구현은 메뉴 구조의 최상위 메뉴들에 대해
            <see cref="E:TheOne.Windows.Forms.Menu.BasicMenuControl.DoCreateMenuItem">DoCreateMenuItem</see> 이벤트를 발생시켜 최상위 메뉴들을
            생성하고 화면상에 위치시키는 작업을 수행한다. 이 메쏘드는 메뉴 렌더링을 시작하는 시점이 된다.
            </para>
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.BasicMenuControl.RenderSubMenu(TheOne.UIModel.MenuItemInfo)">
            <summary>
            하위 메뉴 및 그 자식들을 재귀적으로 렌더링한다.
            </summary>
            <param name="menuInfo">하위 메뉴를 렌더링 할 메뉴 아이템을 나타내는 메뉴 정보(<see cref="T:TheOne.UIModel.MenuItemInfo">MenuItemInfo</see>) 객체.</param>
            <remarks>
            	<para>RenderSubMenu 메쏘드를 호출하면 주어진 메뉴 아이템의 하위 메뉴들을 렌더링 하기 위해
            	반복적으로 <see cref="E:TheOne.Windows.Forms.Menu.BasicMenuControl.DoCreateMenuItem">DoCreateMenuItem</see> 이벤트가 발생한다. 그리고 이 이벤트에서
            	메뉴 아이템에 대한 UI 표현을 생성하면 된다. 예를 들어 트리 뷰(TreeView) 컨트롤에 트리 노드(TreeNode)를
            	추가하는 작업을 DoCreateMenuItem 이벤트 핸들러에 구현하면 된다.</para>
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.BasicMenuControl.OnDoCreateMenuItem(TheOne.UIModel.MenuItemInfo)">
            <summary>
            UI 메뉴 아이템을 생성할 것을 지시하는 DoCreateMenuItem 이벤트를 발생한다.
            </summary>
            <param name="menuInfo">UI 메뉴 아이템을 생성할 메뉴 정보(<see cref="T:TheOne.UIModel.MenuItemInfo">MenuItemInfo</see>) 객체.</param>
            <returns></returns>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.BasicMenuControl.SelectMenuItem(System.String)">
            <summary>
            메뉴 아이템을 선택한다.
            </summary>
            <param name="id">선택할 메뉴 아이템의 ID.</param>
            <remarks>
            	<para>사용자가 메뉴 아이템을 선택하거나 프로그램적으로 메뉴 아이템을 선택했을 때
            	이 메쏘드를 호출하여 메뉴 프레임워크에 메뉴 아이템이 선택되었음을 알린다.
            	<see cref="T:TheOne.Windows.Forms.Menu.BasicMenuControl">BasicMenuControl</see> 클래스에서 파생된 메뉴 컨트롤을
            	작성할 때, 파생 메뉴 컨트롤은 사용자의 액션을 통해 메뉴가 선택되면 이 메쏘드를 호출함으로써
            	프레임워크가 하위 메뉴를 렌더링 하거나 UI 컨트롤을 open 하는 등의 행동을 수행할 수 있다.
            	SelectMenuItem 메쏘드가 호출되면 선택된 메뉴 아이템 정보에 의거하여 메뉴 액션(menu action)이
            	수행된다. 메뉴 액션은 UI 컨트롤 열기, 하위 메뉴 확장/축소, 사용자 정의 액션 등으로 구성되며
            	메뉴 액션에 따라 DoCreateMenuItem, ToggleMenuIetm, MenuItemSelected, DoOpenUI, DoActivate 등의 이벤트가
            	발생한다.</para>
            	<para>파생 메뉴 컨트롤은 이 메쏘드를 호출하지 않고 직접 <see cref="M:TheOne.Windows.Forms.Menu.BasicMenuControl.DoMenuAction(TheOne.UIModel.MenuItemInfo)">DoMenuAction</see>
            	메쏘드를 호출하여 메뉴 선택에 따를 작업을 수행할 수도 있다. 하지만 SelectMenuItem 을 호출하면
            	메뉴 프레임워크에서 정의된 작업이 순차적으로 발생하기 때문에 보다 일관적된 메뉴 처리가 가능하다.
            	개발자는 가급적 이 메쏘드를 호출하여 메뉴가 선택되었음을 메뉴 프레임워크에가 알리는 것이 좋다.</para>
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.BasicMenuControl.SelectMenuItem(TheOne.UIModel.MenuItemInfo)">
            <summary>
            메뉴 아이템을 선택한다.
            </summary>
            <param name="menuInfo">선택할 메뉴 아이템을 나타내는 메뉴 정보(<see cref="T:TheOne.UIModel.MenuItemInfo">MenuItemInfo</see>) 객체.</param>
            <remarks>
            	<para>사용자가 메뉴 아이템을 선택하거나 프로그램적으로 메뉴 아이템을 선택했을 때
            	이 메쏘드를 호출하여 메뉴 프레임워크에 메뉴 아이템이 선택되었음을 알린다.
            	<see cref="T:TheOne.Windows.Forms.Menu.BasicMenuControl">BasicMenuControl</see> 클래스에서 파생된 메뉴 컨트롤을
            	작성할 때, 파생 메뉴 컨트롤은 사용자의 액션을 통해 메뉴가 선택되면 이 메쏘드를 호출함으로써
            	프레임워크가 하위 메뉴를 렌더링 하거나 UI 컨트롤을 open 하는 등의 행동을 수행할 수 있다.
            	SelectMenuItem 메쏘드가 호출되면 선택된 메뉴 아이템 정보에 의거하여 메뉴 액션(menu action)이
            	수행된다. 메뉴 액션은 UI 컨트롤 열기, 하위 메뉴 확장/축소, 사용자 정의 액션 등으로 구성되며
            	메뉴 액션에 따라 <see cref="E:TheOne.Windows.Forms.Menu.BasicMenuControl.DoCreateMenuItem">DoCreateMenuItem</see>, 
            	<see cref="E:TheOne.Windows.Forms.Menu.BasicMenuControl.DoToggleMenuItem">DoToggleMenuItem</see>, <see cref="E:TheOne.Windows.Forms.Menu.BasicMenuControl.MenuItemSelected">MenuItemSelected</see>, 
            	<see cref="E:TheOne.Windows.Forms.Menu.BasicMenuControl.DoOpenUI">DoOpenUI</see>, <see cref="E:TheOne.Windows.Forms.Menu.BasicMenuControl.DoActivateUI">DoActivateUI</see>, 
            	<see cref="E:TheOne.Windows.Forms.Menu.BasicMenuControl.DoDeactivateUI">DoDeactivateUI</see> 등의 이벤트가 발생한다.</para>
            	<para>파생 메뉴 컨트롤은 이 메쏘드를 호출하지 않고 직접 <see cref="M:TheOne.Windows.Forms.Menu.BasicMenuControl.DoMenuAction(TheOne.UIModel.MenuItemInfo)">DoMenuAction</see>
            	메쏘드를 호출하여 메뉴 선택에 따를 작업을 수행할 수도 있다. 하지만 SelectMenuItem 을 호출하면
            	메뉴 프레임워크에서 정의된 작업이 순차적으로 발생하기 때문에 보다 일관적된 메뉴 처리가 가능하다.
            	개발자는 가급적 이 메쏘드를 호출하여 메뉴가 선택되었음을 메뉴 프레임워크에가 알리는 것이 좋다.</para>
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.BasicMenuControl.OnToggleMenuItem(TheOne.UIModel.MenuItemInfo)">
            <summary>
            메뉴 아이템의 상태 전환을 지시하는 <see cref="E:TheOne.Windows.Forms.Menu.BasicMenuControl.DoToggleMenuItem">DoToggleMenuItem</see> 이벤트를 발생시킨다.
            </summary>
            <param name="menuInfo">상태 전환을 할 메뉴 아이템을 나타내는 메뉴 정보(<see cref="T:TheOne.UIModel.MenuItemInfo">MenuItemInfo</see>) 객체</param>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.BasicMenuControl.OnMenuItemSelected(TheOne.UIModel.MenuItemInfo)">
            <summary>
            메뉴 아이템이 선택되었음을 나타내는 MenuItemSelected 이벤트를 발생한다.
            </summary>
            <param name="menuInfo">선택된 메뉴 아이템을 나타내는 메뉴 정보(<see cref="T:TheOne.UIModel.MenuItemInfo">MenuItemInfo</see>) 객체</param>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.BasicMenuControl.DoMenuAction(TheOne.UIModel.MenuItemInfo)">
            <summary>
            메뉴 정보에 설정된 메뉴 행동을 수행한다.
            </summary>
            <param name="menuInfo">메뉴 행동을 수행할 메뉴 아이템 정보(<see cref="T:TheOne.UIModel.MenuItemInfo">MenuItemInfo</see>) 객체.</param>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.BasicMenuControl.OpenUIControl(TheOne.UIModel.MenuItemInfo,System.Object)">
            <summary>
            메뉴 정보가 나타내는 UI 컨트롤을 로드하고 화면에 표시한다.
            </summary>
            <param name="menuInfo">UI 컨트롤을 로드하고 표시할 메뉴 정보(<see cref="T:TheOne.UIModel.MenuItemInfo">MenuItemInfo</see>) 객체</param>
            <param name="args">UI 컨트롤의 InitControl 메쏘드에 넘겨줄 매개변수</param>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.BasicMenuControl.OnOpenUIError(TheOne.Windows.Forms.Menu.OpenFailureReason,TheOne.UIModel.MenuItemInfo,System.Exception)">
            <summary>
            메뉴 상의 UI 컨트롤을 로드하거나 표시하는데 오류가 발생하였다.
            </summary>
            <param name="reason">오류 정보를 나타내는 <see cref="T:TheOne.Windows.Forms.Menu.OpenFailureReason">OpenFailureReason</see> 열거자 값</param>
            <param name="menuInfo">오류를 발생한 메뉴 아이템을 나타내는 메뉴 정보(<see cref="T:TheOne.UIModel.MenuItemInfo">MenuItemInfo</see>) 객체</param>
            <param name="ex">예외 객체</param>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.BasicMenuControl.OnDoOpenUI(TheOne.Windows.Forms.Menu.UIControlInfo)">
            <summary>
            메뉴 상의 UI 컨트롤이 로드되었음을 알리는 DoOpenUI 이벤트를 발생한다.
            </summary>
            <param name="ctrlInfo">메뉴 UI 컨트롤을 나타내는 <see cref="T:TheOne.Windows.Forms.Menu.UIControlInfo">UIControlInfo</see> 객체</param>
            <remarks>
            <para>이 메쏘드는 단순히 DoOpenUI 이벤트를 발생한다. 파생 클래스에서 이 메쏘드를 오버라이드 하는 경우,
            베이스 클래스의 OnDoOpenUI 메쏘드를 호출하면 DoOpenUI 이벤트가 발생하고 그렇지 않으면 이 이벤트는
            발생하지 않는다. 따라서 이 메쏘드를 오버라이드 한다면 이벤트 핸들러에서 수행할 작업을 오버라이드 메쏘드 내에서
            수행해야만 한다.</para>
            <para>이 메쏘드를 오버라이드 하는 경우 오버라이드 코드 내에서는 <see cref="T:TheOne.Windows.Forms.Menu.UIControlInfo">UIControlInfo</see>
            객체에 의해 제공된 UI 컨트롤을 화면 상의 적당한 위치에 표시해야 한다.
            로드된 UI 컨트롤은 인스턴스만이 생성되었을 뿐 UI 내에 어떤 곳에도 아직 표시되지 않은 상황이기 때문이다.
            대부분의 메뉴 구현에서 Panel 과 같은 UI 컨트롤 컨테이너의 Controls 속성에 UI 컨트롤을 추가하도록
            구현하는 것이 일반적이다.</para>
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.BasicMenuControl.ExpandMenuItem(TheOne.UIModel.MenuItemInfo)">
            <summary>
            하위 메뉴를 확장한다.
            </summary>
            <param name="menuInfo">하위 메뉴를 확장할 메뉴 아이템을 나타내는 메뉴 정보(<see cref="T:TheOne.UIModel.MenuItemInfo">MenuItemInfo</see>) 객체.</param>
            <remarks>
            	<para>메뉴 아이템의 메뉴 액션(<see cref="T:TheOne.UIModel.MenuAction">MenuAction</see>)이 Expand 인 경우
            	메뉴 프레임워크에 의해 호출되거나 사용자가 명시적으로 메뉴에 대한 하위 메뉴를 확장(expand)하기 위해 호출
            	한다. 이 메쏘드가 호출되면 프레임워크는 <see cref="E:TheOne.Windows.Forms.Menu.BasicMenuControl.DoExpandMenu">DoExpandMenu</see> 이벤트를 발생한다.</para>
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.BasicMenuControl.OnDoExpandMenu(TheOne.UIModel.MenuItemInfo)">
            <summary>
            하위 메뉴를 확장할 것을 알리는 <see cref="E:TheOne.Windows.Forms.Menu.BasicMenuControl.DoExpandMenu">DoExpandMenu</see> 이벤트를 발생한다.
            </summary>
            <param name="menuInfo">이벤트를 유발한 메뉴 아이템을 나타내는 메뉴 정보(<see cref="T:TheOne.UIModel.MenuItemInfo">MenuItemInfo</see>) 객체.</param>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.BasicMenuControl.OnDoCustomAction(TheOne.UIModel.MenuItemInfo)">
            <summary>
            메뉴 정보에 대한 커스텀 액션을 수행한다.
            </summary>
            <param name="menuInfo">커스텀 액션을 수행할 메뉴 정보(<see cref="T:TheOne.UIModel.MenuItemInfo">MenuItemInfo</see>) 객체</param>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.BasicMenuControl.ActivateUIControl(TheOne.Windows.Forms.Menu.UIControlInfo)">
            <summary>
            UI 컨트롤을 활성화 한다.
            </summary>
            <param name="ctrlInfo">활성화된 UI 컨트롤을 나타내는 <see cref="T:TheOne.Windows.Forms.Menu.UIControlInfo">UIControlInfo</see> 객체.</param>
            <remarks>
            <para>이미 활성화 된 UI 컨트롤이 존재한다면 이 UI 컨트롤을 비활성화 하는 작업을 먼저 수행한다.
            이 메쏘드의 호출 결과로 <see cref="E:TheOne.Windows.Forms.Menu.BasicMenuControl.DoDeactivateUI">DoActivateUI</see> 이벤트가 발생된다.
            사용자 정의 메뉴 컨트롤은 DoActivateUI 이벤트에서 비활성화된 UI 컨트롤을 감추는 등의 작업을
            수행해야만 한다.</para>
            <para>메뉴 프레임워크는 현재 활성화된 UI 컨트롤에 대한 정보를 <see cref="P:TheOne.Windows.Forms.Menu.BasicMenuControl.CurrentUIControl">CurrentUIControl</see>
            속성을 통해 추적할 수 있도록 해 준다. 따라서 이 속성을 이용하여 현재 어떤 UI 컨트롤이 활성화
            되었는가를 파악할 수 있고 "현재" 컨트롤에 대한 다양한 작업이나 정보를 표시할 수 있다.</para>
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.BasicMenuControl.OnDoActivateUI(TheOne.Windows.Forms.Menu.UIControlInfo)">
            <summary>
            UI 컨트롤이 활성화 되었음을 알리는 <see cref="E:TheOne.Windows.Forms.Menu.BasicMenuControl.DoActivateUI">DoActivateUI</see> 이벤트를 발생한다.
            </summary>
            <param name="ctrlInfo">활성화된 UI 컨트롤을 나타내는 <see cref="T:TheOne.Windows.Forms.Menu.UIControlInfo">UIControlInfo</see> 객체.</param>
            <remarks>
            	<para>개발자는 UI 컨트롤을 활성화할 목적으로 이 메쏘드를 직접 호출해서는 안된다. 
            	대신 <see cref="M:TheOne.Windows.Forms.Menu.BasicMenuControl.ActivateUIControl(TheOne.Windows.Forms.Menu.UIControlInfo)">ActivateUIControl</see>
            	메쏘드를 호출해야 한다. 이 메쏘드는 메뉴 프레임워크가 현재 활성화된 UI 컨트롤을 추적할 수 있도록
            	내부 관리를 포함하기 때문이다. OnDoActivateUI 메쏘드는 단순히 <see cref="E:TheOne.Windows.Forms.Menu.BasicMenuControl.DoActivateUI">DoActivateUI</see> 이벤트를
            	발생할 목적으로만 호출해야 한다.</para>
            	<para>파생 클래스에서 이 메쏘드를 오버라이드 하는 경우,
            	베이스 클래스의 OnDoActivateUI 메쏘드를 호출하면 DoActivateUI 이벤트가 발생하고 그렇지 않으면 이 이벤트는
            	발생하지 않는다. 따라서 이 메쏘드를 오버라이드 한다면 이벤트 핸들러에서 수행할 작업을 오버라이드 메쏘드 내에서
            	수행해야만 한다.</para>
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.BasicMenuControl.DeactivateUIControl">
            <summary>
            UI 컨트롤을 비활성화 한다.
            </summary>
            <remarks>
            <para>활성화 된 UI 컨트롤이 존재한다면 컨트롤을 비활성화 하는 작업을 수행한다.
            이 메쏘드의 호출 결과로 <see cref="E:TheOne.Windows.Forms.Menu.BasicMenuControl.DoDeactivateUI">DoDeactivateUI</see> 이벤트가 발생된다.
            사용자 정의 메뉴 컨트롤은 이 이벤트에서 비활성화된 UI 컨트롤을 감추는 등의 작업을
            수행해야만 한다.</para>
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.BasicMenuControl.OnDoDeactivateUI(TheOne.Windows.Forms.Menu.UIControlInfo)">
            <summary>
            UI 컨트롤이 비활성화 되었음을 알리는 <see cref="E:TheOne.Windows.Forms.Menu.BasicMenuControl.DoActivateUI">DoDeactivateUI</see> 이벤트를 발생한다.
            </summary>
            <param name="ctrlInfo">비활성화된 UI 컨트롤을 나타내는 <see cref="T:TheOne.Windows.Forms.Menu.UIControlInfo">UIControlInfo</see> 객체.</param>
            <remarks>
            	<para>개발자는 UI 컨트롤을 비활성화할 목적으로 이 메쏘드를 직접 호출해서는 안된다. 
            	대신 <see cref="M:TheOne.Windows.Forms.Menu.BasicMenuControl.DeactivateUIControl">DeactivateUIControl</see>
            	메쏘드를 호출해야 한다. 이 메쏘드는 메뉴 프레임워크가 현재 활성화된 UI 컨트롤을 추적할 수 있도록
            	내부 관리를 포함하기 때문이다. OnDoDeactivateUI 메쏘드는 단순히 <see cref="E:TheOne.Windows.Forms.Menu.BasicMenuControl.DoDeactivateUI">DoDeactivateUI</see> 이벤트를
            	발생할 목적으로만 호출해야 한다.</para>
            	<para>파생 클래스에서 이 메쏘드를 오버라이드 하는 경우,
            	베이스 클래스의 OnDoDeactivateUI 메쏘드를 호출하면 DoDeactivateUI 이벤트가 발생하고 그렇지 않으면 이 이벤트는
            	발생하지 않는다. 따라서 이 메쏘드를 오버라이드 한다면 이벤트 핸들러에서 수행할 작업을 오버라이드 메쏘드 내에서
            	수행해야만 한다.</para>
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.BasicMenuControl.CloseUIControl">
            <summary>
            현재 활성화 되어 있는 UI 컨트롤을 닫는다.
            </summary>
            <returns>true 이면 열린 UI 컨트롤을 닫은 것이고, false 이면 열려 있는 UI 컨트롤이 없음을 나타낸다.</returns>
            <remarks>
            	<para>CloseUIControl 메쏘드는 열려있는 UI 컨트롤을 닫을 때 호출한다. 현재 활성화된 UI 컨트롤이나, 메뉴 ID 혹은
            	<see cref="T:TheOne.Windows.Forms.Menu.UIControlInfo">UIControlInfo</see> 객체에 의해 지시된 UI 컨트롤이
            	열려 있다면 이 컨트롤을 닫고 필요한 클린업 작업을 수행하며 CloseUIControl 메쏘드는 true를 반환한다.
            	만약 해당 UI 컨트롤이 열려있지 않다면 아무런 작업도 수행하지 않고 CloseUIControl 메쏘드는 false를 반환할 것이다.</para>
            	<para>CloseUIControl 메쏘드는 열려 있는 UI 컨트롤 여부를 판단 한 후, 
            	UI 컨트롤의 <see cref="M:TheOne.Windows.Forms.UserControlBase.TerminateControl">TerminateControl</see> 메쏘드를
            	호출하여 UI 컨트롤이 클린업 작업이나 저장 작업을 수행할 수 있도록 기회를 준다. TerminateControl 메쏘드가 
            	false를 반환화면 UI 컨트롤의 닫기 작업은 취소되지만 true를 반환한다면 메뉴 프레임워크의 클린업 작업이
            	수행된다. 이 과정에서 <see cref="M:TheOne.Windows.Forms.Menu.BasicMenuControl.OnDoCloseUI(TheOne.Windows.Forms.Menu.UIControlInfo)">OnDoCloseUI</see> 메쏘드가 호출되고 DoCloseUI 이벤트도
            	발생한다. 만약 활성화된 UI 컨트롤이 닫힌다면 이 컨트롤은 먼저 비활성화 된다.</para>
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.BasicMenuControl.CloseUIControl(System.String)">
            <summary>
            열려있는 UI 컨트롤을 닫는다.
            </summary>
            <param name="id">닫을 UI 컨트롤의 메뉴 ID</param>
            <returns>true 이면 열린 UI 컨트롤을 닫은 것이고, false 이면 열려 있는 UI 컨트롤이 없음을 나타낸다.</returns>
            <remarks>
            	<para>CloseUIControl 메쏘드는 열려있는 UI 컨트롤을 닫을 때 호출한다. 현재 활성화된 UI 컨트롤이나, 메뉴 ID 혹은
            	<see cref="T:TheOne.Windows.Forms.Menu.UIControlInfo">UIControlInfo</see> 객체에 의해 지시된 UI 컨트롤이
            	열려 있다면 이 컨트롤을 닫고 필요한 클린업 작업을 수행하며 CloseUIControl 메쏘드는 true를 반환한다.
            	만약 해당 UI 컨트롤이 열려있지 않다면 아무런 작업도 수행하지 않고 CloseUIControl 메쏘드는 false를 반환할 것이다.</para>
            	<para>CloseUIControl 메쏘드는 열려 있는 UI 컨트롤 여부를 판단 한 후, 
            	UI 컨트롤의 <see cref="M:TheOne.Windows.Forms.UserControlBase.TerminateControl">TerminateControl</see> 메쏘드를
            	호출하여 UI 컨트롤이 클린업 작업이나 저장 작업을 수행할 수 있도록 기회를 준다. TerminateControl 메쏘드가 
            	false를 반환화면 UI 컨트롤의 닫기 작업은 취소되지만 true를 반환한다면 메뉴 프레임워크의 클린업 작업이
            	수행된다. 이 과정에서 <see cref="M:TheOne.Windows.Forms.Menu.BasicMenuControl.OnDoCloseUI(TheOne.Windows.Forms.Menu.UIControlInfo)">OnDoCloseUI</see> 메쏘드가 호출되고 DoCloseUI 이벤트도
            	발생한다. 만약 활성화된 UI 컨트롤이 닫힌다면 이 컨트롤은 먼저 비활성화 된다.</para>
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.BasicMenuControl.CloseUIControl(TheOne.Windows.Forms.Menu.UIControlInfo)">
            <summary>
            열려있는 UI 컨트롤을 닫는다.
            </summary>
            <param name="ctrlInfo">닫을 UI 컨틀롤에 대한 <see cref="T:TheOne.Windows.Forms.Menu.UIControlInfo">UIControlInfo</see> 객체</param>
            <returns>true 이면 열린 UI 컨트롤을 닫은 것이고, false 이면 열려 있는 UI 컨트롤이 없음을 나타낸다.</returns>
            <remarks>
            	<para>CloseUIControl 메쏘드는 열려있는 UI 컨트롤을 닫을 때 호출한다. 현재 활성화된 UI 컨트롤이나, 메뉴 ID 혹은
            	<see cref="T:TheOne.Windows.Forms.Menu.UIControlInfo">UIControlInfo</see> 객체에 의해 지시된 UI 컨트롤이
            	열려 있다면 이 컨트롤을 닫고 필요한 클린업 작업을 수행하며 CloseUIControl 메쏘드는 true를 반환한다.
            	만약 해당 UI 컨트롤이 열려있지 않다면 아무런 작업도 수행하지 않고 CloseUIControl 메쏘드는 false를 반환할 것이다.</para>
            	<para>CloseUIControl 메쏘드는 열려 있는 UI 컨트롤 여부를 판단 한 후, 
            	UI 컨트롤의 <see cref="M:TheOne.Windows.Forms.UserControlBase.TerminateControl">TerminateControl</see> 메쏘드를
            	호출하여 UI 컨트롤이 클린업 작업이나 저장 작업을 수행할 수 있도록 기회를 준다. TerminateControl 메쏘드가 
            	false를 반환화면 UI 컨트롤의 닫기 작업은 취소되지만 true를 반환한다면 메뉴 프레임워크의 클린업 작업이
            	수행된다. 이 과정에서 <see cref="M:TheOne.Windows.Forms.Menu.BasicMenuControl.OnDoCloseUI(TheOne.Windows.Forms.Menu.UIControlInfo)">OnDoCloseUI</see> 메쏘드가 호출되고 DoCloseUI 이벤트도
            	발생한다. 만약 활성화된 UI 컨트롤이 닫힌다면 이 컨트롤은 먼저 비활성화(deactivate) 된다.</para>
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.BasicMenuControl.CloseAllUIControls">
            <summary>
            열려 있는 UI 컨트롤을 모두 닫는다.
            </summary>
            <returns>성공 시 true를 그렇지 않으면 false를 반환한다.</returns>
            <remarks>
            <para>CloseAllUIControls 메쏘드가 호출되면 열려있는 UI 컨트롤들에 대해
            CloseUIControl 메쏘드가 호출되고 UI 컨트롤을 닫으려고 시도한다. UI 컨트롤을 닫는 과정에서
            각 UI 컨트롤의 <see cref="M:TheOne.Windows.Forms.UserControlBase.TerminateControl">TerminateControl</see>
            메쏘드가 호출되고 어느 한 UI 컨트롤의 TerminateControl 메쏘드가 false를 반환하면 
            UI 컨트롤 닫기 작업은 더 이상 진행하지 않고 CloseAllUIControls 메쏘드는 즉시 false를 반환한다.</para>
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.BasicMenuControl.OnDoCloseUI(TheOne.Windows.Forms.Menu.UIControlInfo)">
            <summary>
            UI 컨트롤이 닫힘을 알리는 <see cref="E:TheOne.Windows.Forms.Menu.BasicMenuControl.DoCloseUI">DoCloseUI</see> 이벤트를 발생한다.
            </summary>
            <param name="ctrlInfo">닫힌 UI 컨트롤을 나타내는 <see cref="T:TheOne.Windows.Forms.Menu.UIControlInfo">UIControlInfo</see> 객체.</param>
            <remarks>
            	<para>파생 클래스에서 이 메쏘드를 오버라이드 하는 경우,
            	베이스 클래스의 OnDoCloseUI 메쏘드를 호출하면 DoCloseUI 이벤트가 발생하고 그렇지 않으면 이 이벤트는
            	발생하지 않는다. 따라서 이 메쏘드를 오버라이드 한다면 이벤트 핸들러에서 수행할 작업을 오버라이드 메쏘드 내에서
            	수행해야만 한다.</para>
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.BasicMenuControl.Navigate(System.String,System.String,System.Object)">
            <summary>
            매개변수로 주어진 UI 컨트롤로 네비게이션 한다.
            </summary>
            <param name="sourceMenuID">호출자의 UI 컨트롤의 메뉴 ID</param>
            <param name="destinationMenuID">네비게이트할 UI 컨트롤의 메뉴 ID</param>
            <param name="args">새 UI 컨트롤에 넘겨줄 매개변수</param>
            <remarks>
            이 메쏘드를 호출하면 destinationMenuID를 갖는 UI 컨트롤을 찾는다. 이미 열려 있다면 해당 컨트롤이
            활성화 되고 아직 열려 있지 않다면 컨트롤이 로드된다.
            Navigate 메쏘드를 통해서 열린 UI 컨트롤은 <see cref="M:TheOne.Windows.Forms.Menu.BasicMenuControl.GoBack(System.String)">GoBack</see> 메쏘드를 통해 되돌아 올 수 있다.
            컨트롤이 이미 열려 있다면 args 매개변수는 컨트롤의
            <see cref="M:TheOne.Windows.Forms.UserControlBase.InitControl(System.Object)">InitControl</see> 메쏘드 호출을 통해
            전달된다.
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.BasicMenuControl.CanGoBack(System.String)">
            <summary>
            GoBack 메쏘드를 통해 네비게이트 할 수 있는 여부를 반환한다.
            </summary>
            <param name="sourceMenuID">호출자의 UI 컨트롤의 메뉴 ID</param>
            <returns>GoBack 가능 여부</returns>
            <remarks>
            <see cref="M:TheOne.Windows.Forms.Menu.BasicMenuControl.GoBack(System.String)">GoBack</see> 메쏘드를 통해 네비게이트 가능한 경우는
            <see cref="M:TheOne.Windows.Forms.Menu.BasicMenuControl.Navigate(System.String,System.String,System.Object)">Navigate</see> 메쏘드를 통해 UI 컨트롤이
            활성화 된 경우 이다.
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.BasicMenuControl.GoBack(System.String)">
            <summary>
            이전 UI 컨트롤로 되돌아 간다.
            </summary>
            <param name="sourceMenuID">호출자의 UI 컨트롤의 메뉴 ID</param>
            <returns>이전 UI 컨트롤로 되돌아 갔는지 여부를 나타내는 boolean 값. 이전 UI 컨트롤로 되돌아 갔다면 true를,
            이전 UI 컨트롤이 닫혔거나 오류가 발생하면 false를 반환한다.</returns>
            <remarks>
            <para>GoBack 메쏘드를 통해 네비게이트 가능한 경우는 <see cref="M:TheOne.Windows.Forms.Menu.BasicMenuControl.Navigate(System.String,System.String,System.Object)">Navigate</see> 메쏘드를 통해 UI 컨트롤이
            활성화 된 경우 이다.
            만약 Navigate 메쏘드를 호출한 UI 컨트롤이 이미 닫혀있다면 GoBack 메쏘드는 아무런
            작업도 하지 않고 false를 반환한다. </para>
            <para>GoBack 메쏘드로 이동하는 경우 되돌아 갈 UI 컨트롤의 InitControl 메쏘드는 호출되지 않는다.</para>
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.BasicMenuControl.MoveTo(System.String,System.Object)">
            <summary>
            등록된 메뉴 중에서 destinationMenuID를 갖는 UI 컨트롤로 이동한다.
            </summary>
            <param name="destinationMenuID">UI 컨트롤의 메뉴 ID</param>
            <param name="args">새 UI 컨트롤에 넘겨줄 매개변수</param>
            <remarks>
            MoveTo는 <see cref="M:TheOne.Windows.Forms.Menu.BasicMenuControl.GoBack(System.String)">GoBack</see>을 제공하지 않는 단순한 UI 컨트롤의 활성화(<see cref="E:TheOne.Windows.Forms.Menu.BasicMenuControl.DoActivateUI">DoActivateUI</see>)
            혹은 로드 이다.
            MoveTo가 호출될 때 목적지 UI 컨트롤이 이미 열려있다면 해당 UI 컨트롤이 활성화되고
            <see cref="M:TheOne.Windows.Forms.UserControlBase.InitControl(System.Object)">InitControl</see> 메쏘드가 args 값과 함께 호출된다. 
            목적지 UI 컨트롤이 존재하지 않는다면 그 컨트롤은 새로이 로드되어 열리며 InitControl 메쏘드 호출에
            매개변수 args가 전달된다.
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.BasicMenuControl.ReplaceTo(System.String,System.String,System.Object)">
            <summary>
            현재 열린 UI 컨트롤을 닫고 destinationMenuID가 지시하는 UI 컨트롤로 이동한다.
            </summary>
            <param name="sourceMenuID">호출자의 UI 컨트롤의 메뉴 ID</param>
            <param name="destinationMenuID">UI 컨트롤의 메뉴 ID</param>
            <param name="args">새 UI 컨트롤에 넘겨줄 매개변수</param>
            <remarks>
            현재 열린 UI 컨트롤을 닫고 destinationMenuID가 지시하는 목적지 UI 컨트롤을 활성화 하거나 로드한다.
            ReplaceTo 호출시 목적지 UI 컨트롤이 이미 존재한다면 해당 UI 컨트롤이 활성화(<see cref="E:TheOne.Windows.Forms.Menu.BasicMenuControl.DoActivateUI">DoActivateUI</see> 이벤트) 되면서
            <see cref="M:TheOne.Windows.Forms.UserControlBase.InitControl(System.Object)">InitControl</see> 메쏘드가 args 값과 함께 호출된다. 
            그리고 ReplaceTo를 호출한 UI 컨트롤은 닫힌다.
            목적지 UI 컨트롤이 존재하지 않는다면 그 컨트롤은 새로이 로드되어 열리며 InitControl 메쏘드 호출에
            매개변수 args가 전달된다.
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.BasicMenuControl.CreateMyMenuManager">
            <summary>
            내 메뉴(My Menu)에 대한 <see cref="T:TheOne.UIModel.MenuManager">MenuManager</see> 객체를 생성한다.
            </summary>
            <value>내 메뉴를 위한 <see cref="T:TheOne.UIModel.MenuManager">MenuManager</see> 객체.</value>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.BasicMenuControl.OnDoRenderMyMenu">
            <summary>
            내 메뉴를 화면상에 표시할 것을 지시하는 DoRenderMyMenu 이벤트를 발생시킨다.
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.BasicMenuControl.AddToMyMenu(TheOne.UIModel.MenuItemInfo,TheOne.UIModel.MenuItemInfo)">
            <summary>
            주 메뉴의 메뉴 아이템 정보를 내 메뉴에 추가한다.
            </summary>
            <param name="parentMenuInfo">추가할 내 메뉴의 부모 메뉴 아이템 정보 객체</param>
            <param name="menuInfo">추가할 주 메뉴의 메뉴 아이템 정보 객체</param>
            <remarks>
            <para>매개변수로 주어진 메뉴 아이템 정보는 주 메뉴의 메뉴 아이템 정보 객체이다.
            이 주 메뉴 아이템 정보와 그 자손 메뉴 아이템들은 복제되어 parentMenuInfo 매개변수로
            주어진 내 메뉴의 자식으로 추가된다.</para>
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.BasicMenuControl.RemoveFromMyMenu(System.String)">
            <summary>
            내 메뉴에서 주어진 메뉴 아이디를 가진 메뉴 아이템을 제거한다.
            </summary>
            <param name="menuID">제거할 메뉴 아이템의 메뉴 아이디.</param>
            <remarks>
            내 메뉴에서 주어진 메뉴 아이디를 찾을 수 없는 경우, 아무런 작업도 하지 않는다.
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.BasicMenuControl.RemoveFromMyMenu(TheOne.UIModel.MenuItemInfo)">
            <summary>
            내 메뉴에서 메뉴 아이템을 제거한다.
            </summary>
            <param name="menuInfo">내 메뉴에서 제거할 메뉴 아이템 정보 객체.</param>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.BasicMenuControl.MoveMyMenuItem(TheOne.UIModel.MenuItemInfo,TheOne.UIModel.MenuItemInfo,TheOne.UIModel.MenuItemMoveOptions)">
            <summary>
            내 메뉴 아이템을 현재 위치에서 목적지 위치로 이동한다.
            </summary>
            <param name="menuInfo">이동할 내 메뉴 아이템 객체.</param>
            <param name="targetInfo">이동할 목적지 내 메뉴 아이템 객체.</param>
            <param name="option">목적지 메뉴 아이템으로부터의 상대 위치를 나타내는 <see cref="T:TheOne.UIModel.MenuItemMoveOptions">MenuItemMoveOptions</see> 열거자 값.</param>
            <remarks>
            <para>MoveMenuItem 메쏘드는 메뉴 아이템의 위치를 이동하는데 사용된다. 목적지를 나타내는 targetInfo 매개변수는
            이동할 목적지 메뉴 아이템을 지정하는데 사용된다. 이 매개변수는 null 일 수 있으며 null 인 경우
            <see cref="T:TheOne.UIModel.MenuItemMoveOptions">MenuItemMoveOptions</see> 열거자의 값에 따라 목적지의 의미가 달라진다.
            option 매개변수가 ChildFirst, ChildLast 로 주어지고 targetInfo 매개변수가 null 이면 메뉴의 최상위 수준의 처음
            혹은 마지막으로 이동한다. option 매개변수가 SiblingXXX 이고 이 매개변수가 null 이면 동일 수준 상에서 맨 처음
            혹은 맨 마지막 혹은 이전/다음 위치로 이동하게 된다.</para>
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.BasicMenuControl.GetMyMenuLocation(System.Boolean)">
            <summary>
            내 메뉴를 로드하거나 저장할 위치를 나타내는 Uri를 반환한다.
            </summary>
            <param name="writeMode">저장을 위한 경로인가를 나타내는 bool 값.</param>
            <returns>내 메뉴 로드/저장 위치를 나타내는 Uri.</returns>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.BasicMenuControl.LoadMyMenu">
            <summary>
            내 메뉴를 로드한다.
            </summary>
            <remarks>
            내 메뉴를 로드할 위치는 <see cref="P:TheOne.Windows.Forms.Menu.BasicMenuControl.MyMenuSaveLocation">MyMenuSaveLocation</see> 속성에 의해
            좌우 된다.
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.BasicMenuControl.SaveMyMenu">
            <summary>
            내 메뉴를 저장한다.
            </summary>
            <remarks>
            내 메뉴를 저장할 위치는 <see cref="P:TheOne.Windows.Forms.Menu.BasicMenuControl.MyMenuSaveLocation">MyMenuSaveLocation</see> 속성에 의해
            좌우 된다.
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.BasicMenuControl.ReportMenuStatistics(TheOne.UIModel.MenuItemInfo,System.String)">
            <summary>
            메뉴 활동 상황에 대한 통계 정보를 기록한다.
            </summary>
            <param name="menuInfo">통계 정보를 기록할 메뉴에 대한 메뉴 아이템 객체</param>
            <param name="extraInfo">통계 정보에 기록할 추가 정보 문자열.</param>
            <remarks>
            <para><see cref="P:TheOne.Windows.Forms.Menu.BasicMenuControl.MenuStatisticsUrl">MenuStatisticsUrl</see>이 지정하는 Url에 메뉴 통계 정보를
            전송한다. 메뉴 통계 정보는 HTTP GET 방식으로 전달되며 사용되는 Query 매개변수는 
            userid, menuid, info 이다. userid는 메뉴를 사용하는 사용자 ID를, menuid는 
            선택된 메뉴 id를 info는 extraInfo 매개변수로 전달된 값이다.</para>
            <para>메뉴 통계 정보는 기록하고자 하는 메뉴 아이템의 행동이 OpenUI 이거나
            Navigate 이거나 NavigateExpand 일 때만 기록에 남으며 MenuStatisticsUrl 속성 값이
            null 이면 통계 기록을 남기지 않는다. 또한, 통계 기록을 MenuStatisticsUrl 이 지정하는
            Url에 전송하는 시도가 5회 이상 실패하면 성능 부담을 없애기 위해 더 MenuStatisticsUrl 
            속성을 null으로 설정하여 더 이상 통계 기록이 남지 않도록 한다.</para>
            </remarks>
        </member>
        <member name="P:TheOne.Windows.Forms.Menu.BasicMenuControl.StartupControlUrl">
            <summary>
            메뉴 컨트롤 시작시 로드할 컨트롤의 Url.
            </summary>
            <remarks>
            <para>메뉴 시스템 내에 지정되지 않은 컨트롤을 시작 프로그램으로 표시하고자 할 때 사용하는 Url 이다.
            지정할 Url은 DLL 에 대한 경로와 클래스에 대한 전체 이름(네임스페이스 포함)을 # 문자로 구분한 값이다.
            DLL에 대한 경로는 상대 경로 혹은 절대 경로로써 사용될 수 있다.</para>
            <para>메뉴 컨트롤이 이 속성이 지정하는 컨트롤을 로드하고자 한다면 
            <see cref="M:TheOne.Windows.Forms.Menu.BasicMenuControl.OpenStartupUrl">OpenStartupUrl</see> 메쏘드를 호출하면 된다.</para>
            <para>이 속성을 사용하는 방법은 브라우저 임베디드 스마트 클라이언스 사용시 OBJECT 태그의
            classid 를 줄 때와 동일한 형태의 값을 주면 된다.</para>
            <para>Ex) menuControl.StartupControlUrl = "http://server/controls/MyControls.DLL#MyControls.MyUserControl";</para>
            </remarks>
        </member>
        <member name="P:TheOne.Windows.Forms.Menu.BasicMenuControl.StartupMenuID">
            <summary>
            메뉴 컨트롤 시작시 로드할 메뉴의 ID.
            </summary>
            <remarks>
            <para>메뉴 시스템 내에 저장된 메뉴를 메뉴 컨트롤 시작과 함께 표시하고자 할 때 이 속성에 메뉴 ID를
            지정할 수 있다. 메뉴 컨트롤은 InitControl 메쏘드 혹은 Shown 이벤트에서 
            <see cref="M:TheOne.Windows.Forms.Menu.BasicMenuControl.OpenStartupMenu">OpenStartupMenu</see> 메쏘드를 호출하여 시작 메뉴를 수행할 수 있다.</para>
            </remarks>
        </member>
        <member name="P:TheOne.Windows.Forms.Menu.BasicMenuControl.HomeMenuID">
            <summary>
            홈 메뉴의 ID.
            </summary>
            <remarks>
            <para>메뉴 시스템 내에 저장된 메뉴 중 하나를 홈 메뉴로 지정하고자 할 때, 이 속성에 메뉴 ID를
            지정할 수 있다. 메뉴 컨트롤은 InitControl 메쏘드 혹은 Shown 이벤트에서 
            <see cref="M:TheOne.Windows.Forms.Menu.BasicMenuControl.OpenHomeMenu">OpenHomeMenu</see> 메쏘드를 호출하여 홈 메뉴를 화면에 표시할 수 있다.</para>
            </remarks>
        </member>
        <member name="P:TheOne.Windows.Forms.Menu.BasicMenuControl.ForceUseAuthString">
            <summary>
            UI 컨트롤의 인증 정보에 메뉴 컨트롤이 생성한 UserInfoContext를 사용하지 않고
            AuthString을 직접 넘겨줄 것인가 여부.
            </summary>
            <remarks>
            메뉴 컨트롤의 기본 행동은 주어진 AuthString 값을 통해 UserInfoContext를 생성하고
            생성한 UserInfoContext를 로드한 UI 컨트롤에서 설정한다. 하지만 이 속성의 값이
            true 로 설정되면 로드된 UI 컨트롤에게 직접 메뉴 컨트롤의 가지고 있는 AuthString을
            넘겨 준다. 이는 UserInfoContext의 생성을 각 컨트롤에게 위임하는 효과를 가져오며
            매 UI 컨트롤 화면이 로드 될때마다 UserInfoContext가 생성됨을 의미 한다. 매번 
            UserInfoContext가 생성되면 성능 저하가 될 수 있으므로 이 속성을 true로 설정하는 경우는
            테스트나 기타 특수한 경우에만 사용해야 한다.
            </remarks>
        </member>
        <member name="E:TheOne.Windows.Forms.Menu.BasicMenuControl.DoCreateMenuItem">
            <summary>
            UI 메뉴 아이템을 생성할 것을 지시하는 이벤트.
            </summary>
            <remarks>
            	<para>메뉴 프레임워크는 다양한 UI 형태(풀다운 메뉴, 트리 메뉴 등)를 갖는 메뉴 구조를
            	지원하기 위해 UI 표현을 파생 메뉴 컨트롤(BasicMenuControl 에서 파생된 메뉴 컨트롤)에 위임한다.
            	즉, 메뉴 프레임워크가 메뉴 아이템을 UI에 표시해야 할 때마다 DoCreateMenuItem 이벤트를 발생하여
            	파생 메뉴 컨트롤이 UI를 표시하도록 한다는 것이다. 메뉴 프레임워크가 이러한 구조를 취하는
            	이유는 파생 메뉴 컨트롤이 어떤 UI 를 가질지 프레임워크가 알 수 없기 때문이다.</para>
            	<para>DoCreateMenuItem 이벤트는 <see cref="M:TheOne.Windows.Forms.Menu.BasicMenuControl.RenderMenuStructure">RenderMenuStructure</see> 메쏘드에
            	대한 호출 결과로써 각 최상위 레벨의 메뉴 아이템에 대해 한 번씩 발생한다. 그리고
            	최상위 레벨 메뉴의 렌더링 결과로 <see cref="M:TheOne.Windows.Forms.Menu.BasicMenuControl.RenderSubMenu(TheOne.UIModel.MenuItemInfo)">RenderSubMenu</see> 메쏘드가
            	호출되면 주어진 메뉴 아이템의 하위 메뉴들에 대해 반복적으로 이 이벤트가 발생한다.
            	따라서 이 이벤트 핸들러는 최상위 메뉴 아이템과 하위 메뉴 아이템에 따라 서로 다른
            	UI 컨트롤을 생성해야 할 수도 있다.</para>
            	<para>메뉴 컨트롤이 라벨 컨트롤을 이용하여 상단 메뉴를 구성하고
            	트리 뷰 컨트롤을 이용하여 좌측 메뉴를 구성한다고 가정해 보자. 이 메뉴는 
            	DoCreateMenuItem 이벤트에서 <see cref="P:TheOne.UIModel.MenuItemInfo.IsTopLevel">IsTopLevel</see> 속성을 이용하여
            	상단 메뉴에 필요한 라벨 컨트롤과 좌측 메뉴에 필요한 트리 노드을 구분하여 생성해야 한다.</para>
            	<para>메뉴 아이템을 UI 적으로 표시하기 위해 생성한 컨트롤들은 이 이벤트 내에서
            	적절한 위치에 삽입되어야 한다. 메뉴 프레임워크는 메뉴 컨트롤의 UI 구조에 대해 알지 못하기 때문이다.
            	따라서 DoCreateMenuItem 이벤트 내에서 UI 컨트롤 생성뿐만 아니라 이 컨트롤의 배치까지 처리가
            	되어야 한다. 많은 경우, 메뉴 컨트롤은 메뉴 ID와 연결된 메뉴 UI 컨트롤에 대한 목록을 유지할 필요가 있다.
            	그 이유는 생성한 UI 컨트롤을 부모 UI 컨트롤에 추가해야 하는데 부모 UI을 손쉽게 찾을 마땅한 방법이
            	없는 경우가 많다. 잘 작성된 3rd party 컨트롤은 컨트롤이 스스로 key 값을 사용하여 부모 컨트롤을
            	찾아 낼 수 있지만 닷넷 프레임워크에서 기본적으로 제공하는 풀다운 메뉴, 트리뷰 컨트롤은 그러한
            	기능이 미약하기 때문이다. 따라서 메뉴 ID에 대한 UI 컨트롤의 목록(대개 Dictionary로 구현)을 유지하고
            	이 목록에서 부모 UI 컨트롤을 알아내도록 한다.</para>
            </remarks>
            <example>
            	<code lang="CS" title="트리 메뉴 구성 예제" description="이 예제 코드는 트리 뷰 컨트롤을 이용하여 전체 메뉴를 표시하는 메뉴 컨트롤에 대한 DoCreateMenuItem 이벤트 핸들러의 구현을 보여준다. 또한 트리 메뉴를 구성할 때 부모 TreeNode 객체를 찾기 위해 Dictionary를 구성하여 사용하는 방법을 보여준다.">
            private Dictionary&lt;string, TreeNode&gt; _nodeList = new Dictionary&lt;string, TreeNode&gt;();
             
            private void DoCreateMenuItem(object sender, MenuItemEventArgs e)
            {
                MenuItemInfo menuInfo = e.MenuItemInfo;
                string id = menuInfo.ID;
                string parentId = menuInfo.Parent.ID;
                TreeNode parentNode = null;
             
                // create and initialize a tree node.
                TreeNode node = new TreeNode();
                node.Text = menuInfo.Title;
                node.Tag = menuInfo;      // for later use when the tree node is selected.
             
                _nodeList.Add(id, node);
                // try to find the parent tree node using id of parent menu item info.
                if (_nodeList.TryGetValue(parentId, out parentNode) == true) {
                    parentNode.Nodes.Add(node);
                }
                else {
                    // there is no parent tree node. so add to the root.
                    tvSubMenu.Nodes.Add(node);
                }
            }
            </code>
            </example>
        </member>
        <member name="E:TheOne.Windows.Forms.Menu.BasicMenuControl.DoToggleMenuItem">
            <summary>
            메뉴 아이템의 상태 전환을 지시하는 이벤트
            </summary>
            <remarks>
            	<para>DoToggleMenuItem 이벤트는 메뉴 아이템이 선택됨에 따라 메뉴 아이템의 
            	UI 상태 전환을 지시하기 위해 발생하는 이벤트이다.
            	이 이벤트는 <see cref="M:TheOne.Windows.Forms.Menu.BasicMenuControl.SelectMenuItem(TheOne.UIModel.MenuItemInfo)">SelectMenuItem</see> 메쏘드가 호출됨에 따라 발생되며 
            	<see cref="E:TheOne.Windows.Forms.Menu.BasicMenuControl.MenuItemSelected">MenuItemSelected</see> 이벤트를 수반한다.</para>
            	<para>DoToggleMenuItem 이벤트 핸들러는 대개 메뉴 아이템에 대한 UI 요소에 대한 상태 전환을 수행하면
            	된다. 가장 전형적인 작업으로는 UI에 표시되는 메뉴 아이템의 배경색, 배경 이미지를 선택 상태로
            	바꾸는 것이다. 풀 다운 메뉴와 같은 메뉴 구조를 사용하는 경우, 메뉴 상태를 전환하는 작업이
            	전혀 필요 없기 때문에 이 이벤트에 대한 핸들러를 작성할 필요가 없다. 또한 트리를 사용하는
            	메뉴 컨트롤 역시 트리 컨트롤이 스스로 선택된 트리 노드의 UI 상태를 변환하기 때문에
            	특별한 작업이 필요없다.</para>
            	<para>메뉴 아이템이 선택되고 선택된 메뉴 아이템을 선택 상태로 바꾸는 작업 이외에도 
            	이전에 선택되었던 메뉴 아이템의 상태를 선택되지 않은 상태로 바꾸는 작업도 필요하다.
            	프레임워크에서는 이전에 선택된 메뉴 아이템에 대한 추적을 제공하지 않기 때문에
            	파생 메뉴 컨트롤에서 현재 선택된 메뉴 아이템을 지속적으로 추적하여 이전에 선택된
            	메뉴 아이템의 상태를 바꾸어야 한다. 메뉴 프레임워크가 선택된 메뉴에 대한 추적을 제공하지 않는
            	이유는 메뉴 구성상 2개 이상의 선택된 메뉴 아이템이 존재할 수 있기 때문이다. 예를 들어
            	상단에 최상위 메뉴 아이템들을 배치하고 최상위 메뉴 아이템이 선택됨에 따라 왼쪽에 하위 메뉴들을
            	표시하는 메뉴 컨트롤은 상단 메뉴에서 선택된 메뉴 아이템과 왼쪽에서 선택되어 있는 메뉴 아이템이
            	존재한다. 이런 상황에서 메뉴 프레임워크는 파생 메뉴 컨트롤이 몇 단계의 선택이 필요한가 알 수 없다.</para>
            </remarks>
        </member>
        <member name="E:TheOne.Windows.Forms.Menu.BasicMenuControl.MenuItemSelected">
            <summary>
            메뉴 아이템이 선택되었음을 나타내는 이벤트.
            </summary>
            <remarks>
            	<para>MenuItemSelected 이벤트는<see cref="M:TheOne.Windows.Forms.Menu.BasicMenuControl.SelectMenuItem(TheOne.UIModel.MenuItemInfo)">SelectMenuItem</see> 메쏘드에 대한 
            	호출 결과로써 메뉴 아이템이 선택되었음을 알리는 이벤트이다. 메뉴 아이템이 선택됨에 따라
            	필요한 작업을 이 이벤트 핸들러에서 수행하면 된다.</para>
            	<para>MenuItemSelected 이벤트는 통지(notification) 성격의 이벤트이므로 
            	<see cref="E:TheOne.Windows.Forms.Menu.BasicMenuControl.DoOpenUI">DoOpenUI</see>나 <see cref="E:TheOne.Windows.Forms.Menu.BasicMenuControl.DoActivateUI">DoActivateUI</see> 이벤트 등과 같이
            	파생 메뉴 컨트롤에서 반드시 처리해야 하는 이벤트가 아니다. 대신 메뉴 아이템이 선택됨에 따라
            	추가적으로 처리할 작업들(예를 들어 메뉴 선택 로깅)을 수행하면 된다.</para>
            </remarks>
        </member>
        <member name="E:TheOne.Windows.Forms.Menu.BasicMenuControl.DoOpenUI">
            <summary>
            UI 컨트롤이 Open 됨에 따라 화면 배치를 수행할 것을 알리는 이벤트.
            </summary>
            <remarks>
            <para>메뉴 아이템 액션 중 OpenUI 액션에 의해 UI 컨트롤이 열리거나 혹은 명시적으로
            <see cref="M:TheOne.Windows.Forms.Menu.BasicMenuControl.OpenUIControl(TheOne.UIModel.MenuItemInfo,System.Object)">OpenUIControl</see> 메쏘드를 호출하여
            UI 컨트롤이 열릴 때 발생하는 이벤트이다. 이 이벤트가 발생한 시점은 UI 컨트롤이 로드되어
            UI 컨트롤의 생성자가 호출되었으며 사용자 정보(<see cref="T:TheOne.Security.UserInfoContext">UserInfoContext</see>)가 메뉴 컨트롤에 의해
            설정된 직후이다. 이벤트 핸들러는 UIControlInfo 객체의 UIControl 속성을 이용하여
            열린 UI 컨트롤을 화면 상에 표시해야 한다. 대개 이벤트 핸들러는 UI를 위한 컨테이너(대부분 패널)에
            UI 컨트롤을 추가하거나 탭 컨트롤에 탭을 추가하고 UI 컨트롤을 추가하는 작업을 수행하면 된다.</para>
            <para>이 이벤트 핸들러에서 추가적으로 화면에 대한 정보를 표시하거나 화면 닫기 버튼을 enable 하는 등의
            추가적인 작업을 수행할 수도 있다.</para>
            <para>이 이벤트 발생 후, 메뉴 프레임워크는 열린 UI 컨트롤에 대해 InitControl 메쏘드를 호출하고
            이를 이어 <see cref="E:TheOne.Windows.Forms.Menu.BasicMenuControl.DoDeactivateUI">DoDeactivateUI</see> 이벤트, 
            <see cref="E:TheOne.Windows.Forms.Menu.BasicMenuControl.DoActivateUI">DoActivateUI</see> 이벤트가 연속적으로 발생한다.</para>
            </remarks>
        </member>
        <member name="E:TheOne.Windows.Forms.Menu.BasicMenuControl.DoExpandMenu">
            <summary>
            하위 메뉴를 확장할 것을 알리는 이벤트.
            </summary>
            <remarks>
            	<para>하위 메뉴들을 확장(expand)하거나 축소(collapse)할 것을 지시하는 이벤트이다. 
            	이 이벤트는 메뉴 아이템의 선택 결과나
            	명시적으로 <see cref="M:TheOne.Windows.Forms.Menu.BasicMenuControl.ExpandMenuItem(TheOne.UIModel.MenuItemInfo)">ExpandMenuItem</see> 메쏘드를 호출한 결과로 발생된다.</para>
            	<para>DoExpandMenu 이벤트 핸들러에서는 하위 메뉴를 확장하기 위한 작업을 수행하면 된다.
            	예를 들어 상단 메뉴가 선택됨에 따라 왼쪽 트리 메뉴를 설정하기 위해 이 이벤트 핸들러에서
            	<see cref="M:TheOne.Windows.Forms.Menu.BasicMenuControl.RenderSubMenu(TheOne.UIModel.MenuItemInfo)">RenderSubMenu</see> 메쏘드를 호출할 수도 있다.
            	하지만 트리 메뉴나 풀 다운 메뉴와 같은 UI 구조를 사용하는 경우 메뉴 컨트롤 자체가 
            	하위 메뉴의 expand/collapse 기능을 제공하기 때문에 이 이벤트에 대한 처리가 불필요 한 경우가 많다.
            	</para>
            </remarks>
        </member>
        <member name="E:TheOne.Windows.Forms.Menu.BasicMenuControl.DoCustomAction">
            <summary>
            메뉴 아이템에 대한 사용자 정의 행동을 수행할 것을 알리는 이벤트.
            </summary>
            <remarks>
            	<para>메뉴 아이템에 정의된 메뉴 행동(<see cref="T:TheOne.UIModel.MenuAction">MenuAction</see>)이
            	CustomAction 인 경우 발생하는 이벤트이다. 이 이벤트 핸들러에서 해당 메뉴에 대한 다양한 사용자 정의
            	작업을 수행할 수 있다.</para>
            </remarks>
        </member>
        <member name="P:TheOne.Windows.Forms.Menu.BasicMenuControl.MaxUIControls">
            <summary>
            최대 UI 컨트롤 개수
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Menu.BasicMenuControl.UIControlList">
            <summary>
            현재 열려있는 UI 컨트롤의 목록을 반환한다.
            </summary>
            <value>열려있는 UI 컨트롤의 목록을 나타내는 Dictionary 객체</value>
        </member>
        <member name="P:TheOne.Windows.Forms.Menu.BasicMenuControl.CurrentUIControl">
            <summary>
            현재 활성화된 UI 컨트롤을 나타내는 컨트롤 정보 객체를 반환한다.
            </summary>
            <value>현재 활성화된 UI 컨트롤을 나타내는 <see cref="T:TheOne.Windows.Forms.Menu.UIControlInfo">UIControlInfo</see> 객체.</value>
        </member>
        <member name="E:TheOne.Windows.Forms.Menu.BasicMenuControl.DoActivateUI">
            <summary>
            UI 컨트롤의 활성화 작업을 지시하는 이벤트.
            </summary>
            <remarks>
            <para>새로이 UI 컨트롤이 열리거나 명시적으로 <see cref="M:TheOne.Windows.Forms.Menu.BasicMenuControl.ActivateUIControl(TheOne.Windows.Forms.Menu.UIControlInfo)">ActivateUIControl</see> 메쏘드를
            호출하여 UI 컨트롤이 활성화 되었음을 알리는 이벤트이다.</para>
            <para>DoActivateUI 이벤트의 이벤트 핸들러는 UI 컨트롤이 활성화 됨에 따라 필요한 UI 렌더링 작업이나
            UI 컨트롤의 Visible 속성 제어 혹은 UI 컨트롤의 정보를 표시하는 등의 작업을 구현하면 된다.</para>
            </remarks>
        </member>
        <member name="E:TheOne.Windows.Forms.Menu.BasicMenuControl.DoDeactivateUI">
            <summary>
            UI 컨트롤의 비활성화 작업을 지시하는 이벤트.
            </summary>
            <remarks>
            <para>UI 컨트롤이 사용자 작업에 의해 닫히거나 명시적으로 <see cref="M:TheOne.Windows.Forms.Menu.BasicMenuControl.ActivateUIControl(TheOne.Windows.Forms.Menu.UIControlInfo)">CloseUIControl</see> 메쏘드를
            호출하여 UI 컨트롤이 활성화 되었음을 알리는 이벤트이다.</para>
            <para>DoDeactivateUI 이벤트의 이벤트 핸들러는 UI 컨트롤이 비활성화 됨에 따라 필요한 UI 렌더링 작업이나
            UI 컨트롤의 Visible 속성 제어 혹은 UI 컨트롤의 정보를 표시하는 등의 작업을 구현하면 된다.</para>
            </remarks>
        </member>
        <member name="E:TheOne.Windows.Forms.Menu.BasicMenuControl.DoCloseUI">
            <summary>
            UI 컨트롤의 닫기 작업을 지시하는 이벤트.
            </summary>
            <remarks>
            	<para>UI 컨트롤이 사용자 액션이나 <see cref="M:TheOne.Windows.Forms.Menu.BasicMenuControl.CloseUIControl(TheOne.Windows.Forms.Menu.UIControlInfo)">CloseUIControl</see> 메쏘드 호출에 의해
            	닫힌 경우 발생하는 이벤트이다.</para>
            	<para>DoCloseUI 이벤트 핸들러는 화면상에서 UI 컨트롤을 제거하고 필요한 UI 렌더링 작업을 해야만
            	한다. 닫히는 UI 컨트롤은 단순히 Visible 속성을 제어하는 것이 아니라 완전히 Control 트리에서
            	제거되어야 함에 유의한다.</para>
            	<para>이 이벤트가 발생하는 시점은 UI 컨트롤에 대한
            	<see cref="M:TheOne.Windows.Forms.UserControlBase.TerminateControl">TerminateControl</see> 메쏘드가
            	호출되고 필요에 따라서 <see cref="E:TheOne.Windows.Forms.Menu.BasicMenuControl.DoDeactivateUI">DoDeactivateUI</see> 이벤트가 발생한 후이다.</para>
            </remarks>
        </member>
        <member name="P:TheOne.Windows.Forms.Menu.BasicMenuControl.UseMyMenu">
            <summary>
            내 메뉴 기능 사용 여부를 읽거나 설정한다.
            </summary>
            <value>내 메뉴 사용 여부를 나타내는 bool 값.</value>
        </member>
        <member name="P:TheOne.Windows.Forms.Menu.BasicMenuControl.MyMenuManager">
            <summary>
            내 메뉴에 대한 <see cref="T:TheOne.UIModel.MenuManager">MenuManager</see> 객체를 반환한다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Menu.BasicMenuControl.MyMenuAutoSave">
            <summary>
            내 메뉴의 자동 저장 여부를 읽거나 설정한다.
            </summary>
            <value>내 메뉴의 자동 저장 여부를 나타내는 bool 값.</value>
        </member>
        <member name="P:TheOne.Windows.Forms.Menu.BasicMenuControl.MyMenuSaveLocation">
            <summary>
            내 메뉴 저장 위치를 읽거나 설정한다.
            </summary>
            <remarks>
            	<para>내 메뉴 저장 위치는 상대/절대 경로의 파일 경로나 Url을 지정할 수 있다. 파일 경로나 Url은 파일명을 포함해야 한다. 메뉴
                프레임워크는 이 속성이 지정하는 파일 경로나 Url에 사용자의 ID가 포함된 경로를 구성하여 내 메뉴를 읽거나 저장하려고 시도한다. 파일 경로가
                사용되면 확장자 앞에 사용자의 아이디가 붙으며, Url이 사용되면 URL의 쿼리에 mode=read&amp;userid=[userID] 혹은
                mode=write&amp;userid=[UserID] 를 붙인다.</para>
            	<para>예를 들어 MyMenuSaveLocation 속성의 값이 MyMenu.xml 이라면 실제로 읽기 쓰기 대상이 되는 파일은
                MyMenu.[userID].xml 이 되며, MyMenuSaveLocation 속성의 값이
                http://server/MyMenuService.aspx 라면
                http://server/MyMenuService.aspx?mode=read&amp;userid=[userID] 에서 내 메뉴를 읽으려고 시도하고
                http://server/MyMenuService.aspx?mode=write&amp;userid=[userID] 에 내 메뉴를 저장하려고
                시도한다.</para>
            	<para>이 속성의 값이 null 이면 "내 문서" 폴더에 MyMenu.[userID].xml 파일이 내 메뉴의 저장 위치가 된다. 만약 사용자가
                인증되지 않은 경우, 즉 UserID 속성이 null 인 경우에는 "anonymous" 라는 이름이 사용자 아이디 대신
                사용된다.<br/></para>
            </remarks>
        </member>
        <member name="E:TheOne.Windows.Forms.Menu.BasicMenuControl.DoRenderMyMenu">
            <summary>
            내 메뉴를 화면상에 표시할 것을 지시하는 이벤트.
            </summary>
            <remarks>
            내 메뉴를 화면 상에 표시할 것을 지시하는 이벤트이다. DoRenderMyMenu 이벤트는
            메뉴 초기화 때에 발생하고 내 메뉴가 변경될 때마다 발생된다.
            <see cref="P:TheOne.Windows.Forms.Menu.BasicMenuControl.UseMyMenu"/> 속성이 false 인 경우 이 이벤트는 발생하지 않는다.
            </remarks>
        </member>
        <member name="P:TheOne.Windows.Forms.Menu.BasicMenuControl.MenuStatisticsUrl">
            <summary>
            메뉴 통계 정보를 보고할 Url.
            </summary>
            <remarks>
            <para>메뉴 통계 정보는 메뉴 ID, 사용자 ID, 기타 정보를 포함한다. 이 정보는 MenuStatisticsUrl 속성이
            지정하는 Url에 대해 GET 방식으로 전달된다. 메뉴 통계 정보에 시간이 포함되지 않은 이유는
            클라이언트 컴퓨터마다 로컬 시간이 다를 수 있기 때문이다. 따라서 서버 측에서 정확한 서버 시간을 이용하여
            전송된 메뉴 통계 정보를 파일 혹은 데이터베이스에 기록하면 된다.</para>
            <para>메뉴 통계 정보를 기록하고자 한다면 서버 측에 ASP, ASP.NET, JSP 등의 서버측 프로그램을 이용하여
            웹 페이지를 작성하고 이 속성에 이 서버측 페이지의 URL을 설정한다. 그리고 MenuItemSelected 와 같은 이벤트
            핸들러에서 <see cref="M:TheOne.Windows.Forms.Menu.BasicMenuControl.ReportMenuStatistics(TheOne.UIModel.MenuItemInfo,System.String)">ReportMenuStatistics</see> 메쏘드를 호출하면 된다.</para>
            </remarks>
        </member>
        <member name="T:TheOne.Windows.Forms.Menu.OpenFailureReason">
            <summary>
            메뉴 화면을 열면서 발생한 오류를 설명하는 열거자.
            </summary>
        </member>
        <member name="F:TheOne.Windows.Forms.Menu.OpenFailureReason.Exception">
            <summary>
            UI 컨트롤을 로드하거나 화면에 표시하면서 예외가 발생하였다.
            </summary>
        </member>
        <member name="F:TheOne.Windows.Forms.Menu.OpenFailureReason.ExceedMaxUIControls">
            <summary>
            메뉴 컨트롤에 표시할 수 있는 최대 UI 컨트롤의 개수를 초과 하였다.
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.Controls.UploaderProgressUIManager.CreateInstance">
            <summary>
            ProgressUIManager 객체의 인스턴스를 생성하여 반환한다.
            </summary>
            <returns>ProgressUIManager 객체 인스턴스</returns>
            <remarks>
            ProgressUIManager 클래스는 Singleton 패턴를 사용하여 오직 하나의 인스턴스만이
            존재한다. 따라서 new 를 통해 인스턴스를 생성할 수는 없고 CreateInstance 스태틱 메쏘드를
            이용하여 인스턴스를 생성한다.
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.Controls.UploaderProgressUIManager.Finalize">
            <summary>
            Finalizer 구현
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.Controls.UploaderProgressUIManager.Dispose">
            <summary>
            ProgressUIManager에 할당된 자원들을 Dispose 한다
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.Controls.UploaderProgressUIManager.StartProgress">
            <summary>
            프로그래스 바를 표시한다
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.Controls.UploaderProgressUIManager.StopProgress">
            <summary>
            프로그래스 바를 감춘다
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.Controls.UploaderProgressUIManager.Shutdown">
            <summary>
            UI Manager에 대한 클린없을 수행한다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Controls.UploaderProgressUIManager.ParentWindow">
            <summary>
            UI 표시의 기준을 제공하는 UI 다이얼로그의 부모 윈도우
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Controls.UploaderProgressUIManager.Message">
            <summary>
            UI 다이얼로그에 표시되는 메시지
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Controls.UploaderProgressUIManager.MaxProgressValue">
            <summary>
            표시되는 진행 상황 값의 최대 값
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Controls.UploaderProgressUIManager.CurrentProgressValue">
            <summary>
            표시되는 현재 진행 상황 값
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Controls.UploaderProgressUIManager.MaxStepProgressValue">
            <summary>
            표시되는 전체 진행 상황 값의 최대 값
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Controls.UploaderProgressUIManager.CurrentStepProgressValue">
            <summary>
            표시되는 전체 진행 상황 값의 현재 값
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Controls.UploaderProgressUIManager.HasCancel">
            <summary>
            취소 유무 플래그
            </summary>
        </member>
        <member name="T:TheOne.Windows.Forms.Internal.ExceptionDialogFormFactory">
            <summary>
            처리되지 않은 예외(unhandled exception) 발생 시 표시되는 예외 대화상자 폼에 대한 팩토리 클래스.
            </summary>
            <remarks>
            	<para>NeoDEEX 기반의 Windows Forms 어플리케이션에서 처리 되지 않은 예외가 발생하면
            <see cref="T:TheOne.Windows.Forms.GlobalExceptionHandler"/> 클래스에 의해 예외 대화상자가 표시된다. 이 때
            표시할 예외 대화 상자는 ExceptionDialogFormFactory 혹은 그 파생 클래스의
            <see cref="M:TheOne.Windows.Forms.Internal.ExceptionDialogFormFactory.CreateExceptionDialogForm(System.Exception)"/> 메쏘드에서 반환하는 폼을 표시한다.</para>
            	<para>어플리케이션은 ExceptionDialogFormFactory에서 파생된 클래스를 작성하고
            CreateExceptionDialogForm 메쏘드를 오버라이드 하여 표시할 예외 대화상자 폼을
            기본 폼이 아닌 다른 폼으로 커스터마이징 할 수 있다.</para>
            </remarks>
            <example>
            	<code lang="CS" title="예외 대화 상자 커스터마이징" description="ExceptionDialogFormFactory 에서 파생된 팩토리 클래스를 작성하고 CreateExceptionDialogForm 메쏘드를 오버라이드 함에 따라 처리되지 않은 예외를 표시하는 대화 상자를 커스터마이징 할 수 있다.">
            // initialize the FormFactory property when the application starts
            GlobalExceptionHandler.FormFactory = new CustomExceptionDialogFormFactory();
             
            public class CustomExceptionDialogFormFactory : TheOne.Windows.Forms.Internal.ExceptionDialogFormFactory
            {
                public override Form CreateExceptionDialogForm(Exception ex)
                {
                    CustomExceptionDialogForm dlg = new CustomExceptionDialogForm();
                    dlg.Exception = ex;
                    dlg.Font = new Font("맑은고딕", 8);
                    return dlg;
                }
            }
             
            public partial class CustomExceptionDialogForm : Form
            {
                private Exception _exception;
             
                public CustomExceptionDialogForm()
                {
                    InitializeComponent();
                }
             
                public Exception Exception
                {
                    get { return _exception; }
                    set { _exception = value; }
                }
             
                protected override void OnLoad(EventArgs e)
                {
                    if (_exception != null) {
                        lblExceptionTitle.Text = _exception.Message;
                        lblExceptionMessage.Text = _exception.ToString();
                    }
                    else {
                        lblExceptionTitle.Text = String.Empty;
                        lblExceptionMessage.Text = String.Empty;
                    }
                    base.OnLoad(e);
                }
            }
            </code>
            </example>
        </member>
        <member name="M:TheOne.Windows.Forms.Internal.ExceptionDialogFormFactory.CreateExceptionDialogForm(System.Exception)">
            <summary>
            처리되지 않은 예외(unhandled exception)를 표시할 예외 대화상자 폼을 생성하여 반환한다.
            </summary>
            <param name="ex">처리되지 않은 예외 객체</param>
            <returns>예외를 표시할 Form 객체</returns>
            <remarks>
            <para>이 메쏘드에서 반환하는 Form 객체는 ShowDialog 메쏘드 호출에 의해 표시된다.</para>
            </remarks>
        </member>
        <member name="T:TheOne.Windows.Forms.Controls.OneUploader">
            <summary>HTTP 프로토콜을 통한 파일 업로드/다운로드 및 기타 파일 관리 기능을 제공하는 컨트롤</summary>
            <example>
            	<para>&lt;generalSection&gt;</para>
            	<para>&lt;!-- 기본 파일 처리 주소 --&gt;</para>
            	<para>&lt;add name="FileHandlerUrl"
                value="http://localhost/FileHandler.axd/&gt;</para>
            	<para>&lt;!-- TMP System 파일 처리 주소 --&gt;</para>
            	<para>&lt;add name="TMPFileHandlerUrl"
                value="http://localhost/FileHandler.axd/&gt;</para>
            	<para>&lt;/generalSection&gt;</para>
            	<para></para>
            	<para>OneUploader.SystemID 속성이 빈 값인 경우 "기본 파일 처리 주소"를 사용한다.</para>
            	<para>OneUploader.SystemID 속성이 "TMP" 인 경우 아래의 "TMP System 파일 처리 주소"를 사용한다.</para>
            </example>
            <remarks>
            	<para>OneUploader 컨트롤은 웹 서버의 TheOne.Web.HttpFileHandler 혹은 이에 상응 하는 HTTP Handler 혹은
                WebPage가 존재 하여야 한다.</para>
            </remarks>
            <summary>HTTP 프로토콜을 통한 파일 업로드/다운로드 및 기타 파일 관리 기능을 제공하는 컨트롤</summary>
        </member>
        <member name="M:TheOne.Windows.Forms.Controls.OneUploader.#ctor">
            <summary>파일 업로드 컨트롤 기본 생성자</summary>
        </member>
        <member name="M:TheOne.Windows.Forms.Controls.OneUploader.CheckDup(System.String)">
            <summary>
            중복 등록 체크 파일의 중복을 막음
            </summary>
            <param name="FileFullName">File 전체 이름 ex) d:\test\test.txt</param>
            <returns>true: 중복존재 , false: 중복 존재 안함</returns>
        </member>
        <member name="M:TheOne.Windows.Forms.Controls.OneUploader.GetFileFillter(System.String)">
            <summary>
            다운로드 파일의 파일 필터를 추가하여 Filter String생성.
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.Controls.OneUploader.SetItemStyle(System.Windows.Forms.ListViewItem,TheOne.Net.FileStatusType)">
            <summary>
            item 스타일을 적용한다.
            </summary>
            <param name="item">파일 리스트 item</param>
            <param name="itemStatus">파일의 상태</param>
        </member>
        <member name="M:TheOne.Windows.Forms.Controls.OneUploader.OneUploader_Load(System.Object,System.EventArgs)">
            <summary>
            컨트롤 로드 이벤트 <br/>
            컨트롤의 버튼 및 객체 초기화
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.Controls.OneUploader.btnAppend_Click(System.Object,System.EventArgs)">
            <summary>
            파일 선택 버튼 이벤트 Handler
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.Controls.OneUploader.btnRemove_Click(System.Object,System.EventArgs)">
            <summary>
            목록 파일 삭제
            upload된 파일의 경우 Server 삭제 
            upload되지 않은 파일의 경우 List에서만 삭제
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.Controls.OneUploader.btnUpLoad_Click(System.Object,System.EventArgs)">
            <summary>
            파일 업로드 버튼 이벤트
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.Controls.OneUploader.btnDownload_Click(System.Object,System.EventArgs)">
            <summary>
            파일 다운 로드
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:TheOne.Windows.Forms.Controls.OneUploader.httpFileManager_FileHandlerTickEvent(System.String,System.Int64)">
            <summary>
            파일 업로드/다운로드 이벤트
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.Controls.OneUploader.ExecuteUpload">
            <summary>선택 된 파일 업로드</summary>
        </member>
        <member name="M:TheOne.Windows.Forms.Controls.OneUploader.ExecuteDownload">
            <summary>
            파일 리스트 중 선택된 파일 다운로드 및 실행.
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.Controls.OneUploader.Download(TheOne.Net.HttpFileInfo,System.String)">
            <summary>
            파일 별 다운로드 메소드
            </summary>
            <param name="httpFileInfo"></param>
            <param name="saveFileFullPath"></param>
        </member>
        <member name="M:TheOne.Windows.Forms.Controls.OneUploader.Commit">
            <summary>
            파일 정상 처리 완료.
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.Controls.OneUploader.Commit(System.Collections.Generic.List{TheOne.Net.HttpFileInfo})">
            <summary>
            파일 정상 처리 완료.
            </summary>
            <param name="uploadlist">UploadedList에서 DataKey값을 체운 값을 다시 전달 함</param>
        </member>
        <member name="M:TheOne.Windows.Forms.Controls.OneUploader.Rollback">
            <summary>
            파일 처리 정상 종료 되지 않음.
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.Controls.OneUploader.ResetFileList">
            <summary>
            파일 리스트 초기화.
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.Controls.OneUploader.FileDataBinding(System.Collections.Generic.List{TheOne.Net.HttpFileInfo})">
            <summary>
            List Data을 받아 Bound한다.
            </summary>
            <param name="FileInfoList">Fileinfo Class의 객체의 ArrayList을 보여줌</param>
        </member>
        <member name="M:TheOne.Windows.Forms.Controls.OneUploader.AddFileInfo(TheOne.Net.HttpFileInfo)">
            <summary>
            파일목록을 프로그램상에서 추가해줌
            </summary>
            <param name="finfo">파일 정보</param>
        </member>
        <member name="M:TheOne.Windows.Forms.Controls.OneUploader.GetServerFileList(System.Boolean)">
            <summary>
            서버에 존재 하는 파일 리스트
            </summary>
            <param name="addListView">현재 파일 리스트에 포함 할 것인지</param>
            <returns>서버에 업로드된 파일 목록</returns>
        </member>
        <member name="F:TheOne.Windows.Forms.Controls.OneUploader.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.Controls.OneUploader.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TheOne.Windows.Forms.Controls.OneUploader.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Controls.OneUploader.SystemCode">
            <summary>
            Url Prefix 시스템을 구분 할 때 사용.
            </summary>
            <example>
            	<para>&lt;configurationSettings&gt;<br/>
                &lt;appSection&gt;</para>
            	<para>&lt;!-- SystemCode을 지정 하지 않은 경우 --&gt;<br/>
                &lt;add name="FILEHANDLERURL" value="http://localhost:7672/WebApps/FileHandler.aspx"
                /&gt;</para>
            	<para>&lt;!-- SystemCode TMP 을 지정 한경우--&gt;<br/>
                &lt;add name="TMPFILEHANDLERURL" value="http://localhost:7672/WebApps/FileHandler.aspx"
                /&gt;<br/>
                &lt;/appSection&gt;</para>
            	<para>... etc ...<br/>
                &lt;/configurationSettings&gt;<br/></para>
            </example>
        </member>
        <member name="P:TheOne.Windows.Forms.Controls.OneUploader.FileNameColumnSize">
            <summary>업로드 컨트롤 파일 리스트 항목 중 파일 명 항목의 Width 값을 반환/설정</summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Controls.OneUploader.FileSizeColumnSize">
            <summary>업로드 컨트롤 파일 리스트 항목 중 파일 Size 항목의 Width 값을 반환/설정</summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Controls.OneUploader.AllowPrefixGuid">
            <summary>File Upload된 파일에 32bit 유일키값을 파일 명으로 업로드 할 것인가를 설정</summary>
            <value>
            true : Guid 키를 사용, false : Guid키를 사용하지 않음<br/>
            기본값 false
            </value>
        </member>
        <member name="P:TheOne.Windows.Forms.Controls.OneUploader.UploadedFileList">
            <summary><para>Server에 업로드된 파일의 목록 실제 업로드 된 목록</para></summary>
            <remarks>업로드 이후 Commit 또는 RollBack 메소드 호출 이후 초기화(Null 값) 됨</remarks>
        </member>
        <member name="P:TheOne.Windows.Forms.Controls.OneUploader.AutoUploadedItemClear">
            <summary>파일 업로드 후 List의 아이템을 초기화 할 것인지 설정/반환 함.</summary>
            <value>true : 초기화 함, false : 초기화 하지 않음.</value>
        </member>
        <member name="P:TheOne.Windows.Forms.Controls.OneUploader.MaxFileCount">
            <summary>
            파일의 총 갯수 제한 
            0의 경우 무한대
            0이상의 값일 경우 한정을 둠
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Controls.OneUploader.Filter">
            <summary>파일 필터링</summary>
            <value><para>MS Word(*.doc)|*.doc|MS Excel(*.xls)|*.xls</para></value>
        </member>
        <member name="P:TheOne.Windows.Forms.Controls.OneUploader.UploaderChanged">
            <summary>
            변경사항 유무을 체크 한다. <br/>
            변경사항이 있을시 true
            없을시 false
            </summary>
            <example>
            if( ! uploadControl.IsChange )
            {
            	// 변경 사항이 없을때 로직을 처리 한다. 
            }
            else
            {
            	// 변경사항이 있을때 로직을 처리 한다. 
            }
            </example>
        </member>
        <member name="P:TheOne.Windows.Forms.Controls.OneUploader.SubUrl">
            <summary>
            File 을 저장 할 Directory Path <br/>
            예) uploadCtrl.SubUrl = "/PSMFILES/"
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Controls.OneUploader.NonUploadImage">
            <summary>
            업로드 되지 않은 파일의 심볼 이미지
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Controls.OneUploader.UploadedImage">
            <summary>
            업로드 된 파일의 심볼 이미지
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Controls.OneUploader.AllowAutoCommit">
            <summary>
            서버 파일 정상 처리 후 자동으로 정상 완료 처리 함.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Controls.OneUploader.ButtonAreaVisible">
            <summary>
            버튼 영역 표시 여부
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Controls.OneUploader.UploadButtonVisible">
            <summary>
            업로드 버튼 Visible
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Controls.OneUploader.UploadButtonImage">
            <summary>
            업로드 버튼 이미지
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Controls.OneUploader.UploadButtonText">
            <summary>
            업로드 버튼 텍스트
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Controls.OneUploader.DownloadButtonVisible">
            <summary>
            다운로드 버튼 Visible
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Controls.OneUploader.DownloadButtonImage">
            <summary>
            다운로드 버튼 이미지
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Controls.OneUploader.DownloadButtonText">
            <summary>
            다운로드 버튼 텍스트
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Controls.OneUploader.AppendButtonVisible">
            <summary>
            파일추가 버튼 Visible
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Controls.OneUploader.AppendButtonImage">
            <summary>
            파일추가 버튼 이미지
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Controls.OneUploader.AppendButtonText">
            <summary>
            파일추가 버튼 텍스트
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Controls.OneUploader.RemoveButtonVisible">
            <summary>
            파일삭제 버튼 Visible
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Controls.OneUploader.RemoveButtonImage">
            <summary>
            파일삭제 버튼 이미지
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Controls.OneUploader.RemoveButtonText">
            <summary>
            파일삭제 버튼 텍스트
            </summary>
        </member>
        <member name="E:TheOne.Windows.Forms.Controls.OneUploader.OnError">
            <summary>
            컨트롤 에러 이벤트
            </summary>
        </member>
        <member name="E:TheOne.Windows.Forms.Controls.OneUploader.OnUploaded">
            <summary>
            파일 업로드 이벤트
            </summary>
        </member>
        <member name="E:TheOne.Windows.Forms.Controls.OneUploader.OnCommited">
            <summary>
            파일 처리 완료 이벤트
            </summary>
        </member>
        <member name="T:TheOne.Windows.Forms.Controls.OneUploader.ErrorEvent">
            <summary>
            컨트롤 에러 발생시 발생 이벤트 대리자
            </summary>
        </member>
        <member name="T:TheOne.Windows.Forms.Controls.OneUploader.UploadedEvent">
            <summary>
            파일 업로드 된 이후 발생 되는 이벤트 대리자
            </summary>
        </member>
        <member name="T:TheOne.Windows.Forms.Controls.OneUploader.CommitedEvent">
            <summary>
            파일 처리 완료 이벤트 대리자
            </summary>
        </member>
        <member name="T:TheOne.Windows.Forms.Internal.MessageBoxForm">
            <summary>
            표준 메세지 폼 클래스. 
            </summary>
            <remarks>
            프레임워크 내부적으로 사용되는 표준 메세지 폼을 출력하는 클래스이다.
            </remarks>
        </member>
        <member name="T:TheOne.Windows.Forms.Internal.MessageBoxFormBase">
            <summary>
            메시지 박스 폼을 위한 베이스 클래스.
            </summary>
            <remarks>
            <para><see cref="T:TheOne.Windows.Forms.MsgBox"/> 클래스에 의해 표시되는 메시지 박스를 커스터마이징 하고자 할 때
            버튼 배열, 메시지 박스 폼의 크기 조정 등의 기능을 제공하는 베이스 클래스이다.</para>
            <para>메시지 박스를 커스터마이징 하고자 할 때 MessageBoxFormBase 에서 파생된 클래스를
            작성하면 작성이 보다 용이하지만 반드시 파생을 해야하는 것은 아니다.</para>
            <para>MessageBoxFormBase에서 파생된 폼은 생성자에서 <see cref="P:TheOne.Windows.Forms.Internal.MessageBoxFormBase.IconPictureBox"/> 속성과
            <see cref="P:TheOne.Windows.Forms.Internal.MessageBoxFormBase.MessageLabel"/> 속성을 적절한 컨트롤로 초기화 하고 <see cref="M:TheOne.Windows.Forms.Internal.MessageBoxFormBase.GetButtonControls"/>
            메쏘드를 오버라이드하여 <see cref="P:TheOne.Windows.Forms.Internal.MessageBoxFormBase.MessageBoxButtons"/> 속성이 지정하는 버튼들의 배열을 반환해
            주어야만 한다.</para>
            </remarks>
        </member>
        <member name="F:TheOne.Windows.Forms.Internal.MessageBoxFormBase.DefaultMaxWidth">
            <summary>
            메시지 박스 최대 폭 디폴트 값
            </summary>
        </member>
        <member name="F:TheOne.Windows.Forms.Internal.MessageBoxFormBase.DefaultMaxHeight">
            <summary>
            메시지 박스 최대 높이 디폴트 값
            </summary>
        </member>
        <member name="F:TheOne.Windows.Forms.Internal.MessageBoxFormBase.DefaultMinWidth">
            <summary>
            메시지 박스 최소 폭 디폴트 값
            </summary>
        </member>
        <member name="F:TheOne.Windows.Forms.Internal.MessageBoxFormBase.DefaultMinHeight">
            <summary>
            메시지 박스 최소 높이 디폴트 값
            </summary>
        </member>
        <member name="F:TheOne.Windows.Forms.Internal.MessageBoxFormBase.DefaultMarginTop">
            <summary>
            메시지 박스 내부 위쪽 마진 디폴트 값
            </summary>
        </member>
        <member name="F:TheOne.Windows.Forms.Internal.MessageBoxFormBase.DefaultMarginBottom">
            <summary>
            메시지 박스 내부 아래쪽 마진 디폴트 값
            </summary>
        </member>
        <member name="F:TheOne.Windows.Forms.Internal.MessageBoxFormBase.DefaultMarginLeft">
            <summary>
            메시지 박스 내부 왼쪽 마진 디폴트 값
            </summary>
        </member>
        <member name="F:TheOne.Windows.Forms.Internal.MessageBoxFormBase.DefaultMarginRight">
            <summary>
            메시지 박스 내부 오른쪽 마진 디폴트 값
            </summary>
        </member>
        <member name="F:TheOne.Windows.Forms.Internal.MessageBoxFormBase.DefaultButtonWidth">
            <summary>
            메시지 박스 버튼 너비 디폴트 값
            </summary>
        </member>
        <member name="F:TheOne.Windows.Forms.Internal.MessageBoxFormBase.DefaultButtonHeight">
            <summary>
            메시지 박스 버튼 높이 디폴트 값
            </summary>
        </member>
        <member name="F:TheOne.Windows.Forms.Internal.MessageBoxFormBase.DefaultMarginButtons">
            <summary>
            메시지 박스 버튼들 사이의 간격 디폴트 값
            </summary>
        </member>
        <member name="F:TheOne.Windows.Forms.Internal.MessageBoxFormBase.DefaultMarginImageRight">
            <summary>
            메시지 박스의 왼쪽 이미지와 메시지 텍스트 사이의 간격 디폴트 값
            </summary>
        </member>
        <member name="F:TheOne.Windows.Forms.Internal.MessageBoxFormBase.DefaultMarginButtonTop">
            <summary>
            메시지 박스의 왼쪽 이미지와 버튼과의 상하 간격 디폴트 값
            </summary>
        </member>
        <member name="F:TheOne.Windows.Forms.Internal.MessageBoxFormBase.MaxWidth">
            <summary>
            메시지 박스 최대 폭
            </summary>
        </member>
        <member name="F:TheOne.Windows.Forms.Internal.MessageBoxFormBase.MaxHeight">
            <summary>
            메시지 박스 최대 높이
            </summary>
        </member>
        <member name="F:TheOne.Windows.Forms.Internal.MessageBoxFormBase.MinWidth">
            <summary>
            메시지 박스 최소 폭
            </summary>
        </member>
        <member name="F:TheOne.Windows.Forms.Internal.MessageBoxFormBase.MinHeight">
            <summary>
            메시지 박스 최소 높이
            </summary>
        </member>
        <member name="F:TheOne.Windows.Forms.Internal.MessageBoxFormBase.MarginTop">
            <summary>
            메시지 박스 내부 위쪽 마진
            </summary>
        </member>
        <member name="F:TheOne.Windows.Forms.Internal.MessageBoxFormBase.MarginBottom">
            <summary>
            메시지 박스 내부 아래쪽 마진
            </summary>
        </member>
        <member name="F:TheOne.Windows.Forms.Internal.MessageBoxFormBase.MarginLeft">
            <summary>
            메시지 박스 내부 왼쪽 마진
            </summary>
        </member>
        <member name="F:TheOne.Windows.Forms.Internal.MessageBoxFormBase.MarginRight">
            <summary>
            메시지 박스 내부 오른쪽 마진
            </summary>
        </member>
        <member name="F:TheOne.Windows.Forms.Internal.MessageBoxFormBase.ButtonWidth">
            <summary>
            메시지 박스 버튼 너비
            </summary>
        </member>
        <member name="F:TheOne.Windows.Forms.Internal.MessageBoxFormBase.ButtonHeight">
            <summary>
            메시지 박스 버튼 높이
            </summary>
        </member>
        <member name="F:TheOne.Windows.Forms.Internal.MessageBoxFormBase.MarginButtons">
            <summary>
            메시지 박스 버튼들 사이의 간격
            </summary>
        </member>
        <member name="F:TheOne.Windows.Forms.Internal.MessageBoxFormBase.MarginImageRight">
            <summary>
            메시지 박스의 왼쪽 이미지와 메시지 텍스트 사이의 간격
            </summary>
        </member>
        <member name="F:TheOne.Windows.Forms.Internal.MessageBoxFormBase.MarginButtonTop">
            <summary>
            메시지 박스의 왼쪽 이미지와 버튼과의 상하 간격
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.Internal.MessageBoxFormBase.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.Internal.MessageBoxFormBase.GetIconImage">
            <summary>
            <see cref="P:TheOne.Windows.Forms.Internal.MessageBoxFormBase.ImageKind"/> 속성에 의해 메시지 박스에 표시할 아이콘 이미지를 반환한다.
            </summary>
            <returns>메시지 박스 아이콘으로 사용할 Image 객체</returns>
        </member>
        <member name="M:TheOne.Windows.Forms.Internal.MessageBoxFormBase.GetButtonControls">
            <summary>
            	<see cref="P:TheOne.Windows.Forms.Internal.MessageBoxFormBase.MessageBoxButtons"/> 속성에 의해 화면에 나타날 버튼들의 배열을 반환한다.
            </summary>
            <returns>메시지 박스의 버튼으로 표시할 컨트롤의 배열</returns>
            <remarks>
            	<para>메시지 박스에 버튼으로 표시될 컨트롤은 <see cref="T:System.Windows.Forms.Control"/> 에서 파생된
            임의의 컨트롤이어도 된다. 하지만 Button 컨트롤과 같이 IButtonControl 인터페이스를 구현하는 컨트롤은
            이 폼의 AcceptButton 속성 및 CancelButton 속성을 초기화 하는데 자동으로 사용된다.</para>
            	<para>메시지 박스에 버튼으로 사용되는 컨트롤이 Button 컨트롤 혹은 그 파생 컨트롤이 아닌 경우
            버튼(컨트롤)이 클릭됨에 따라 폼의 DialogResult 속성을 적절히 설정해 주고 폼을 닫아 주어야 한다.</para>
            </remarks>
            <example>
            	<code lang="CS">
            // btnOK, btnCancel, etc are defined in the dervied form from MessageBoxFormBase
            protected override Control[] GetButtonControls()
            {
                Button[] buttonControls;
             
                switch (this.Buttons) {
                case MessageBoxButtons.OKCancel:
                    buttonControls = new Button[] { btnOK, btnCancel };
                    break;
                case MessageBoxButtons.YesNo:
                    buttonControls = new Button[] { btnYes, btnNo };
                    break;
                case MessageBoxButtons.YesNoCancel:
                    buttonControls = new Button[] { btnYes, btnNo, btnCancel };
                    break;
                case MessageBoxButtons.RetryCancel:
                    buttonControls = new Button[] { btnRetry, btnCancel };
                    break;
                case MessageBoxButtons.AbortRetryIgnore:
                    buttonControls = new Button[] { btnRetry, btnAbort, btnIgnore };
                    break;
                case MessageBoxButtons.OK:
                default:
                    buttonControls = new Button[] { btnOK };
                    break;
                }
                return buttonControls;
            }
            </code>
            </example>
        </member>
        <member name="M:TheOne.Windows.Forms.Internal.MessageBoxFormBase.LayoutControls">
            <summary>
            메시지 박스의 아이콘 이미지, 메시지 라벨, 버튼들을 재 배치 한다.
            </summary>
            <remarks>
            <para>LayouControls 메쏘드는 <see cref="P:TheOne.Windows.Forms.Internal.MessageBoxFormBase.IconPictureBox"/> 속성과 <see cref="P:TheOne.Windows.Forms.Internal.MessageBoxFormBase.MessageLabel"/> 속성이
            지정하는 아이콘 이미지 및 메시지 라벨과 <see cref="M:TheOne.Windows.Forms.Internal.MessageBoxFormBase.GetButtonControls"/> 메쏘드가 반환하는
            버튼 컨트롤을 그 크기에 맞추어 절절히 재 배열한다. 이 때 메시지 박스의 최대/최소 크기,
            마진, 버튼 사이의 간격 등에 사용되는 상수들은 MessageBoxFormBase의 정적 필드에 의해 제어된다.</para>
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.Internal.MessageBoxFormBase.OnLoad(System.EventArgs)">
            <summary>
            Load 이벤트 발생 전에 <see cref="M:TheOne.Windows.Forms.Internal.MessageBoxFormBase.LayoutControls"/> 메쏘드를 호출하여 메시지 박스의
            아이콘, 메시지, 버튼들을 재 배열한다.
            </summary>
            <param name="e">표준 이벤트 매개변수 객체</param>
        </member>
        <member name="P:TheOne.Windows.Forms.Internal.MessageBoxFormBase.Message">
            <summary>
            메시지 박스에 표시할 메시지
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Internal.MessageBoxFormBase.Caption">
            <summary>
            메시지 박스의 캡션. 디폴트 값은 빈 문자열이다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Internal.MessageBoxFormBase.MessageBoxButtons">
            <summary>
            메시지 박스의 버튼 스타일
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Internal.MessageBoxFormBase.CustomImage">
            <summary>
            메시지 박스 사용자 정의 이미지 설정
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Internal.MessageBoxFormBase.ImageKind">
            <summary>
            메시지 박스 이미지 타입
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Internal.MessageBoxFormBase.Data">
            <summary>
            메시지 박스에서 사용할 추가 데이터
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.Internal.MessageBoxFormBase.IconPictureBox">
            <summary>
            메시지 박스의 아이콘을 표시하는데 사용할 PictureBox 컨트롤.
            </summary>
            <remarks>
            <para>IconPictureBox 속성은 <see cref="M:TheOne.Windows.Forms.Internal.MessageBoxFormBase.LayoutControls"/> 메쏘드 내에서 아이콘 이미지를
            설정하고 표시하는데 사용된다. 따라서 파생 클래스의 생성자에서 이 속성을 아이콘을 표시할
            PictureBox 컨트롤로 설정해 주어야 한다.</para>
            </remarks>
        </member>
        <member name="P:TheOne.Windows.Forms.Internal.MessageBoxFormBase.MessageLabel">
            <summary>
            메시지 박스의 메시지를 표시하는데 사용할 Label 컨트롤.
            </summary>
            <remarks>
            <para>MessageLabel 속성은 <see cref="M:TheOne.Windows.Forms.Internal.MessageBoxFormBase.LayoutControls"/> 메쏘드 내에서 메시지 박스의 메시지를
            설정하고 표시하는데 사용된다. 따라서 파생 클래스의 생성자에서 이 속성을 메시지를 표시할
            Label 컨트롤로 설정해 주어야 한다.</para>
            </remarks>
        </member>
        <member name="F:TheOne.Windows.Forms.Internal.MessageBoxForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.Internal.MessageBoxForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TheOne.Windows.Forms.Internal.MessageBoxForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.Internal.MessageBoxForm.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.Internal.MessageBoxForm.GetButtonControls">
            <summary>
            메시지 박스에 표시될 컨트롤의 배열을 반환한다.
            </summary>
            <returns>메시지 박스에 표시될 컨트롤의 배열.</returns>
        </member>
        <member name="T:TheOne.Windows.Forms.MsgCodeBox">
            <summary>
             메시지 코드에 의해 메시지를 표시하는 표준 메시지 박스를 제어하는 정적 클래스.
             </summary>
            <remarks>
             <para>MsgCodeBox 클래스는 내부적으로 <see cref="T:TheOne.Windows.Forms.MsgBox"/> 클래스를 사용한다. 따라서
             메시지 박스의 UI를 사용자가 재 정의할 수 있다. 상세한 내용은 MsgBox 클래스의 도움말을 참고 하도록 한다.</para>
            <para>메시지 박스에서 메시지 코드를 통해 표준 메시지를 표시하기 위해서는
             Configruation 파일에 MessageSection 이 필요하다.
             UrlMessageProvider를 사용하는 경우 Url 매개변수의 경로에서 DataSet을 받아서 메세지
             테이블을 구성한다. DataSet의 DataTable은 4개의 컬럼이 필요하고, 
             각 컬럼은 순서대로 group, code, message, caption 으로 인식한다.</para>
             </remarks>
            <example>
            	<code lang="XML" description="UrlMessageProvider를 사용하여 메세지 서버의 정보를 설정하는 MessageSection의 설정 예제.">
            &lt;messageSection defaultProvider="PMS"&gt;    
              &lt;provider name="PMS" type="TheOne.Text.UrlMessageProvider"&gt;
                  &lt;parameter key="Url" value="http://localhost/MessagePage.aspx" /&gt;
              &lt;/provider&gt;
              &lt;provider name="TMP" type="ConfigurationApp.MessageProvider.DbMessageProvider, ConfigurationApp" /&gt;    
            &lt;/messageSection&gt;
            </code>
            	<code lang="CS" description="다음 예제 코드는 메시지를 반환하는 ASPX 예제 코드.">
            private void Page_Load(object sender, System.EventArgs e)
            {
                    DataSet ds = GetMessageData();    // DB에서 메시지 테이블을 읽는다
                    Response.ContentType = "text/xml";
                    ds.WriteXml(Response.OutputStream);
                    Response.End();
            }
             
            private DataSet GetMessageData()
            {
                // DB 서버에서 데이터를 읽는다.
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();
                dt.Columns.Add("SysID", typeof(string));
                dt.Columns.Add("MsgCode", typeof(string));
                dt.Columns.Add("Message", typeof(string));
                dt.Columns.Add("Captoin", typeof(string));
                ds.Tables.Add(dt);
             
                dt.Rows.Add(new object[] { "PMS", "100", "테스트 메시지 100 번 입니다", "테스트 메시지" });
                dt.Rows.Add(new object[] { "PMS", "001", "저장 했습니다.", "저장 확인" });
                dt.Rows.Add(new object[] { "PMS", "101", "{0}을 저장하시겠습니까?", "저장 확인" });
                dt.Rows.Add(new object[] { "PMS", "002", "저장하지 않은 정보가 있습니다.\r\n저장하시겠습니까?", "경고" });
             
                return ds;
            }
            </code>
            	<code lang="CS" description="MsgCodeBox 사용 예제.">
            private void button2_Click(object sender, EventArgs e)
            {
                MsgCodeBox.ShowFormat("101", MessageBoxButtons.OK, Properties.Resources.CustomImage, "저장" );
                MsgCodeBox.ShowFormat("101", MessageBoxButtons.OK, ImageKinds.Question, "열기");
            }
            </code>
            </example>
        </member>
        <member name="M:TheOne.Windows.Forms.MsgCodeBox.Show(System.String)">
            <summary>
            메시지 코드가 지시하는 메시지가 있는 표준 메시지 박스를 표시한다.
            </summary>
            <param name="msgCode">표준 메시지 코드</param>
            <returns>메시지 박스 버튼 선택 결과</returns>
        </member>
        <member name="M:TheOne.Windows.Forms.MsgCodeBox.Show(System.String,System.Windows.Forms.MessageBoxButtons)">
            <summary>
            메시지 코드가 지시하는 메시지와 버튼이 있는 표준 메시지 박스를 표시한다.
            </summary>
            <param name="msgCode">표준 메시지 코드</param>
            <param name="buttons">메시지 박스 버튼</param>
            <returns>메시지 박스 버튼 선택 결과</returns>
        </member>
        <member name="M:TheOne.Windows.Forms.MsgCodeBox.Show(System.String,System.Windows.Forms.MessageBoxButtons,TheOne.Windows.Forms.ImageKinds)">
            <summary>
            메시지 코드가 지시하는 메시지와 버튼, 이미지가 있는 표준 메시지 박스를 표시한다.
            </summary>
            <param name="msgCode">표준 메시지 코드</param>
            <param name="buttons">메시지 박스 버튼</param>
            <param name="imageKind">메시지 박스에 표시할 이미지</param>
            <returns>메시지 박스 버튼 선택 결과</returns>
        </member>
        <member name="M:TheOne.Windows.Forms.MsgCodeBox.Show(System.Windows.Forms.IWin32Window,System.String,System.Windows.Forms.MessageBoxButtons,TheOne.Windows.Forms.ImageKinds)">
            <summary>
            메시지 코드가 지시하는 메시지, 버튼, 이미지가 있는 표준 메시지 박스를 지정한 객체 앞에 표시한다.
            </summary>
            <param name="owner">메시지 박스를 소유하는 부모 윈도우</param>
            <param name="msgCode">표준 메시지 코드</param>
            <param name="buttons">메시지 박스 버튼</param>
            <param name="imageKind">메시지 박스에 표시할 이미지</param>
            <returns>메시지 박스 버튼 선택 결과</returns>
        </member>
        <member name="M:TheOne.Windows.Forms.MsgCodeBox.Show(System.String,System.Windows.Forms.MessageBoxButtons,System.Drawing.Image)">
            <summary>
            메시지 코드가 지시하는 메시지와 버튼, 이미지가 있는 있는 표준 메시지 박스를 표시한다.
            </summary>
            <param name="msgCode">표준 메시지 코드</param>
            <param name="buttons">메시지 박스 버튼</param>
            <param name="imageIcon">메시지 박스에 표시할 사용자 정의 이미지</param>
            <returns>메시지 박스 버튼 선택 결과</returns>
        </member>
        <member name="M:TheOne.Windows.Forms.MsgCodeBox.Show(System.Windows.Forms.IWin32Window,System.String,System.Windows.Forms.MessageBoxButtons,System.Drawing.Image)">
            <summary>
            메시지 코드가 지시하는 메시지, 버튼, 이미지가 있는 표준 메시지 박스를 지정한 객체 앞에 표시한다.
            </summary>
            <param name="owner">메시지 박스를 소유하는 부모 윈도우</param>
            <param name="msgCode">표준 메시지 코드</param>
            <param name="buttons">메시지 박스 버튼</param>
            <param name="imageIcon">메시지 박스에 표시할 사용자 정의 이미지</param>
            <returns>메시지 박스 버튼 선택 결과</returns>
        </member>
        <member name="M:TheOne.Windows.Forms.MsgCodeBox.ShowFormat(System.String,System.Object[])">
            <summary>
            메시지 코드가 지시하는 메시지와 매개변수를 표준 메시지 박스에 표시한다.
            </summary>
            <param name="msgCode">표준 메시지 코드</param>
            <param name="args">메시지 매개변수</param>
            <returns>메시지 박스 버튼 선택 결과</returns>
        </member>
        <member name="M:TheOne.Windows.Forms.MsgCodeBox.ShowFormat(System.String,System.Windows.Forms.MessageBoxButtons,System.Object[])">
            <summary>
            메시지 코드가 지시하는 메시지와 매개변수, 버튼이 있는 표준 메시지 박스를 표시한다.
            </summary>
            <param name="msgCode">표준 메시지 코드</param>
            <param name="buttons">메시지 박스 버튼</param>
            <param name="args">메시지 매개변수</param>
            <returns>메시지 박스 버튼 선택 결과</returns>
        </member>
        <member name="M:TheOne.Windows.Forms.MsgCodeBox.ShowFormat(System.String,System.Windows.Forms.MessageBoxButtons,TheOne.Windows.Forms.ImageKinds,System.Object[])">
            <summary>
            메시지 코드가 지시하는 메시지와 매개변수, 버튼, 이미지가 있는 표준 메시지 박스를 표시한다.
            </summary>
            <param name="msgCode">표준 메시지 코드</param>
            <param name="buttons">메시지 박스 버튼</param>
            <param name="imageKind">메시지 박스에 표시할 이미지</param>
            <param name="args">메시지 매개변수</param>
            <returns>메시지 박스 버튼 선택 결과</returns>
        </member>
        <member name="M:TheOne.Windows.Forms.MsgCodeBox.ShowFormat(System.Windows.Forms.IWin32Window,System.String,System.Windows.Forms.MessageBoxButtons,TheOne.Windows.Forms.ImageKinds,System.Object[])">
            <summary>
            메시지 코드가 지시하는 메시지와 매개변수, 버튼, 이미지가 있는 표준 메시지 박스를 지정한 객체 앞에 표시한다.
            </summary>
            <param name="owner">메시지 박스를 소유하는 부모 윈도우</param>
            <param name="msgCode">표준 메시지 코드</param>
            <param name="buttons">메시지 박스 버튼</param>
            <param name="imageKind">메시지 박스에 표시할 이미지</param>
            <param name="args">메시지 매개변수</param>
            <returns>메시지 박스 버튼 선택 결과</returns>
        </member>
        <member name="M:TheOne.Windows.Forms.MsgCodeBox.ShowFormat(System.String,System.Windows.Forms.MessageBoxButtons,System.Drawing.Image,System.Object[])">
            <summary>
            메시지 코드가 지시하는 메시지와 매개변수, 버튼, 이미지가 있는 표준 메시지 박스를 표시한다.
            </summary>
            <param name="msgCode">표준 메시지 코드</param>
            <param name="buttons">메시지 박스 버튼</param>
            <param name="imageIcon">메시지 박스에 표시할 사용자 정의 이미지</param>
            <param name="args">메시지 매개변수</param>
            <returns>메시지 박스 버튼 선택 결과</returns>
        </member>
        <member name="M:TheOne.Windows.Forms.MsgCodeBox.ShowFormat(System.Windows.Forms.IWin32Window,System.String,System.Windows.Forms.MessageBoxButtons,System.Drawing.Image,System.Object[])">
            <summary>
            메시지 코드가 지시하는 메시지와 매개변수, 버튼, 이미지가 있는 표준 메시지 박스를 지정한 객체 앞에 표시한다.
            </summary>
            <param name="owner">메시지 박스를 소유하는 부모 윈도우</param>
            <param name="msgCode">표준 메시지 코드</param>
            <param name="buttons">메시지 박스 버튼</param>
            <param name="imageIcon">메시지 박스에 표시할 사용자 정의 이미지</param>
            <param name="args">메시지 매개변수</param>
            <returns>메시지 박스 버튼 선택 결과</returns>
        </member>
        <member name="T:TheOne.Windows.Forms.Menu.MenuLabel">
            <summary>
            FlowMenuList 컨트롤 내부에서 사용하는 라벨 컨트롤
            </summary>
            <remarks>
            배경 이미지를 이용하여 라벨 컨트롤을 표시하고 마우스 호버에 반응한다. 또한
            라벨이 "선택"된 것을 표시하도록 배경 이미지를 바꾼다.
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.MenuLabel.#ctor(TheOne.Windows.Forms.Menu.FlowMenuList)">
            <summary>
            생성자 구현
            </summary>
            <param name="menuList">이 라벨 컨트롤을 포함하는 FlowMenuList 객체</param>
        </member>
        <member name="P:TheOne.Windows.Forms.Menu.MenuLabel.State">
            <summary>
            라벨 상태를 읽거나 설정한다.
            </summary>
            <value>라벨 상태를 나타내는 정수. 0 = 보통, 1 = 마우스 호버, 2 = 선택됨</value>
        </member>
        <member name="T:TheOne.Windows.Forms.Menu.DefaultMenuLoadingSplash">
            <summary>
            디폴트 메뉴 로딩 스플래쉬 폼
            </summary>
        </member>
        <member name="F:TheOne.Windows.Forms.Menu.DefaultMenuLoadingSplash.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.DefaultMenuLoadingSplash.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.DefaultMenuLoadingSplash.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.DefaultMenuLoadingSplash.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="T:TheOne.Windows.Forms.ProgressUIManager">
            <summary>
            작업 진행 상황을 표시하기 위해 사용되는 Progress 매니저
            </summary>
            <remarks>
            ProgressManager는 동기 작업을 수행하는 동안 작업의 진행 상황을 가시적으로
            보여 주기 위해 별도의 쓰레드를 사용하여 다이얼로그를 표시하는 등의 작업을 관리한다.
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.ProgressUIManager.CreateInstance">
            <summary>
            ProgressUIManager 객체의 인스턴스를 생성하여 반환한다.
            </summary>
            <returns>ProgressUIManager 객체 인스턴스</returns>
            <remarks>
            ProgressUIManager 클래스는 Singleton 패턴를 사용하여 오직 하나의 인스턴스만이
            존재한다. 따라서 new 를 통해 인스턴스를 생성할 수는 없고 CreateInstance 스태틱 메쏘드를
            이용하여 인스턴스를 생성한다.
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.ProgressUIManager.Finalize">
            <summary>
            Finalizer 구현
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.ProgressUIManager.Dispose">
            <summary>
            ProgressUIManager에 할당된 자원들을 Dispose 한다
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.ProgressUIManager.StartProgress">
            <summary>
            프로그래스 바를 표시한다
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.ProgressUIManager.StopProgress">
            <summary>
            프로그래스 바를 감춘다
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.ProgressUIManager.Shutdown">
            <summary>
            UI Manager에 대한 클린없을 수행한다.
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.ProgressUIManager.FormFactory">
            <summary>
            작업 진행 상황 대화상자를 생성하는 팩토리 객체
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.ProgressUIManager.ParentWindow">
            <summary>
            UI 표시의 기준을 제공하는 UI 다이얼로그의 부모 윈도우
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.ProgressUIManager.Message">
            <summary>
            UI 다이얼로그에 표시되는 메시지
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.ProgressUIManager.ShowProgressValue">
            <summary>
            진행 상황 값 표시 여부
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.ProgressUIManager.MaxProgressValue">
            <summary>
            표시되는 진행 상황 값의 최대 값
            </summary>
        </member>
        <member name="P:TheOne.Windows.Forms.ProgressUIManager.CurrentProgressValue">
            <summary>
            표시되는 현재 진행 상황 값
            </summary>
        </member>
        <member name="T:TheOne.Windows.Forms.GlobalState">
            <summary>
            UI 수준(스마트 클라이언트)에서 사용되는 글로벌 상태 관리자.
            </summary>
            <remarks>
            GlobalState 의 정보는 스마트 클라이언트 UI 수준에서만 사용될 수 있으며
            이 클래스에 저장된 정보가 서버 수준(웹 서비스, COM+ 컴포넌트)에 전달되지
            않음에 유의한다.<br/>
            이 클래스의 사용방법은 ASP.NET의 세션 객체의 사용법과 동일하게
            Name/Value 기법을 사용한다.<br/>
            이 클래스의 사용시 주의할 점은 GlobalState에 기록된 정보는 닷넷 GC에 의해
            메모리에서 제거되지 않으므로 다른 화면과 공유해야할 데이터 등의 반드시
            필요한 부분에 대해서만 사용해야 하며, 대량의 데이터를 캐시하는 등의 용도로
            사용해서는 안된다.<br/> 
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.GlobalState.GetItem(System.String)">
            <summary>
            전역 상태 관리자에서 주어진 이름의 값을 구한다.
            </summary>
            <param name="name">상태값 이름</param>
            <returns>상태 값</returns>
        </member>
        <member name="M:TheOne.Windows.Forms.GlobalState.SetItem(System.String,System.Object)">
            <summary>
            전역 상태 관리자에서 주어진 이름의 값을 설정한다.
            </summary>
            <param name="name">상태값 이름</param>
            <param name="value">설정할 상태값</param>
        </member>
        <member name="M:TheOne.Windows.Forms.GlobalState.RemoveItem(System.String)">
            <summary>
            전역 상태 관리자에서 주어진 이름의 값을 제거 한다.
            </summary>
            <param name="name">제거할 상태값 이름</param>
        </member>
        <member name="T:TheOne.Windows.Forms.Controls.OneControlPrintDocument">
            <summary>
            컨트롤 화면 출력을 위한 컴포넌트
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.Controls.OneControlPrintDocument.#ctor">
            <summary>
            객체 생성자.
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.Controls.OneControlPrintDocument.PrintDialog(System.Windows.Forms.Control)">
            <summary>
            프린트 다이얼를 띠운 후 프린트 한다. 
            </summary>
            <param name="printControl">프린트 대상 컨트롤</param>
        </member>
        <member name="M:TheOne.Windows.Forms.Controls.OneControlPrintDocument.PrintPreView(System.Windows.Forms.Control)">
            <summary>
            프린트 대상 컨트롤을 확인 후 프린트 한다.
            </summary>
            <param name="printControl">프린트 대상 컨트롤</param>
        </member>
        <member name="M:TheOne.Windows.Forms.Controls.OneControlPrintDocument.OnPrintPage(System.Drawing.Printing.PrintPageEventArgs)">
            <summary>
            OnPrintPage 재정의
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:TheOne.Windows.Forms.Win32.GDI.RGB(System.Drawing.Color)">
            <summary>
            주어진 Color 상수값에서 RGB 색상을 반환한다.
            </summary>
            <param name="color">Color 값</param>
            <returns>RGB 정수값</returns>
        </member>
        <member name="M:TheOne.Windows.Forms.Win32.GDI.RGB(System.Int32,System.Int32,System.Int32)">
            <summary>
            주어진 R, G, B 값을 단일 32비트 RGB 정수 값으로 반환한다.
            </summary>
            <param name="r">R 값</param>
            <param name="g">G 값</param>
            <param name="b">B 값</param>
            <returns>32비트 RGB 값</returns>
        </member>
        <member name="M:TheOne.Windows.Forms.Win32.GDI.RoundRect(System.Drawing.Graphics,System.Drawing.Color,System.Drawing.Rectangle,System.Int32)">
            <summary>
            GDI RoundRect 함수에 대한 호출 수행
            </summary>
            <param name="g">Graphics 객체</param>
            <param name="color">둥근 사각형 색상</param>
            <param name="rc">사각형 위치</param>
            <param name="r">둥근모서리의 반지름</param>
        </member>
        <member name="T:TheOne.Windows.Forms.Menu.UIControlInfo">
            <summary>
            로드된 UI 컨트롤 정보를 저장하는 엔티티 객체
            </summary>
            <remarks>
            <remarks>
            UI 컨트롤이 로드되면 이 클래스의 인스턴스가 생성된다. 이 클래스는 UI 컨트롤의
            ID, DLL의 Url, 클래스 명, 제목, 관련 메뉴 정보(MenuItemInfo 객체), 네비게이션
            정보 등을 제공한다.
            </remarks>
            </remarks>
        </member>
        <member name="M:TheOne.Windows.Forms.Menu.UIControlInfo.#ctor(TheOne.Windows.Forms.UserControlBase,TheOne.UIModel.MenuItemInfo)">
            <summary>
            UIControlInfo 객체를 초기화 한다.
            </summary>
            <param name="ctrl">로드된 컨트롤 객체</param>
            <param name="info">메뉴 정보 객체</param>
        </member>
        <member name="P:TheOne.Windows.Forms.Menu.UIControlInfo.ID">
            <summary>
            UI 컨트롤에 대한 ID 값을 반환한다.
            </summary>
            <value>UI 컨트롤에 대한 고유 ID 값을 반환한다.</value>
            <remarks>
            <para>UI 컨트롤의 ID는 메뉴 ID와 동일한 값이다.</para>
            </remarks>
        </member>
        <member name="P:TheOne.Windows.Forms.Menu.UIControlInfo.DisplayTitle">
            <summary>
            UI 컨트롤 목록에 표시될 제목을 반환한다.
            </summary>
            <value>UI 컨트롤 목록에 사용될 제목</value>
            <remarks>
            <para>UI 컨트롤의 제목은 메뉴 데이터에 별도로 표시되지 않았다면 메뉴의 제목과 같다.</para>
            </remarks>
        </member>
        <member name="P:TheOne.Windows.Forms.Menu.UIControlInfo.MenuItemInfo">
            <summary>
            UI 컨트롤과 연결된 메뉴 아이템 정보 객체를 반환한다.
            </summary>
            <value>메뉴 아이템 정보를 나타내는 <see href="TheOne.UIModel.MenuItemInfo">MenuItemInfo</see> 객체</value>
        </member>
        <member name="P:TheOne.Windows.Forms.Menu.UIControlInfo.UIControl">
            <summary>
            UI 컨트롤 객체를 반환한다.
            </summary>
            <value>이 UIControlInfo 객체가 나타내는 UI 컨트롤(<see href="TheOne.Windows.Forms.UserControlBase">UserControlBase</see>) 객체</value>
        </member>
        <member name="P:TheOne.Windows.Forms.Menu.UIControlInfo.PrevControl">
            <summary>
            메뉴 네비게이션에 의해 연결된 이전 UI 컨트롤에 대한 링크를 반환한다.
            </summary>
            <value>이전 UI 컨트롤을 나타내는 <see href="TheOne.Windows.Forms.UserControlBase">UserControlBase</see> 객체</value>
            <remarks>
            <para>메뉴 네비게이션의 Navigate 등에 의해 메뉴 간의 이동이 발생한 경우, UI 컨트롤들은 서로 연결을 갖게 된다.
            이 때 UIControlInfo 객체의 PrevControl 속성과 NextControl 속성에 의해 메뉴 들 사이의 이동을 추적할 수 있다.</para>
            <para>일반적으로 개발자가 직접 이 속성을 제어해야 하는 경우는 거의 발생하지 않는다.</para>
            </remarks>
        </member>
        <member name="P:TheOne.Windows.Forms.Menu.UIControlInfo.NextControl">
            <summary>
            메뉴 네비게이션에 의해 연결된 다음 UI 컨트롤에 대한 링크를 반환한다.
            </summary>
            <value>다음 UI 컨트롤을 나타내는 <see href="TheOne.Windows.Forms.UserControlBase">UserControlBase</see> 객체</value>
            <remarks>
            <para>메뉴 네비게이션의 Navigate 등에 의해 메뉴 간의 이동이 발생한 경우, UI 컨트롤들은 서로 연결을 갖게 된다.
            이 때 UIControlInfo 객체의 PrevControl 속성과 NextControl 속성에 의해 메뉴 들 사이의 이동을 추적할 수 있다.</para>
            <para>일반적으로 개발자가 직접 이 속성을 제어해야 하는 경우는 거의 발생하지 않는다.</para>
            </remarks>
        </member>
        <member name="T:TheOne.Windows.Forms.GlobalExceptionHandler">
            <summary>
            전역 예외 핸들러. UI 화면에서 처리하지 못한 예외들을 처리하는 예외 핸들러
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.GlobalExceptionHandler.#cctor">
            <summary>
            정적 생성자
            </summary>
        </member>
        <member name="M:TheOne.Windows.Forms.GlobalExceptionHandler.SetOutstandUIControl(System.Windows.Forms.Control)">
            <summary>
            예외 발생시 이벤트를 전달할 outstanding UI 컨트롤을 설정한다.
            이 메쏘드는 프레임워크 내부 사용으로 제한됨.
            </summary>
            <param name="ctrl">설정할 Control</param>
            <remarks>
            스마트 클라이언트는 컨트롤이고 이 컨트롤이 외부와 접촉한다.
            오류 처리 시에 컨트롤을 호스팅 하는 컨테이너와 통신하기 위해서는
            컨테이너와 직접적으로 인터페이스하는 컨트롤을 파악할 필요가 있다.
            이 때문에 메뉴 컨트롤 혹은 UI 컨트롤이 이 메쏘드를 호출하여 인터페이스를
            담당할 컨트롤을 지정하는 것이다.
            </remarks>
        </member>
        <member name="P:TheOne.Windows.Forms.GlobalExceptionHandler.FormFactory">
            <summary>
            예외 대화상자 폼을 생성하는 팩토리 객체
            </summary>
            <remarks>
            <para>처리되지 않은 예외(unhandled exception)가 발생하면 표시되는 예외 대화상자 폼을
            생성하여 반환하는 팩토리 객체이다. 이 속성에 <see cref="T:TheOne.Windows.Forms.Internal.ExceptionDialogFormFactory"/>
            클래스에서 파생된 커스텀 팩토리 객체를 설정함으로써 디폴트 예외 대화상자가 아닌 다른
            예외 대화 상자를 표시할 수 있다.</para>
            </remarks>
        </member>
    </members>
</doc>
