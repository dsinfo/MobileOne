<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TheOne.Data</name>
    </assembly>
    <members>
        <member name="T:TheOne.Data.Odbc.OdbcDbAccess">
            <summary>
            <see cref="T:TheOne.Data.DbAccess">DbAccess</see> 추상 클래스의 concreate 클래스로서 ODBC를 통해
            데이터소스에 접근하는 데이터 액세스 Helper 클래스 이다.
            </summary>
        </member>
        <member name="T:TheOne.Data.DbAccess">
            <summary>
            ADO .NET을 추상화하여 단일하고 간결한 API를 통해
            데이터베이스를 쉽게 액세스하도록 해주는 Helper 메서드를 제공한다.
            </summary>
            <remarks>
            ADO.NET은 다양한 provider를 사용하도록 되어 있고 이들 provider는 각각의
            클래스와 메소드 집합을 가지고 있다. 예를 들어 SQL Server .NET provider는
            SqlConnection, SqlCommand, SqlDataAdapter, SqlDataReader 클래스를 제공하는
            반면, OLEDB .NET provider는 OleDbConnection, OleDbCommand, OleDbDataAdapter,
            OleDbDataReader 등의 클래스를 가지고 있다.
            <br/><br/>
            이들 클래스들은 서로 공통의 인터페이스(IDbConnection, IDbCommand, IDbTransaction 등)들을
            가지고 있지만 서로의 메소드들은 완전히 일치하지 않는다. 따라서 어떤 provider를
            사용하는가에 따라서 서로 다른 클래스와 메소드를 사용해야만 한다.
            이러한 구조는 데이터 액세스 Helper 를 작성함에 있어서도 개개의 Helper 클래스를
            사용해야만 한다.
            <br/><br/>
            DbAccess 클래스는 이러한 다양한 .NET Data Provider를 단일 API로서 접근이 가능하게 해준다.
            DbAccess 클래스에서 파생된 SqlDbAccess 클래스나 OleDbAcess 클래스 등의 클래스는
            DbAccess 클래스의 추상화된 단일 메서드들을 각 provider 에 맞는 구체적인 클래스를
            사용하여 데이터 액세스 기능을 보다 간단하고 쉽게 해주며, 이러한 구현은 ADO.NET에서
            권장되는 데이터 액세스 패턴에 기반하고 있다.
            <br/><br/>
            상세한 내용은 MSDN의 Data Access Pattern &amp; Practise를 참고한다.
            <br/><br/>
            DbAccess 클래스 그리고 이 클래스에서 파생된 클래스들은 모두 2 계층(2-tier) 어플리케이션을
            지원할 뿐만 아니라 COM+를 사용하는 다 계층(n-tier) 어플리케이션을 모두 지원한다.
            </remarks>
            <example>
            <code>
            // configuration 파일의 defaultDatabase에 해당하는 객체를 생성한다. - SqlClient
            DbAccess db = DatabaseFactory.CreateDatabase();	
            DataSet ds = new DataSet();
            db.Open();
            db.ExecuteSql("SELECT * FROM Products WHERE ProductID > @p0", ds, 22);
            db.Close();
            </code>
            <br></br>
            <code>
            // configuration 파일의 "OleProvider"에 해당하는 객체를 생성한다. - OleDb
            DbAccess db = new OleDbAccess("OleProvider");	
            DataSet ds = new DataSet();
            db.Open();
            db.ExecuteSql("SELECT * FROM Products WHERE ProductID > ?", ds, 22);
            db.Close();
            </code>
            </example>
        </member>
        <member name="F:TheOne.Data.DbAccess.defaultTableNameConst">
            <summary>
            결과 집합에서 사용할 기본 테이블 이름
            </summary>
        </member>
        <member name="F:TheOne.Data.DbAccess.defaultTableName">
            <summary>
            데이터셋의 기본값 테이블 이름
            </summary>
        </member>
        <member name="M:TheOne.Data.DbAccess.#ctor">
            <summary>
            <see cref="T:TheOne.Data.DbAccess"/> 클래스의 새 인스턴스를 초기화한다.
            </summary>
            <remarks>
            <see cref="T:TheOne.Data.DbAccess"/>의 기본 생성자는 아무런 작업도 수행하지 않는다.
            </remarks>
        </member>
        <member name="M:TheOne.Data.DbAccess.System#IDisposable#Dispose">
            <summary>
            Dispose 패턴에 의해 객체를 dispose 한다.
            </summary>
        </member>
        <member name="M:TheOne.Data.DbAccess.Open">
            <summary>
            데이터베이스에 연결을 한다.
            </summary>
            <exception cref="T:TheOne.Data.DBException">
            DB 접속시 오류가 발생하면 발생한다. 실제 예외(예:SqlException)는
            InnerException 을 통해 접근이 가능하다.
            </exception>
            <remarks>
            DbAccess 클래스는 데이터베이스 연결을 open 하기 위해 명시적인 Open 메서드를
            제공한다. Open/Close 메서드를 사용하는 이유는 여러 쿼리/저장 프로시저 호출을 실행하고자 할 때
            Open 메서드를 명시적으로 호출한 후, 여러 회의 데이터 액세스를 시도하고 명시적으로
            Close 메서드를 호출함으로써 보다 효율적으로 데이터베이스 연결을 사용할 수 있기 때문이다.
            <br/><br/>
            반면 실제 데이터베이스를 액세스하는 ExecuteSqlxxx , ExecuteSpxxx 메서드들은
            데이터베이스 연결이 open 되어 있지 않으면 임시적으로 연결을 open 하고 쿼리/저장 프로시저 수행 후
            연결을 close 한다. 이는 한번의 데이터베이스 액세스만을 하고자할 때 Open/Close 메서드 호출을
            생략할 수 있게 함으로써 보다 적은 코드를 작성할 수 있도록 해준다.
            매 ExecuteSqlxxx, ExecuteSpxxx 호출마다 데이터베이스 연결이 open/close 되지만 연결 풀링
            (connection pooling) 덕에 성능상의 문제는 미미하다. 하지만 데이터베이스가
            연결 풀링을 지원하지 않는 경우도 있으므로 주의할 필요는 있다.
            <br/><br/>
            Executeqlxxx, ExecuteSpxxx 메서드가 호출되었을 때, 데이터베이스 연결이 이미 open 되어 있었다면
            (이미 Open 메서드가 호출되었다면), ExecuteSqlxxx/ExecuteSpxxx 메서드는 연결을 닫지 않을 것이다.
            명시적으로 Open이 호출되었다면 명시적으로 Close가 호출되어야 한다.
            </remarks>
            <example>
            다음 코드는 명시적으로 Open/Close를 수행하는 예제 코드이다. 최대값을 읽어 삽입하는 2회의
            쿼리를 수행할 때는 명시적으로 Open/Close 를 호출하는 것이 좋다.
            <code>
            DbAccess db = DatabaseFactory.CreateDatabase();	
            
            db.Open();
            int max = (int)db.ExecuteSqlScalar("SELECT MAX(*) FROM xTable");
            db.ExecuteSqlNonQuery("INSERT INTO xTable VALUES(@p0, 'New Data')", max);
            db.Close();  // must be closed explicit
            </code>
            다음 코드는 단일 쿼리를 수행하므로 Open/Close 메서드 호출을 생략하는 형태로 사용할 수도
            있다.
            <code>
            DbAccess db = DatabaseFactory.CreateDatabase();	
            
            int count = (int)db.ExecuteSqlScalar("SELECT COUNT(*) FROM xTable");
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DbAccess.Close">
            <summary>
            데이터베이스에 대한 연결을 닫는다.
            </summary>
            <exception cref="T:TheOne.Data.DBException">
            DB 접속시 오류가 발생하면 발생한다. 실제 예외인 SqlException 은
            InnerException 을 통해 접근이 가능하다.
            </exception>
            <remarks>
            DbAccess 클래스는 데이터베이스 연결을 open/close 하기 위해 명시적인 Open/Close 메서드를
            제공한다. Open/Close 메서드를 사용하는 이유는 여러 쿼리/저장 프로시저 호출을 실행하고자 할 때
            Open 메서드를 명시적으로 호출한 후, 여러 회의 데이터 액세스를 시도하고 명시적으로
            Close 메서드를 호출함으로써 보다 효율적으로 데이터베이스 연결을 사용할 수 있기 때문이다.
            <br/><br/>
            반면 실제 데이터베이스를 액세스하는 ExecuteSqlxxx , ExecuteSpxxx 메서드들은
            데이터베이스 연결이 open 되어 있지 않으면 임시적으로 연결을 open 하고 쿼리/저장 프로시저 수행 후
            연결을 close 한다. 이는 한번의 데이터베이스 액세스만을 하고자할 때 Open/Close 메서드 호출을
            생략할 수 있게 함으로써 보다 적은 코드를 작성할 수 있도록 해준다.
            매 ExecuteSqlxxx, ExecuteSpxxx 호출마다 데이터베이스 연결이 open/close 되지만 연결 풀링
            (connection pooling) 덕에 성능상의 문제는 미미하다. 하지만 데이터베이스가
            연결 풀링을 지원하지 않는 경우도 있으므로 주의할 필요는 있다.
            <br/><br/>
            Executeqlxxx, ExecuteSpxxx 메서드가 호출되었을 때, 데이터베이스 연결이 이미 open 되어 있었다면
            (이미 Open 메서드가 호출되었다면), ExecuteSqlxxx/ExecuteSpxxx 메서드는 연결을 닫지 않을 것이다.
            명시적으로 Open이 호출되었다면 명시적으로 Close가 호출되어야 한다.
            </remarks>
            <example>
            다음 코드는 명시적으로 Open/Close를 수행하는 예제 코드이다. 최대값을 읽어 삽입하는 2회의
            쿼리를 수행할 때는 명시적으로 Open/Close 를 호출하는 것이 좋다.
            <code>
            DbAccess db = DatabaseFactory.CreateDatabase();	
            
            db.Open();
            int max = (int)db.ExecuteSqlScalar("SELECT MAX(*) FROM xTable");
            db.ExecuteSqlNonQuery("INSERT INTO xTable VALUES(@p0, 'New Data')", max);
            db.Close();  // must be closed explicit
            </code>
            다음 코드는 단일 쿼리를 수행하므로 Open/Close 메서드 호출을 생략하는 형태로 사용할 수도
            있다.
            <code>
            DbAccess db = DatabaseFactory.CreateDatabase();	
            
            int count = (int)db.ExecuteSqlScalar("SELECT COUNT(*) FROM xTable");
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DbAccess.BeginTrans(System.Data.IsolationLevel)">
            <summary>
            로컬 트랜잭션을 시작한다.
            </summary>
            <param name="level">트랜잭션 IsolationLevel</param>
            <remarks>
            이 메서드 호출 후, 모든 커맨드는 CommitTrans/RollbackTrans 메서드가 호출
            되기 전까지 트랜잭션 문맥하에서 수행되게 된다.
            COM+를 사용하지 않을 때, 수동 트랜잭션(manual transaction)으로서 사용되며
            Transaction 객체는 이 클래스의 필드로서 저장된다. Transaction 객체에 대한
            접근은 <see cref="P:TheOne.Data.DbAccess.Transaction">Transaction</see>속성을 통해 가능하다.
            트랜잭션은 해당 DB에 대해서만 수행되며 분산 트랜잭션이 아니다. 따라서
            CommitTrans 메서드나 RollbackTrans 메서드를 통해 트랜잭션을 commit 혹은
            rollback 해야 한다.
            </remarks>
        </member>
        <member name="M:TheOne.Data.DbAccess.BeginTrans">
            <summary>
            로컬 트랜잭션을 시작한다.
            </summary>
            <remarks>
            이 메서드 호출 후, 모든 커맨드는 CommitTrans/RollbackTrans 메서드가 호출
            되기 전까지 트랜잭션 문맥하에서 수행되게 된다.
            COM+를 사용하지 않을 때, 수동 트랜잭션(manual transaction)으로서 사용되며
            Transaction 객체는 이 클래스의 필드로서 저장된다. Transaction 객체에 대한
            접근은 <see cref="P:TheOne.Data.DbAccess.Transaction">Transaction</see>속성을 통해 가능하다.
            트랜잭션은 해당 DB에 대해서만 수행되며 분산 트랜잭션이 아니다. 따라서
            CommitTrans 메서드나 RollbackTrans 메서드를 통해 트랜잭션을 commit 혹은
            rollback 해야 한다.
            </remarks>
        </member>
        <member name="M:TheOne.Data.DbAccess.CommitTrans">
            <summary>
            로컬 트랜잭션을 Commit 한다.
            </summary>
            <remarks>
            BeginTrans 메서드를 통해 시작된 트랜잭션을 commit 한다. 이 메서드가
            호출되기 전에 <see cref="M:TheOne.Data.DbAccess.BeginTrans">BeginTrans</see>가 호출되어야 한다.
            이 메서드는 COM+의 자동 트랜잭션(automatic transaction)을 사용하지 않을
            때에만 사용되어야 한다.
            </remarks>
        </member>
        <member name="M:TheOne.Data.DbAccess.RollbackTrans">
            <summary>
            로컬 트랜잭션을 Rollback 한다.
            </summary>
            <remarks>
            BeginTrans 메서드를 통해 시작된 트랜잭션을 rollback 한다. 이 메서드가
            호출되기 전에 <see cref="M:TheOne.Data.DbAccess.BeginTrans">BeginTrans</see>가 호출되어야 한다.
            이 메서드는 COM+의 자동 트랜잭션(automatic transaction)을 사용하지 않을
            때에만 사용되어야 한다.
            </remarks>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteCmd(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.Data.IDataParameter[])">
            <summary>
            일반적인 SQL 문장 혹은 저장 프로시저를 실행한다.
            실행결과는 매개변수로 지정된 DataSet에 채운다.
            </summary>
            <exception cref="T:TheOne.Data.DBException">
            지정된 커맨드를 수행하는 도중 DB 측에서 오류가 발생하면 발생한다.
            구체적인 상세 예외는 InnerException을 통해 접근이 가능하다.
            </exception>
            <param name="commandText">저장 프로시저 이름 또는 SQL쿼리 내용</param>
            <param name="commandType">commandText 매개변수가 어떠한 명령인지를 나타내는 CommandType</param>
            <param name="tableName">결과를 저장할 DataSet 내의 테이블 이름</param>
            <param name="ds">결과를 저장할 DataSet 객체</param>
            <param name="parameters">IDataParameter객체의 매개변수 배열</param>
            <returns>SQL 문장(저장 프로시저) 수행후 반환된 첫번째 결과 집합의 행의 수를 반환한다.를 반환한다.</returns>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteCmdNonQuery(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            결과 집합이 없는 SQL 문장 혹은 저장 프로시저를 실행한다. 
            </summary>
            <exception cref="T:TheOne.Data.DBException">
            지정된 커맨드를 수행하는 도중 DB 측에서 오류가 발생하면 발생한다.
            구체적인 상세 예외는 InnerException을 통해 접근이 가능하다.
            </exception>
            <param name="commandText">저장 프로시저 이름 또는 SQL쿼리내용</param>
            <param name="commandType">commandText 매개변수가 어떠한 명령인지를 나타내는 CommandType</param>
            <param name="parameters">IDataParameter객체의 매개변수 배열</param>
            <returns>SQL 문장(저장 프로시저) 의 실행 후 영향을 받는 행의 수를반환한다.</returns>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteCmdReader(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            DataReader를 반환하는 SQL 문장 혹은 저장 프로시저를 실행한다.
            </summary>
            <exception cref="T:TheOne.Data.DBException">
            지정된 커맨드를 수행하는 도중 DB 측에서 오류가 발생하면 발생한다.
            구체적인 상세 예외는 InnerException을 통해 접근이 가능하다.
            </exception>
            <param name="commandText">저장 프로시저 이름 또는 SQL쿼리내용</param>
            <param name="commandType">commandText 매개변수가 어떠한 명령인지를 나타내는 CommandType</param>
            <param name="parameters">IDataParameter객체의 매개변수 배열</param>
            <returns>DataReader 객체를 반환한다.</returns>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteCmdScalar(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            단일 값(scalar value)을 반환하는 SQL 문장 혹은 저장 프로시저를 실행한다.
            </summary>
            <exception cref="T:TheOne.Data.DBException">
            지정된 커맨드를 수행하는 도중 DB 측에서 오류가 발생하면 발생한다.
            구체적인 상세 예외는 InnerException을 통해 접근이 가능하다.
            </exception>
            <remarks>
            SQL 쿼리 혹은 저장 프로시저의 scalar 값이라 함은 결과 집합의 첫 번째 행의 첫 번째 열을 말한다.
            </remarks>
            <param name="commandText">저장 프로시저 이름 또는 SQL쿼리내용</param>
            <param name="commandType">commandText 매개변수가 어떠한 명령인지를 나타내는 CommandType</param>
            <param name="parameters">IDataParameter객체의 매개변수 배열</param>
            <returns>SQL 문장 혹은 저장 프로시저 결과에 대한 scalar 값을 반환한다.</returns>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteCmdTableMapping(System.String,System.Data.CommandType,System.String,System.String[],System.Data.DataSet,System.Data.IDataParameter[])">
            <summary>
            2개 이상의 결과 집합을 반환하는 SQL 문장 혹은 저장 프로시저를 실행하고
            결과를 테이블 매핑을 통해 지정된 DataSet 에 채운다.
            </summary>
            <exception cref="T:TheOne.Data.DBException">
            지정된 커맨드를 수행하는 도중 DB 측에서 오류가 발생하면 발생한다.
            구체적인 상세 예외는 InnerException을 통해 접근이 가능하다.
            </exception>
            <param name="commandText">저장 프로시저 이름 또는 SQL쿼리내용</param>
            <param name="tableName">결과를 저장할 DataSet 내의 테이블 이름</param>
            <param name="mappingNames">DataSet안의 Table이름이과의 일치</param>
            <param name="commandType">commandText 매개변수가 어떠한 명령인지를 나타내는 CommandType</param>
            <param name="ds">DataSet의 DataSet을 리턴한다.</param>
            <param name="parameters">IDataParameter객체의 매개변수 배열</param>
            <returns>SQL 문장(저장 프로시저) 수행후 첫번째 결과 집합의 행의 수를 반환한다.</returns>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteCmd(System.Data.IDbCommand,System.String,System.Data.DataSet,System.Data.IDataParameter[])">
            <summary>
            일반적인 SQL 문장 혹은 저장 프로시저를 실행한다.
            실행결과는 매개변수로 지정된 DataSet에 채운다.
            </summary>
            <exception cref="T:TheOne.Data.DBException">
            지정된 커맨드를 수행하는 도중 DB 측에서 오류가 발생하면 발생한다.
            구체적인 상세 예외는 InnerException을 통해 접근이 가능하다.
            </exception>
            <param name="command">SQL 문장 또는 저장 프로시저를 실행할 Command 객체</param>
            <param name="tableName">결과를 저장할 DataSet 내의 테이블 이름</param>
            <param name="ds">결과를 저장할 DataSet 객체</param>
            <param name="parameters">IDataParameter객체의 매개변수 배열</param>
            <returns>SQL 문장(저장 프로시저) 수행후 반환된 첫번째 결과 집합의 행의 수를 반환한다.</returns>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteCmdNonQuery(System.Data.IDbCommand,System.Data.IDataParameter[])">
            <summary>
            결과 집합이 없는 SQL 문장 혹은 저장 프로시저를 실행한다. 
            </summary>
            <exception cref="T:TheOne.Data.DBException">
            지정된 커맨드를 수행하는 도중 DB 측에서 오류가 발생하면 발생한다.
            구체적인 상세 예외는 InnerException을 통해 접근이 가능하다.
            </exception>
            <param name="command">SQL 문장 또는 저장 프로시저를 실행할 Command 객체</param>
            <param name="parameters">IDataParameter객체의 매개변수 배열</param>
            <returns>SQL 문장(저장 프로시저) 의 실행 후 영향을 받는 행의 수를 반환한다.</returns>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteCmdReader(System.Data.IDbCommand,System.Data.IDataParameter[])">
            <summary>
            DataReader를 반환하는 SQL 문장 혹은 저장 프로시저를 실행한다. 
            </summary>
            <exception cref="T:TheOne.Data.DBException">
            지정된 커맨드를 수행하는 도중 DB 측에서 오류가 발생하면 발생한다.
            구체적인 상세 예외는 InnerException을 통해 접근이 가능하다.
            </exception>
            <param name="command">SQL 문장 또는 저장 프로시저를 실행할 Command 객체</param>
            <param name="parameters">IDataParameter객체의 매개변수 배열</param>
            <returns>DataReader 객체를 반환한다.</returns>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteCmdScalar(System.Data.IDbCommand,System.Data.IDataParameter[])">
            <summary>
            단일 값(scalar value)을 반환하는 SQL 문장 혹은 저장 프로시저를 실행한다.
            </summary>
            <exception cref="T:TheOne.Data.DBException">
            지정된 커맨드를 수행하는 도중 DB 측에서 오류가 발생하면 발생한다.
            구체적인 상세 예외는 InnerException을 통해 접근이 가능하다.
            </exception>
            <remarks>
            SQL 쿼리 혹은 저장 프로시저의 scalar 값이라 함은 결과 집합의 첫 번째 행의 첫 번째 열을 말한다.
            </remarks>
            <param name="command">SQL 문장 또는 저장 프로시저를 실행할 Command 객체</param>
            <param name="parameters">IDataParameter객체의 매개변수 배열</param>
            <returns>SQL 문장 혹은 저장 프로시저 결과에 대한 scalar 값을 반환한다.</returns>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteCmdTableMapping(System.Data.IDbCommand,System.String,System.String[],System.Data.DataSet,System.Data.IDataParameter[])">
            <summary>
            2개 이상의 결과 집합을 반환하는 SQL 문장 혹은 저장 프로시저를 실행하고
            결과를 테이블 매핑을 통해 지정된 DataSet 에 채운다.
            </summary>
            <exception cref="T:TheOne.Data.DBException">
            지정된 커맨드를 수행하는 도중 DB 측에서 오류가 발생하면 발생한다.
            구체적인 상세 예외는 InnerException을 통해 접근이 가능하다.
            </exception>
            <param name="command">SQL 문장 또는 저장 프로시저를 실행할 Command 객체</param>
            <param name="tableName">결과를 저장할 DataSet 내의 테이블 이름</param>
            <param name="mappingNames">DataSet안의 Table이름이과의 일치</param>
            <param name="ds">DataSet의 DataSet을 리턴한다.</param>
            <param name="parameters">IDataParameter객체의 매개변수 배열</param>
            <returns>SQL 문장(저장 프로시저) 수행후 첫번째 결과 집합의 행의 수를 반환한다.</returns>
        </member>
        <member name="M:TheOne.Data.DbAccess.CreateCmd(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            해당 Data Provider의 Command 객체의 인스턴스를 만든다.
            </summary>
            <param name="commandText">Command 객체에 사용될 SQL 쿼리문 또는 저장 프로시저명</param>
            <param name="commandType">commandText 매개변수가 어떠한 명령인지를 나타내는 CommandType</param>
            <param name="parameters">IDataParameter 객체의 매개변수 배열</param>
            <returns>해당 Data Provider의 Command 객체를 반환한다.</returns>
        </member>
        <member name="M:TheOne.Data.DbAccess.CreateCommand(System.String)">
            <summary>
            해당 Data Provider의 Command 객체의 인스턴스를 만든다.
            </summary>
            <param name="commandText">Command 객체에 사용될 SQL 쿼리문 또는 저장 프로시저명</param>
            <returns>해당 Data Provider의 Command 객체를 반환한다.</returns>
        </member>
        <member name="M:TheOne.Data.DbAccess.CreateCommand(System.String,System.Data.CommandType)">
            <summary>
            해당 Data Provider의 Command 객체의 인스턴스를 만든다.
            </summary>
            <param name="commandText">Command 객체에 사용될 SQL 쿼리문 또는 저장 프로시저명</param>
            <param name="commandType">commandText 매개변수가 어떠한 명령인지를 나타내는 CommandType</param>
            <returns>해당 Data Provider의 Command 객체를 반환한다.</returns>
        </member>
        <member name="M:TheOne.Data.DbAccess.CreateCommand(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            해당 Data Provider의 Command 객체의 인스턴스를 만든다.
            </summary>
            <param name="commandText">Command 객체에 사용될 SQL 쿼리문 또는 저장 프로시저명</param>
            <param name="commandType">commandText 매개변수가 어떠한 명령인지를 나타내는 CommandType</param>
            <param name="parameters">IDataParameter 객체의 매개변수 배열</param>
            <returns>해당 Data Provider의 Command 객체를 반환한다.</returns>
        </member>
        <member name="M:TheOne.Data.DbAccess.CreateCommand(System.String,System.Data.CommandType,TheOne.Data.DBParamCollection)">
            <summary>
            해당 Data Provider의 Command 객체의 인스턴스를 만든다.
            </summary>
            <param name="commandText">Command 객체에 사용될 SQL 쿼리문 또는 저장 프로시저명</param>
            <param name="commandType">commandText 매개변수가 어떠한 명령인지를 나타내는 CommandType</param>
            <param name="parameters">DBParamCollection 객체의 매개변수 배열</param>
            <returns>해당 Data Provider의 Command 객체를 반환한다.</returns>
        </member>
        <member name="M:TheOne.Data.DbAccess.CreateCommand(System.String,System.Data.CommandType,System.String[],System.Object[])">
            <summary>
            해당 Data Provider의 Command 객체의 인스턴스를 만든다.
            </summary>
            <param name="commandText">Command 객체에 사용될 SQL 쿼리문 또는 저장 프로시저명</param>
            <param name="commandType">commandText 매개변수가 어떠한 명령인지를 나타내는 CommandType</param>
            <param name="paramNames">저장 프로시저의 매개변수 이름 배열</param>
            <param name="args">매개변수 값들(가변 매개변수)</param>
            <returns>해당 Data Provider의 Command 객체를 반환한다.</returns>
        </member>
        <member name="M:TheOne.Data.DbAccess.CreateParameter">
            <summary>
            해당 Data Provider의 Parameter 객체의 인스턴스를 만든다.
            </summary>
            <returns>Parameter 객체를 반환한다.</returns>
        </member>
        <member name="M:TheOne.Data.DbAccess.CreateParameter(System.String,System.Object)">
            <summary>
            해당 Data Provider의 Parameter 객체의 인스턴스를 만든다.
            </summary>
            <param name="paramName">Parameter 객체의 이름</param>
            <param name="paramValue">Parameter 객체에 설정될 값</param>
            <returns>Parameter 객체를 반환한다.</returns>
        </member>
        <member name="M:TheOne.Data.DbAccess.CreateParamCollection">
            <summary>
            해당 Data Provider의 Parameter 컬렉션 객체의 인스턴스를 만든다.
            </summary>
            <returns>해당 DataProvider의 DBParamCollection 객체를 반환한다.</returns>
        </member>
        <member name="M:TheOne.Data.DbAccess.CreateParamCollection(System.Boolean)">
            <summary>
            해당 Data Provider의 Parameter 컬렉션 객체의 인스턴스를 만든다.
            </summary>
            <param name="useDBNull">true이면 Parameter 추가시에 닷넷 null을 가지는 객체의 Value값을 DBNull.Value 값으로 자동 변환한다.</param>
            <returns>해당 DataProvider의 DBParamCollection 객체를 반환한다.</returns>
        </member>
        <member name="M:TheOne.Data.DbAccess.Lock(System.Boolean)">
            <summary>
            Connection과 관련된 메서드를 사용할 수 없도록 잠금을 수행합니다.
            </summary>
            <param name="throwException">잠금 중인 컴포넌트에 대해서 Connection 관련 메서드를 호출한 경우 예외를 발생할지 여부입니다.</param>
        </member>
        <member name="M:TheOne.Data.DbAccess.Unlock">
            <summary>
            Connection과 관련된 메서드를 사용할 수 있도록 잠금을 해제합니다.
            </summary>
        </member>
        <member name="M:TheOne.Data.DbAccess.IsLocking">
            <summary>
            컴포넌트가 잠금 상태인지를 검사합니다.
            </summary>
            <returns>잠금 상태 여부를 반환합니다.</returns>
        </member>
        <member name="M:TheOne.Data.DbAccess.BuildParameters(System.Object[])">
            <summary>
            지정된 매개변수들로부터 Parameter 객체 배열을 만든다.
            </summary>
            <param name="args">생성할 파라메터의 값들(가변매개변수)</param>
            <returns>IDataParameter 객체 배열을 반환한다.</returns>
            <remarks>
            가변매개변수로 지정된 값들로부터 Parameter 객체 배열을 생성하여
            반환한다. Parameter의 이름은 @p0, @p1, @p2와 같이 설정되며 DbType 은
            매개변수 값에 의해 결정된다.
            </remarks>
            <example>
            <code>
            DbAccess db = DatabaseFactory.CreateDatabase(true);	
            IDataParameter[] parameters = BuildParameter(22, "str value");
            db.ExecuteSqlNonQuery("INSERT INTO table(col1, col2) VALUES(@p0, @p1)", parameters);
            db.Close();
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DbAccess.BuildParameters(System.String[],System.Object[])">
            <summary>
            지정된 매개변수 이름/값들로부터 Parameter 객체 배열을 만든다.
            </summary>
            <param name="paramNames">매개변수의 이름 배열</param>
            <param name="args">생성할 파라메터의 값의 배열(가변매개변수)</param>
            <returns>IDataParameter 객체 배열을 반환한다.</returns>
            <example>
            <code>
            DbAccess db = DatabaseFactory.CreateDatabase(true);	
            string[] paramNames = new string[] { "@param1", "@param2" };
            IDataParameter[] parameters = BuildParameter(paramNames, 22, "str value");
            db.ExecuteSpNonQuery("sp_SPName", parameters);
            db.Close();
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteCommand(System.Data.IDbCommand,System.Data.DataSet)">
            <summary>
            Command 객체를 실행하고 그 결과를 DataSet으로 채운다.
            </summary>
            <param name="command">실행될 Command 객체</param>
            <param name="ds">결과를 저장할 DataSet 객체</param>
            <returns>결과 집합의 행의 수를 반환한다.</returns>
            <remarks>
            매개변수에 있는 Command 객체에는 Connection, CommandText, CommandType 및
            Command 객체에서 사용할 Parameter가 이미 정의되어 있어야 한다.
            </remarks>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteCommand(System.Data.IDbCommand,System.String,System.Data.DataSet)">
            <summary>
            Command 객체를 실행하고 그 결과를 DataSet으로 채운다.
            </summary>
            <param name="command">실행될 Command 객체</param>
            <param name="tableName">결과를 저장할 DataSet 내의 테이블 이름</param>
            <param name="ds">결과를 저장할 DataSet 객체</param>
            <returns>결과 집합의 행의 수를 반환한다.</returns>
            <remarks>
            매개변수에 있는 Command 객체에는 Connection, CommandText, CommandType 및
            Command 객체에서 사용할 Parameter가 이미 정의되어 있어야 한다.
            </remarks>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteCommand(System.Data.IDbCommand,System.String,System.String[],System.Data.DataSet)">
            <summary>
            Command 객체를 실행하고 그 결과를 DataSet으로 채운다.
            </summary>
            <param name="command">실행될 Command 객체</param>
            <param name="tableName">결과를 저장할 DataSet 내의 테이블 이름</param>
            <param name="mappingNames">매핑할 이름</param>
            <param name="ds">결과를 저장할 DataSet 객체</param>
            <returns>결과 집합의 행의 수를 반환한다.</returns>
            <remarks>
            매개변수에 있는 Command 객체에는 Connection, CommandText, CommandType 및
            Command 객체에서 사용할 Parameter가 이미 정의되어 있어야 한다.
            </remarks>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteCommandDataSet(System.Data.IDbCommand)">
            <summary>
            Command 객체를 실행하고 그 결과를 DataSet으로 반환한다.
            </summary>
            <param name="command">실행될 Command 객체</param>
            <returns>결과를 저장한 DataSet 객체를 반환한다.</returns>
            <remarks>
            매개변수에 있는 Command 객체에는 Connection, CommandText, CommandType 및
            Command 객체에서 사용할 Parameter가 이미 정의되어 있어야 한다.
            </remarks>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteCommandDataSet(System.Data.IDbCommand,System.String)">
            <summary>
            Command 객체를 실행하고 그 결과를 DataSet으로 반환한다.
            </summary>
            <param name="command">실행될 Command 객체</param>
            <param name="tableName">결과를 저장할 DataSet 내의 테이블 이름</param>
            <returns>결과를 저장한 DataSet 객체를 반환한다.</returns>
            <remarks>
            매개변수에 있는 Command 객체에는 Connection, CommandText, CommandType 및
            Command 객체에서 사용할 Parameter가 이미 정의되어 있어야 한다.
            </remarks>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteCommandNonQuery(System.Data.IDbCommand)">
            <summary>
            결과 집합이 없는 Command 객체를 실행하고 영향을 받는 행의 수를 반환한다.
            </summary>
            <param name="command">실행될 Command 객체</param>
            <returns>영향을 받는 행의 수를 반환한다.</returns>
            <remarks>
            매개변수에 있는 Command 객체에는 Connection, CommandText, CommandType 및
            Command 객체에서 사용할 Parameter가 이미 정의되어 있어야 한다.
            </remarks>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteCommandReader(System.Data.IDbCommand)">
            <summary>
            Command 객체를 실행하고 그 결과를 DataReader로 반환한다.
            </summary>
            <param name="command">실행될 Command 객체</param>
            <returns>DataReader 객체를 반환한다.</returns>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteCommandScalar(System.Data.IDbCommand)">
            <summary>
            단일값을 반환하는 Command 객체를 실행하고 결과를 반환한다.
            </summary>
            <param name="command">실행될 Command 객체</param>
            <returns>실행된 Command 객체의 Scalar 값을 반환한다.</returns>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteSpDataSet(System.String)">
            <summary>
            지정된 저장 프로시저를 실행하고 그 결과를 DataSet으로 반환한다.
            매개변수가 없으며 조회된 DataTable 이름은 기본값(<see cref="P:TheOne.Data.DbAccess.DefaultTableName"/> 속성의 값)을 사용한다.
            </summary>
            <param name="procedureName">저장 프로시저 이름</param>
            <returns>결과를 저장한 DataSet 객체를 반환한다.</returns>
            <remarks>
            매개변수가 없으며 결과 집합 반환하는 저장 프로시저를 호출할 때 사용한다.
            DataSet내의 DataTable 이름은 <see cref="P:TheOne.Data.DbAccess.DefaultTableName"/> 속성이 지정하는 이름을 사용한다.
            예를 들어 DefaultTableName이 Result 이고 저장 프로시저가 3개의 결과 집합을
            반환한다면, DataSet 내의 DataTable들의 이름은 Result, Result1, Result2 가 된다.
            </remarks>
            <example>
            <code>
            DbAccess db = DatabaseFactory.CreateDatabase(true);	  // create with open
            DataSet ds = db.ExecuteSpDataSet("sp_spName");
            db.Close();
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteSpDataSet(System.String,System.String)">
            <summary>
            지정된 저장 프로시저를 실행하고 그 결과를 DataSet으로 반환한다.
            매개변수가 없으며 지정된 이름을 DataTable 이름으로 사용한다.
            </summary>
            <param name="procedureName">저장 프로시저 이름</param>
            <param name="tableName">결과를 저장할 DataSet 내의 테이블 이름</param>
            <returns>결과를 저장한 DataSet 객체를 반환한다.</returns>
            <remarks>
            매개변수가 없으며 결과 집합 반환하는 저장 프로시저를 호출할 때 사용한다.
            DataSet내의 DataTable 이름은 tableName 매개변수가 지정하는 이름을 사용한다.
            예를 들어 tableName 매개변수가 Result 이고 저장 프로시저가 3개의 결과 집합을
            반환한다면, DataSet 내의 DataTable들의 이름은 Result, Result1, Result2 가 된다.
            </remarks>
            <example>
            <code>
            DbAccess db = DatabaseFactory.CreateDatabase(true); // create with open
            DataSet ds = db.ExecuteSpDataSet("sp_spName", "MyTable");  // table name will be MyTable, MyTable1, MyTable2, so on
            db.Close();
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteSpDataSet(System.String,System.Data.IDataParameter[])">
            <summary>
            지정된 저장 프로시저를 실행하고 그 결과를 DataSet으로 반환한다.
            Parameter 객체 배열을 통해 매개변수를 제공할 수 있으며
            조회된 DataTable 이름은 기본값(<see cref="P:TheOne.Data.DbAccess.DefaultTableName"/> 속성의 값)을 사용한다.
            </summary>
            <param name="procedureName">저장 프로시저 이름</param>
            <param name="parameters">IDataParameter객체의 매개변수 배열</param>
            <returns>결과를 저장한 DataSet 객체를 반환한다.</returns>
            <remarks>
            매개변수가 존재하며 결과 집합을 반환하는 저장 프로시저를 호출할 때 사용한다.
            매개변수는 Parameter 객체의 열을 통해 설정해야 한다.
            DataSet내의 DataTable 이름은 <see cref="P:TheOne.Data.DbAccess.DefaultTableName"/> 속성이 지정하는 이름을 사용한다.
            예를 들어 DefaultTableName이 Result 이고 저장 프로시저가 3개의 결과 집합을
            반환한다면, DataSet 내의 DataTable들의 이름은 Result, Result1, Result2 가 된다.
            </remarks>
            <example>
            <code>
            DbAccess db = DatabaseFactory.CreateDatabase(true);  // create with open
            DBParamCollection parameters = db.CreateParamCollection();
            parameters.Add("@paramName1", yourValue1);
            parameters.Add("@paramName2", yourValue2);
            DataSet ds = db.ExecuteSpDataSet("sp_spName", parameters.ToArray() );
            db.Close();
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteSpDataSet(System.String,System.String,System.Data.IDataParameter[])">
            <summary>
            지정된 저장 프로시저를 실행하고 그 결과를 DataSet으로 반환한다.
            Parameter 객체 배열을 통해 매개변수를 제공할 수 있으며
            지정된 이름을 DataTable 이름으로 사용한다.
            </summary>
            <param name="procedureName">저장 프로시저 이름</param>
            <param name="tableName">결과를 저장할 DataSet 내의 테이블 이름</param>
            <param name="parameters">IDataParameter객체의 매개변수 배열</param>
            <returns>결과를 저장한 DataSet 객체를 반환한다.</returns>
            <remarks>
            매개변수가 존재하며 결과 집합을 반환하는 저장 프로시저를 호출할 때 사용한다.
            매개변수는 Parameter 객체의 열을 통해 설정해야 한다.
            DataSet내의 DataTable 이름은 tableName 매개변수가 지정하는 이름을 사용한다.
            예를 들어 tableName 매개변수가 Result 이고 저장 프로시저가 3개의 결과 집합을
            반환한다면, DataSet 내의 DataTable들의 이름은 Result, Result1, Result2 가 된다.
            </remarks>
            <example>
            <code>
            DbAccess db = DatabaseFactory.CreateDatabase(true);  // create with open
            DBParamCollection parameters = db.CreateParamCollection();
            parameters.Add("@paramName1", yourValue1);
            parameters.Add("@paramName2", yourValue2);
            DataSet ds = db.ExecuteSpDataSet("sp_spName", "MyTable", parameters.ToArray() );
            // ds에는 MyTable, MyTable1 등이 테이블이 생성된다.
            db.Close();
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteSpDataSet(System.String,System.String[],System.Object[])">
            <summary>
            지정된 저장 프로시저를 실행하고 그 결과를 DataSet으로 반환한다.
            저장 프로시저 Parameter 이름/값 배열을 통해 매개변수를 제공할 수 있으며
            조회된 DataTable 이름은 기본값(<see cref="P:TheOne.Data.DbAccess.DefaultTableName"/> 속성의 값)을 사용한다.
            </summary>
            <param name="procedureName">저장 프로시저 이름</param>
            <param name="paramNames">저장 프로시저의 매개변수 이름 배열</param>
            <param name="args">매개변수 값들(가변 매개변수)</param>
            <returns>결과를 저장한 DataSet 객체를 반환한다.</returns>
            <remarks>
            매개변수가 존재하며 결과 집합을 반환하는 저장 프로시저를 호출할 때 사용한다.
            매개변수는 저장 프로시저의 Parameter 이름 배열과 값배열을 사용한다(예제 참조).
            DataSet내의 DataTable 이름은 <see cref="P:TheOne.Data.DbAccess.DefaultTableName"/> 속성이 지정하는 이름을 사용한다.
            예를 들어 DefaultTableName이 Result 이고 저장 프로시저가 3개의 결과 집합을
            반환한다면, DataSet 내의 DataTable들의 이름은 Result, Result1, Result2 가 된다.
            </remarks>
            <example>
            <code>
            DbAccess db = DatabaseFactory.CreateDatabase(true);  // create with open
            string[] paramNames = new string[] { "@paramName1", "@paramName2" };
            DataSet ds = db.ExecuteSpDataSet("sp_spName", paramNames, value1, vaule2);
            db.Close();
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteSpDataSet(System.String,System.String,System.String[],System.Object[])">
            <summary>
            지정된 저장 프로시저를 실행하고 그 결과를 DataSet으로 반환한다.
            저장 프로시저 Parameter 이름/값 배열을 통해 매개변수를 제공할 수 있으며
            지정된 이름을 DataTable 이름으로 사용한다.
            </summary>
            <param name="procedureName">저장 프로시저 이름</param>
            <param name="tableName">결과를 저장할 DataSet 내의 테이블 이름</param>
            <param name="paramNames">저장 프로시저의 매개변수 이름 배열</param>
            <param name="args">매개변수 값들(가변 매개변수)</param>
            <returns>결과를 저장한 DataSet 객체를 반환한다.</returns>
            <remarks>
            매개변수가 존재하며 결과 집합을 반환하는 저장 프로시저를 호출할 때 사용한다.
            매개변수는 저장 프로시저의 Parameter 이름 배열과 값배열을 사용한다(예제 참조).
            DataSet내의 DataTable 이름은 tableName 매개변수가 지정하는 이름을 사용한다.
            예를 들어 table 매개변수가 Result 이고 저장 프로시저가 3개의 결과 집합을
            반환한다면, DataSet 내의 DataTable들의 이름은 Result, Result1, Result2 가 된다.
            </remarks>
            <example>
            <code>
            DbAccess db = DatabaseFactory.CreateDatabase(true);  // create with open
            string[] paramNames = new string[] { "@paramName1", "@paramName2" };
            DataSet ds = db.ExecuteSpDataSet("sp_spName", "MyTable", paramNames, value1, vaule2);
            db.Close();
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteSpDataSet(System.String,TheOne.Data.DBParamCollection)">
            <summary>
            지정된 저장 프로시저를 실행하고 그 결과를 DataSet으로 반환한다.
            Parameter 객체 배열을 통해 매개변수를 제공할 수 있으며
            지정된 이름을 DataTable 이름으로 사용한다.
            </summary>
            <param name="procedureName">저장 프로시저 이름</param>
            <param name="parameters">DBParamCollection 객체</param>
            <returns>결과를 저장한 DataSet 객체를 반환한다.</returns>
            <remarks>
            매개변수가 존재하며 결과 집합을 반환하는 저장 프로시저를 호출할 때 사용한다.
            매개변수는 Parameter 객체의 열을 통해 설정해야 한다.
            DataSet내의 DataTable 이름은 tableName 매개변수가 지정하는 이름을 사용한다.
            예를 들어 tableName 매개변수가 Result 이고 저장 프로시저가 3개의 결과 집합을
            반환한다면, DataSet 내의 DataTable들의 이름은 Result, Result1, Result2 가 된다.
            </remarks>
            <example>
            <code>
            DbAccess db = DatabaseFactory.CreateDatabase(true);  // create with open
            DBParamCollection parameters = db.CreateParamCollection();
            parameters.Add("@paramName1", yourValue1);
            parameters.Add("@paramName2", yourValue2);
            DataSet ds = db.ExecuteSpDataSet("sp_spName", "MyTable", parameters.ToArray() );
            // ds에는 MyTable, MyTable1 등이 테이블이 생성된다.
            db.Close();
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteSpDataSet(System.String,System.String,TheOne.Data.DBParamCollection)">
            <summary>
            지정된 저장 프로시저를 실행하고 그 결과를 DataSet으로 반환한다.
            Parameter 객체 배열을 통해 매개변수를 제공할 수 있으며
            지정된 이름을 DataTable 이름으로 사용한다.
            </summary>
            <param name="procedureName">저장 프로시저 이름</param>
            <param name="tableName">결과를 저장할 DataSet 내의 테이블 이름</param>
            <param name="parameters">DBParamCollection 객체</param>
            <returns>결과를 저장한 DataSet 객체로 반환한다.</returns>
            <remarks>
            매개변수가 존재하며 결과 집합을 반환하는 저장 프로시저를 호출할 때 사용한다.
            매개변수는 Parameter 객체의 열을 통해 설정해야 한다.
            DataSet내의 DataTable 이름은 tableName 매개변수가 지정하는 이름을 사용한다.
            예를 들어 tableName 매개변수가 Result 이고 저장 프로시저가 3개의 결과 집합을
            반환한다면, DataSet 내의 DataTable들의 이름은 Result, Result1, Result2 가 된다.
            </remarks>
            <example>
            <code>
            DbAccess db = DatabaseFactory.CreateDatabase(true);  // create with open
            DBParamCollection parameters = db.CreateParamCollection();
            parameters.Add("@paramName1", yourValue1);
            parameters.Add("@paramName2", yourValue2);
            DataSet ds = db.ExecuteSpDataSet("sp_spName", "MyTable", parameters.ToArray() );
            // ds에는 MyTable, MyTable1 등이 테이블이 생성된다.
            db.Close();
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteSqlDataSet(System.String)">
            <summary>
            지정된 SQL 문장을 실행하고 그 결과를 DataSet으로 반환한다.
            매개변수는 없으며
            조회된 DataTable 이름은 기본값(<see cref="P:TheOne.Data.DbAccess.DefaultTableName"/> 속성의 값)을 사용한다.
            </summary>
            <param name="query">SQL 문장</param>
            <returns>결과를 저장한 DataSet 객체를 반환한다.</returns>
            <remarks>
            매개변수가 없으며 결과 집합 반환하는 SQL 문장을 호출할 때 사용한다.
            DataSet내의 DataTable 이름은 <see cref="P:TheOne.Data.DbAccess.DefaultTableName"/> 속성이 지정하는 이름을 사용한다.
            예를 들어 DefaultTableName이 Result 이고 SQL 문장이 3개의 결과 집합을
            반환한다면, DataSet 내의 DataTable들의 이름은 Result, Result1, Result2 가 된다.
            </remarks>
            <example>
            <code>
            DbAccess db =  DatabaseFactory.CreateDatabase(true);  // create with open
            DataSet ds = db.ExecuteSqlDataSet("SELECT * FROM Products");
            db.Close();
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteSqlDataSet(System.String,System.String)">
            <summary>
            지정된 SQL 문장을 실행하고 그 결과를 DataSet으로 반환한다.
            매개변수는 없으며
            지정된 이름을 DataTable 이름으로 사용한다.
            </summary>
            <param name="query">SQL 문장</param>
            <param name="tableName">결과를 저장할 DataSet 내의 테이블 이름</param>
            <returns>결과를 저장한 DataSet 객체를 반환한다.</returns>
            <remarks>
            매개변수가 없으며 결과 집합 반환하는 SQL 문장을 호출할 때 사용한다.
            DataSet내의 DataTable 이름은 tableName 매개변수가 지정하는 이름을 사용한다.
            예를 들어 tableName 매개변수가 Result 이고 SQL 문장이 3개의 결과 집합을
            반환한다면, DataSet 내의 DataTable들의 이름은 Result, Result1, Result2 가 된다.
            </remarks>
            <example>
            <code>
            DbAccess db =  DatabaseFactory.CreateDatabase(true);  // create with open
            DataSet ds = db.ExecuteSqlDataSet("sp_spName", "MyTable");
            db.Close();
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteSqlDataSet(System.String,System.Data.IDataParameter[])">
            <summary>
            지정된 SQL 문장을 실행하고 그 결과를 DataSet으로 반환한다.
            Parameter 객체 배열을 통해 매개변수를 제공할 수 있으며
            조회된 DataTable 이름은 기본값(<see cref="P:TheOne.Data.DbAccess.DefaultTableName"/> 속성의 값)을 사용한다.
            </summary>
            <param name="query">SQL 문장</param>
            <param name="parameters">IDataParameter객체의 매개변수 배열</param>
            <returns>결과를 저장한 DataSet 객체를 반환한다.</returns>
            <remarks>
            매개변수가 존재하며 결과 집합을 반환하는 SQL 문장을 호출할 때 사용한다.
            매개변수는 Parameter 객체의 열을 통해 설정해야 한다.
            DataSet내의 DataTable 이름은 <see cref="P:TheOne.Data.DbAccess.DefaultTableName"/> 속성이 지정하는 이름을 사용한다.
            예를 들어 DefaultTableName이 Result 이고 저장 프로시저가 3개의 결과 집합을
            반환한다면, DataSet 내의 DataTable들의 이름은 Result, Result1, Result2 가 된다.
            </remarks>
            <example>
            <code>
            DbAccess db =  DatabaseFactory.CreateDatabase(true);  // create with open
            DBParamCollection parameters = db.CreateParamCollection();
            parameters.Add("@p0", yourValue1);
            DataSet ds = db.ExecuteSqlDataSet("SELECT * FROM Products WHERE ProductID &gt; @p0", parameters.ToArray() );
            db.Close();
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteSqlDataSet(System.String,System.String,System.Data.IDataParameter[])">
            <summary>
            지정된 SQL 문장을 실행하고 그 결과를 DataSet으로 반환한다.
            Parameter 객체 배열을 통해 매개변수를 제공할 수 있으며
            지정된 이름을 DataTable 이름으로 사용한다.
            </summary>
            <param name="query">SQL 문장</param>
            <param name="tableName">결과를 저장할 DataSet 내의 테이블 이름</param>
            <param name="parameters">IDataParameter객체의 매개변수 배열</param>
            <returns>결과를 저장한 DataSet 객체를 반환한다.</returns>
            <remarks>
            매개변수가 존재하며 결과 집합을 반환하는 SQL 문장을 호출할 때 사용한다.
            매개변수는 Parameter 객체의 열을 통해 설정해야 한다.
            DataSet내의 DataTable 이름은 tableName 매개변수가 지정하는 이름을 사용한다.
            예를 들어 tableName 매개변수가 Result 이고 저장 프로시저가 3개의 결과 집합을
            반환한다면, DataSet 내의 DataTable들의 이름은 Result, Result1, Result2 가 된다.
            </remarks>
            <example>
            <code>
            DbAccess db = DatabaseFactory.CreateDatabase(true);  // create with open
            DBParamCollection parameters = db.CreateParamCollection();
            parameters.Add("@p0", yourValue1);
            DataSet ds = db.ExecuteSqlDataSet("SELECT * FROM Products WHERE ProductID > @p0", "MyTable", parameters.ToArray() );
            // ds에는 MyTable, MyTable1 등이 테이블이 생성된다.
            db.Close();
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteSqlDataSet(System.String,TheOne.Data.DBParamCollection)">
            <summary>
            지정된 SQL 문장을 실행하고 그 결과를 DataSet으로 반환한다.
            SQL 문장의 매개변수는 <see cref="T:TheOne.Data.DBParamCollection"/> 클래스를 통해 설정할 수 있으며
            조회된 DataTable 이름은 기본값(<see cref="P:TheOne.Data.DbAccess.DefaultTableName"/> 속성의 값)을 사용한다.
            </summary>
            <param name="query">SQL 문장</param>
            <param name="parameters"><see cref="T:TheOne.Data.DBParamCollection"/> 객체.</param>
            <returns>결과를 저장한 DataSet 객체를 반환한다.</returns>
            <remarks>
            매개변수가 존재하며 결과 집합을 반환하는 SQL 문장을 호출할 때 사용한다.
            매개변수는 Parameter 객체 컬렉션인 <see cref="T:TheOne.Data.DBParamCollection"/> 클래스를 통해 설정한다.
            DataSet내의 DataTable 이름은 <see cref="P:TheOne.Data.DbAccess.DefaultTableName"/> 속성이 지정하는 이름을 사용한다.
            예를 들어 DefaultTableName이 Result 이고 저장 프로시저가 3개의 결과 집합을
            반환한다면, DataSet 내의 DataTable들의 이름은 Result, Result1, Result2 가 된다..
            </remarks>
            <example>
            <code>
            DbAccess db = DatabaseFactory.CreateDatabase(true); // create with open
            DBParamCollection parameters = db.CreateParamCollection();
            parameters.Add("@p0", yourValue1);
            DataSet ds = db.ExecuteSqlDataSet("SELECT * FROM Products WHERE ProductID &gt; @p0", parameters );
            db.Close();
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteSqlDataSet(System.String,System.String,TheOne.Data.DBParamCollection)">
            <summary>
            지정된 SQL 문장을 실행하고 그 결과를 DataSet으로 반환한다.
            SQL 문장의 매개변수는 <see cref="T:TheOne.Data.DBParamCollection"/> 클래스를 통해 설정할 수 있으며
            지정된 이름을 DataTable 이름으로 사용한다.
            </summary>
            <param name="query">저장 프로시저 이름</param>
            <param name="tableName">결과를 저장할 DataSet 내의 테이블 이름</param>
            <param name="parameters"><see cref="T:TheOne.Data.DBParamCollection"/> 객체.</param>
            <returns>결과를 저장한 DataSet 객체를 반환한다.</returns>
            <remarks>
            매개변수가 존재하며 결과 집합을 반환하는 SQL 문장을 호출할 때 사용한다.
            매개변수는 Parameter 객체 컬렉션인 <see cref="T:TheOne.Data.DBParamCollection"/> 클래스를 통해 설정한다.
            DataSet내의 DataTable 이름은 tableName 매개변수가 지정하는 이름을 사용한다.
            예를 들어 table 매개변수가 Result 이고 저장 프로시저가 3개의 결과 집합을
            반환한다면, DataSet 내의 DataTable들의 이름은 Result, Result1, Result2 가 된다.
            </remarks>
            <example>
            <code>
            DbAccess db = DatabaseFactory.CreateDatabase(true);  // create with open
            DBParamCollection parameters = db.CreateParamCollection();
            parameters.Add("@p0", yourValue1);
            DataSet ds = db.ExecuteSqlDataSet("SELECT * FROM Products WHERE ProductID &gt; @p0", "MyTable", parameters);
            db.Close();
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteSqlDataSet(System.String,System.Object[])">
            <summary>
            지정된 SQL 문장을 실행하고 그 결과를 DataSet으로 반환한다.
            SQL 문장의 매개변수를 가변 매개변수를 통해 설정할 수 있으며
            조회된 DataTable 이름은 기본값(<see cref="P:TheOne.Data.DbAccess.DefaultTableName"/> 속성의 값)을 사용한다.
            </summary>
            <param name="query">SQL 문장</param>
            <param name="args">매개변수 값들(가변 매개변수)</param>
            <returns>결과를 저장한 DataSet 객체를 반환한다.</returns>
            <remarks>
            매개변수가 존재하며 결과 집합을 반환하는 SQL 문장을 호출할 때 사용한다.
            SQL 문장의 매개변수는 @p0, @p1, @p2, ... 의 이름 형식을 갖어야 한다.
            이 메서드의 가변 매개변수 부분은 순서대로 @p0, @p1, @p2 등과 매치 된다.
            DataSet내의 DataTable 이름은 <see cref="P:TheOne.Data.DbAccess.DefaultTableName"/> 속성이 지정하는 이름을 사용한다.
            예를 들어 DefaultTableName이 Result 이고 저장 프로시저가 3개의 결과 집합을
            반환한다면, DataSet 내의 DataTable들의 이름은 Result, Result1, Result2 가 된다.
            </remarks>
            <example>
            <code>
            DbAccess db = DatabaseFactory.CreateDatabase(true); // create with open
            // @p0 매개변수는 value1 값을 갖게 된다.
            DataSet ds = db.ExecuteSqlDataSet("SELECT * FROM Products WHERE ProductID &gt; @p0", value1);
            db.Close();
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteSqlDataSet(System.String,System.String,System.Object[])">
            <summary>
            지정된 SQL 문장을 실행하고 그 결과를 DataSet으로 반환한다.
            SQL 문장의 매개변수를 가변 매개변수를 통해 설정할 수 있으며
            지정된 이름을 DataTable 이름으로 사용한다.
            </summary>
            <param name="query">저장 프로시저 이름</param>
            <param name="tableName">결과를 저장할 DataSet 내의 테이블 이름</param>
            <param name="args">매개변수 값들(가변 매개변수)</param>
            <returns>결과를 저장한 DataSet 객체를 반환한다.</returns>
            <remarks>
            매개변수가 존재하며 결과 집합을 반환하는 SQL 문장을 호출할 때 사용한다.
            SQL 문장의 매개변수는 @p0, @p1, @p2, ... 의 이름 형식을 갖어야 한다.
            DataSet내의 DataTable 이름은 tableName 매개변수가 지정하는 이름을 사용한다.
            예를 들어 table 매개변수가 Result 이고 저장 프로시저가 3개의 결과 집합을
            반환한다면, DataSet 내의 DataTable들의 이름은 Result, Result1, Result2 가 된다.
            </remarks>
            <example>
            <code>
            DbAccess db = DatabaseFactory.CreateDatabase(true);  // create with open
            // @p0 매개변수는 value1 값을 갖게 된다.
            DataSet ds = db.ExecuteSqlDataSet("SELECT * FROM Products WHERE ProductID > @p0", "MyTable", value1);
            db.Close();
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteSp(System.String,System.Data.DataSet)">
            <summary>
            지정된 저장 프로시저를 실행하고 그 결과를 DataSet으로 채운다.
            매개변수가 없으며
            조회된 DataTable 이름은 기본값(<see cref="P:TheOne.Data.DbAccess.DefaultTableName"/> 속성의 값)을 사용한다.
            </summary>
            <param name="procedureName">저장 프로시저 이름</param>
            <param name="ds">결과를 저장할 DataSet 객체</param>
            <returns>결과 집합의 행의 수를 반환한다.</returns>
            <remarks>
            매개변수가 없으며 결과 집합 반환하는 저장 프로시저를 호출할 때 사용한다.
            DataSet내의 DataTable 이름은 <see cref="P:TheOne.Data.DbAccess.DefaultTableName"/> 속성이 지정하는 이름을 사용한다.
            예를 들어 DefaultTableName이 Result 이고 저장 프로시저가 3개의 결과 집합을
            반환한다면, DataSet 내의 DataTable들의 이름은 Result, Result1, Result2 가 된다.
            </remarks>
            <example>
            <code>
            DbAccess db = DatabaseFactory.CreateDatabase(true);  // create with open
            DataSet ds = new DataSet();
            db.ExecuteSp("sp_spName", ds);
            db.Close();
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteSp(System.String,System.String,System.Data.DataSet)">
            <summary>
            지정된 저장 프로시저를 실행하고 그 결과를 DataSet으로 채운다.
            매개변수가 없으며
            지정된 이름을 DataTable 이름으로 사용한다.
            </summary>
            <param name="procedureName">저장 프로시저 이름</param>
            <param name="tableName">결과를 저장할 DataSet 내의 테이블 이름</param>
            <param name="ds">결과를 저장할 DataSet 객체</param>
            <returns>결과 집합의 행의 수를 반환한다.</returns>
            <remarks>
            매개변수가 없으며 결과 집합 반환하는 저장 프로시저를 호출할 때 사용한다.
            DataSet내의 DataTable 이름은 tableName 매개변수가 지정하는 이름을 사용한다.
            예를 들어 tableName 매개변수가 Result 이고 저장 프로시저가 3개의 결과 집합을
            반환한다면, DataSet 내의 DataTable들의 이름은 Result, Result1, Result2 가 된다.
            </remarks>
            <example>
            <code>
            DbAccess db = DatabaseFactory.CreateDatabase(true);  // create with open
            DataSet ds = new DataSet();
            db.ExecuteSp("sp_spName", "MyTable", ds);  // table name will be MyTable, MyTable1, MyTable2, so on
            db.Close();
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteSp(System.String,System.String,System.String[],System.Data.DataSet)">
            <summary>
            지정된 저장 프로시저를 실행하고 그 결과를 DataSet으로 채운다.
            매개변수가 없으며
            지정된 DataTable 이름과 매핑을 이용하여 테이블 매핑을 수행한다(typed dataset에 사용).
            </summary>
            <param name="procedureName">저장 프로시저 이름</param>
            <param name="tableName">결과를 저장할 DataSet 내의 테이블 이름</param>
            <param name="mappingNames">매핑할 이름</param>
            <param name="ds">결과를 저장할 DataSet 객체</param>
            <returns>저장 프로시저 수행결과로서 첫번째 결과 집합의 행의 수를 반환한다.</returns>
            <remarks>
            매개변수가 없으며 결과 집합 반환하는 저장 프로시저를 호출할 때 사용한다.
            DataSet내의 DataTable 이름은 tableName 매개변수가 지정하는 이름을 사용한다.
            예를 들어 tableName 매개변수가 Result 이고 저장 프로시저가 3개의 결과 집합을
            반환한다면, DataSet 내의 DataTable들의 이름은 Result, Result1, Result2 가 된다.
            mappingNames 매개변수는 이들 Result, Result1 등의 데이터테이블이 매핑될
            DataSet내에 (이미 존재하는) 테이블 이름을 명시한다.
            </remarks>
            <example>
            <code>
            DbAccess db =DatabaseFactory.CreateDatabase(true);  // create with open
            MyTypedDataSet ds = new MyTypedDataSet();
            // DataSet내에 이미 Products, Supplier 테이블이 존재한다고 가정 (typed dataset 처럼)
            stringp[] mapping= new string[] {"Products", "Supplier" }
            // ds에 MyTable, MyTable1 등이 생성되지 않고 기존의 Products, Supplier 테이블에
            // 결과 집합이 저장된다.
            db.ExecuteSp("sp_spName", "MyTable", mapping, ds);
            db.Close();
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteSp(System.String,System.Data.DataSet,System.Data.IDataParameter[])">
            <summary>
            지정된 저장 프로시저를 실행하고 그 결과를 DataSet으로 채운다.
            Parameter 객체 배열을 통해 매개변수를 제공할 수 있으며
            조회된 DataTable 이름은 기본값(<see cref="P:TheOne.Data.DbAccess.DefaultTableName"/> 속성의 값)을 사용한다.
            </summary>
            <param name="procedureName">저장 프로시저 이름</param>
            <param name="ds">결과를 저장할 DataSet 객체</param>
            <param name="parameters">IDataParameter객체의 매개변수 배열</param>
            <returns>결과 집합의 행의 수를 반환한다.</returns>
            <remarks>
            매개변수가 존재하며 결과 집합을 반환하는 저장 프로시저를 호출할 때 사용한다.
            매개변수는 Parameter 객체의 열을 통해 설정해야 한다.
            DataSet내의 DataTable 이름은 <see cref="P:TheOne.Data.DbAccess.DefaultTableName"/> 속성이 지정하는 이름을 사용한다.
            예를 들어 DefaultTableName이 Result 이고 저장 프로시저가 3개의 결과 집합을
            반환한다면, DataSet 내의 DataTable들의 이름은 Result, Result1, Result2 가 된다.
            </remarks>
            <example>
            <code>
            DbAccess db = DatabaseFactory.CreateDatabase(true);  // create with open
            DataSet ds = new DataSet();
            DBParamCollection parameters = db.CreateParamCollection();
            parameters.Add("@paramName1", yourValue1);
            parameters.Add("@paramName2", yourValue2);
            db.ExecuteSp("sp_spName", ds, parameters.ToArray() );
            db.Close();
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteSp(System.String,System.String,System.Data.DataSet,System.Data.IDataParameter[])">
            <summary>
            지정된 저장 프로시저를 실행하고 그 결과를 DataSet으로 채운다.
            Parameter 객체 배열을 통해 매개변수를 제공할 수 있으며
            지정된 이름을 DataTable 이름으로 사용한다.
            </summary>
            <param name="procedureName">저장 프로시저 이름</param>
            <param name="tableName">결과를 저장할 DataSet 내의 테이블 이름</param>
            <param name="ds">결과를 저장할 DataSet 객체</param>
            <param name="parameters">IDataParameter객체의 매개변수 배열</param>
            <returns>결과 집합의 행의 수를 반환한다.</returns>
            <remarks>
            매개변수가 존재하며 결과 집합을 반환하는 저장 프로시저를 호출할 때 사용한다.
            매개변수는 Parameter 객체의 열을 통해 설정해야 한다.
            DataSet내의 DataTable 이름은 tableName 매개변수가 지정하는 이름을 사용한다.
            예를 들어 tableName 매개변수가 Result 이고 저장 프로시저가 3개의 결과 집합을
            반환한다면, DataSet 내의 DataTable들의 이름은 Result, Result1, Result2 가 된다.
            </remarks>
            <example>
            <code>
            DbAccess db = DatabaseFactory.CreateDatabase(true);  // create with open
            DataSet ds = new DataSet();
            DBParamCollection parameters = db.CreateParamCollection();
            parameters.Add("@paramName1", yourValue1);
            parameters.Add("@paramName2", yourValue2);
            db.ExecuteSp("sp_spName", "MyTable", ds, parameters.ToArray() );
            // ds에는 MyTable, MyTable1 등이 테이블이 생성된다.
            db.Close();
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteSp(System.String,System.String,System.String[],System.Data.DataSet,System.Data.IDataParameter[])">
            <summary>
            지정된 저장 프로시저를 실행하고 그 결과를 DataSet으로 채운다.
            Parameter 객체 배열을 통해 매개변수를 제공할 수 있으며
            지정된 DataTable 이름과 매핑을 이용하여 테이블 매핑을 수행한다(typed dataset에 사용).
            </summary>
            <param name="procedureName">저장 프로시저 이름</param>
            <param name="tableName">결과를 저장할 DataSet 내의 테이블 이름</param>
            <param name="mappingNames">매핑할 이름</param>
            <param name="ds">결과를 저장할 DataSet 객체</param>
            <param name="parameters">매개변수배열</param>
            <returns>저장 프로시저 수행결과로서 첫번째 결과 집합의 행의 수를 반환한다.</returns>
            <remarks>
            매개변수가 존재하며 결과 집합을 반환하는 저장 프로시저를 호출할 때 사용한다.
            매개변수는 Parameter 객체의 열을 통해 설정해야 한다.
            DataSet내의 DataTable 이름은 tableName 매개변수가 지정하는 이름을 사용한다.
            예를 들어 tableName 매개변수가 Result 이고 저장 프로시저가 3개의 결과 집합을
            반환한다면, DataSet 내의 DataTable들의 이름은 Result, Result1, Result2 가 된다.
            mappingNames 매개변수는 이들 Result, Result1 등의 데이터테이블이 매핑될
            DataSet내에 (이미 존재하는) 테이블 이름을 명시한다.
            </remarks>
            <example>
            <code>
            DbAccess db = DatabaseFactory.CreateDatabase(true);  // create with open
            MyTypedDataSet ds = new MyTypedDataSet();
            DBParamCollection parameters = db.CreateParamCollection();
            parameters.Add("@paramName1", yourValue1);
            parameters.Add("@paramName2", yourValue2);
            // DataSet내에 이미 Products, Supplier 테이블이 존재한다고 가정 (typed dataset 처럼)
            stringp[] mapping= new string[] {"Products", "Supplier" }
            // ds에 MyTable, MyTable1 등이 생성되지 않고 기존의 Products, Supplier 테이블에
            // 결과 집합이 저장된다.
            db.ExecuteSp("sp_spName", "MyTable", mapping, ds, parameters.ToArray() );
            db.Close();
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteSp(System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            지정된 저장 프로시저를 실행하고 그 결과를 DataSet으로 채운다.
            저장 프로시저 Parameter 이름/값 배열을 통해 매개변수를 제공할 수 있으며
            조회된 DataTable 이름은 기본값(<see cref="P:TheOne.Data.DbAccess.DefaultTableName"/> 속성의 값)을 사용한다.
            </summary>
            <param name="procedureName">저장 프로시저 이름</param>
            <param name="ds">결과를 저장할 DataSet 객체</param>
            <param name="paramNames">저장 프로시저의 매개변수 이름 배열</param>
            <param name="args">매개변수 값들(가변 매개변수)</param>
            <returns>결과 집합의 행의 수를 반환한다.</returns>
            <remarks>
            매개변수가 존재하며 결과 집합을 반환하는 저장 프로시저를 호출할 때 사용한다.
            매개변수는 저장 프로시저의 Parameter 이름 배열과 값배열을 사용한다(예제 참조).
            DataSet내의 DataTable 이름은 <see cref="P:TheOne.Data.DbAccess.DefaultTableName"/> 속성이 지정하는 이름을 사용한다.
            예를 들어 DefaultTableName이 Result 이고 저장 프로시저가 3개의 결과 집합을
            반환한다면, DataSet 내의 DataTable들의 이름은 Result, Result1, Result2 가 된다.
            </remarks>
            <example>
            <code>
            DbAccess db = DatabaseFactory.CreateDatabase(true);  // create with open
            DataSet ds = new DataSet();
            string[] paramNames = new string[] { "@paramName1", "@paramName2" };
            db.ExecuteSp("sp_spName", ds, paramNames, value1, vaule2);
            db.Close();
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteSp(System.String,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            지정된 저장 프로시저를 실행하고 그 결과를 DataSet으로 채운다.
            저장 프로시저 Parameter 이름/값 배열을 통해 매개변수를 제공할 수 있으며
            지정된 이름을 DataTable 이름으로 사용한다.
            </summary>
            <param name="procedureName">저장 프로시저 이름</param>
            <param name="tableName">결과를 저장할 DataSet 내의 테이블 이름</param>
            <param name="ds">결과를 저장할 DataSet 객체</param>
            <param name="paramNames">저장 프로시저의 매개변수 이름 배열</param>
            <param name="args">매개변수 값들(가변 매개변수)</param>
            <returns>결과 집합의 행의 수를 반환한다.</returns>
            <remarks>
            매개변수가 존재하며 결과 집합을 반환하는 저장 프로시저를 호출할 때 사용한다.
            매개변수는 저장 프로시저의 Parameter 이름 배열과 값배열을 사용한다(예제 참조).
            DataSet내의 DataTable 이름은 tableName 매개변수가 지정하는 이름을 사용한다.
            예를 들어 table 매개변수가 Result 이고 저장 프로시저가 3개의 결과 집합을
            반환한다면, DataSet 내의 DataTable들의 이름은 Result, Result1, Result2 가 된다.
            </remarks>
            <example>
            <code>
            DbAccess db = DatabaseFactory.CreateDatabase(true);  // create with open
            DataSet ds = new DataSet();
            string[] paramNames = new string[] { "@paramName1", "@paramName2" };
            db.ExecuteSp("sp_spName", "MyTable", ds, paramNames, value1, vaule2);
            db.Close();
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteSp(System.String,System.String,System.String[],System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            지정된 저장 프로시저를 실행하고 그 결과를 DataSet으로 채운다.
            저장 프로시저 Parameter 이름/값 배열을 통해 매개변수를 제공할 수 있으며
            지정된 DataTable 이름과 매핑을 이용하여 테이블 매핑을 수행한다(typed dataset에 사용).
            </summary>
            <param name="procedureName">저장 프로시저 이름</param>
            <param name="tableName">결과를 저장할 DataSet 내의 테이블 이름</param>
            <param name="mappingNames">매핑할 이름</param>
            <param name="ds">결과를 저장할 DataSet 객체</param>
            <param name="paramNames">저장 프로시저의 매개변수 이름 배열</param>
            <param name="args">매개변수 값들(가변 매개변수)</param>
            <returns>저장 프로시저 수행결과로서 첫번째 결과 집합의 행의 수를 반환한다.</returns>
            <remarks>
            매개변수가 존재하며 결과 집합을 반환하는 저장 프로시저를 호출할 때 사용한다.
            매개변수는 저장 프로시저의 Parameter 이름 배열과 값배열을 사용한다(예제 참조).
            DataSet내의 DataTable 이름은 <see cref="P:TheOne.Data.DbAccess.DefaultTableName"/> 속성이 지정하는 이름을 사용한다.
            예를 들어 tableName 매개변수가 Result 이고 저장 프로시저가 3개의 결과 집합을
            반환한다면, DataSet 내의 DataTable들의 이름은 Result, Result1, Result2 가 된다.
            mappingNames 매개변수는 이들 Result, Result1 등의 데이터테이블이 매핑될
            DataSet내에 (이미 존재하는) 테이블 이름을 명시한다.
            </remarks>
            <example>
            <code>
            DbAccess db = DatabaseFactory.CreateDatabase(true);  // create with open
            MyTypedDataSet ds = new MyTypedDataSet();
            string[] paramNames = new string[] { "@paramName1", "@paramName2" };
            // DataSet내에 이미 Products, Supplier 테이블이 존재한다고 가정 (typed dataset 처럼)
            stringp[] mapping= new string[] {"Products", "Supplier" }
            // ds에 MyTable, MyTable1 등이 생성되지 않고 기존의 Products, Supplier 테이블에
            // 결과 집합이 저장된다.
            db.ExecuteSp("sp_spName", "MyTable", mapping, ds, paramNames, value1, value2);
            db.Close();
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteSp(System.String,System.Data.DataSet,TheOne.Data.DBParamCollection)">
            <summary>
            지정된 저장 프로시저를 실행하고 그 결과를 DataSet으로 채운다.
            Parameter 객체 배열을 통해 매개변수를 제공할 수 있으며
            조회된 DataTable 이름은 기본값(<see cref="P:TheOne.Data.DbAccess.DefaultTableName"/> 속성의 값)을 사용한다.
            </summary>
            <param name="procedureName">저장 프로시저 이름</param>
            <param name="ds">결과를 저장할 DataSet 객체</param>
            <param name="parameters">DBParamCollection 객체</param>
            <returns>결과 집합의 행의 수를 반환한다.</returns>
            <remarks>
            매개변수가 존재하며 결과 집합을 반환하는 저장 프로시저를 호출할 때 사용한다.
            매개변수는 Parameter 객체의 열을 통해 설정해야 한다.
            DataSet내의 DataTable 이름은 <see cref="P:TheOne.Data.DbAccess.DefaultTableName"/> 속성이 지정하는 이름을 사용한다.
            예를 들어 DefaultTableName이 Result 이고 저장 프로시저가 3개의 결과 집합을
            반환한다면, DataSet 내의 DataTable들의 이름은 Result, Result1, Result2 가 된다.
            </remarks>
            <example>
            <code>
            DbAccess db = DatabaseFactory.CreateDatabase(true);  // create with open
            DataSet ds = new DataSet();
            DBParamCollection parameters = db.CreateParamCollection();
            parameters.Add("@paramName1", yourValue1);
            parameters.Add("@paramName2", yourValue2);
            db.ExecuteSp("sp_spName", ds, parameters.ToArray() );
            db.Close();
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteSp(System.String,System.String,System.Data.DataSet,TheOne.Data.DBParamCollection)">
            <summary>
            지정된 저장 프로시저를 실행하고 그 결과를 DataSet으로 채운다.
            Parameter 객체 배열을 통해 매개변수를 제공할 수 있으며
            조회된 DataTable 이름은 기본값(<see cref="P:TheOne.Data.DbAccess.DefaultTableName"/> 속성의 값)을 사용한다.
            </summary>
            <param name="procedureName">저장 프로시저 이름</param>
            <param name="tableName">결과를 저장할 DataSet 내의 테이블 이름</param>
            <param name="ds">결과를 저장할 DataSet 객체</param>
            <param name="parameters">DBParamCollection 객체</param>
            <returns>결과 집합의 행의 수를 반환한다.</returns>
            <remarks>
            매개변수가 존재하며 결과 집합을 반환하는 저장 프로시저를 호출할 때 사용한다.
            매개변수는 Parameter 객체의 열을 통해 설정해야 한다.
            DataSet내의 DataTable 이름은 <see cref="P:TheOne.Data.DbAccess.DefaultTableName"/> 속성이 지정하는 이름을 사용한다.
            예를 들어 DefaultTableName이 Result 이고 저장 프로시저가 3개의 결과 집합을
            반환한다면, DataSet 내의 DataTable들의 이름은 Result, Result1, Result2 가 된다.
            </remarks>
            <example>
            <code>
            DbAccess db = DatabaseFactory.CreateDatabase(true);  // create with open
            DataSet ds = new DataSet();
            DBParamCollection parameters = db.CreateParamCollection();
            parameters.Add("@paramName1", yourValue1);
            parameters.Add("@paramName2", yourValue2);
            db.ExecuteSp("sp_spName", ds, parameters.ToArray() );
            db.Close();
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteSp(System.String,System.String,System.String[],System.Data.DataSet,TheOne.Data.DBParamCollection)">
            <summary>
            지정된 저장 프로시저를 실행하고 그 결과를 DataSet으로 채운다.
            Parameter 객체 배열을 통해 매개변수를 제공할 수 있으며
            조회된 DataTable 이름은 기본값(<see cref="P:TheOne.Data.DbAccess.DefaultTableName"/> 속성의 값)을 사용한다.
            </summary>
            <param name="procedureName">저장 프로시저 이름</param>
            <param name="tableName">결과를 저장할 DataSet 내의 테이블 이름</param>
            <param name="mappingNames">매핑할 이름</param>
            <param name="ds">결과를 저장할 DataSet 객체</param>
            <param name="parameters">DBParamCollection 객체</param>
            <returns>결과 집합의 행의 수를 반환한다.</returns>
            <remarks>
            매개변수가 존재하며 결과 집합을 반환하는 저장 프로시저를 호출할 때 사용한다.
            매개변수는 Parameter 객체의 열을 통해 설정해야 한다.
            DataSet내의 DataTable 이름은 <see cref="P:TheOne.Data.DbAccess.DefaultTableName"/> 속성이 지정하는 이름을 사용한다.
            예를 들어 DefaultTableName이 Result 이고 저장 프로시저가 3개의 결과 집합을
            반환한다면, DataSet 내의 DataTable들의 이름은 Result, Result1, Result2 가 된다.
            </remarks>
            <example>
            <code>
            DbAccess db = DatabaseFactory.CreateDatabase(true);  // create with open
            DataSet ds = new DataSet();
            DBParamCollection parameters = db.CreateParamCollection();
            parameters.Add("@paramName1", yourValue1);
            parameters.Add("@paramName2", yourValue2);
            db.ExecuteSp("sp_spName", ds, parameters.ToArray() );
            db.Close();
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteSql(System.String,System.Data.DataSet)">
            <summary>
            지정된 SQL 문장을 실행하고 그 결과를 DataSet으로 채운다.
            매개변수는 없으며
            조회된 DataTable 이름은 기본값(<see cref="P:TheOne.Data.DbAccess.DefaultTableName"/> 속성의 값)을 사용한다.
            </summary>
            <param name="query">SQL 문장</param>
            <param name="ds">결과를 저장할 DataSet 객체</param>
            <returns>결과 집합의 행의 수를 반환한다.</returns>
            <remarks>
            매개변수가 없으며 결과 집합 반환하는 SQL 문장을 호출할 때 사용한다.
            DataSet내의 DataTable 이름은 <see cref="P:TheOne.Data.DbAccess.DefaultTableName"/> 속성이 지정하는 이름을 사용한다.
            예를 들어 DefaultTableName이 Result 이고 SQL 문장이 3개의 결과 집합을
            반환한다면, DataSet 내의 DataTable들의 이름은 Result, Result1, Result2 가 된다.
            </remarks>
            <example>
            <code>
            DbAccess db = DatabaseFactory.CreateDatabase(true);  // create with open
            DataSet ds = new DataSet();
            db.ExecuteSql("SELECT * FROM Products", ds);
            db.Close();
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteSql(System.String,System.String,System.Data.DataSet)">
            <summary>
            지정된 SQL 문장을 실행하고 그 결과를 DataSet으로 채운다.
            매개변수는 없으며
            지정된 이름을 DataTable 이름으로 사용한다.
            </summary>
            <param name="query">SQL 문장</param>
            <param name="tableName">결과를 저장할 DataSet 내의 테이블 이름</param>
            <param name="ds">결과를 저장할 DataSet 객체</param>
            <returns>결과 집합의 행의 수를 반환한다.</returns>
            <remarks>
            매개변수가 없으며 결과 집합 반환하는 SQL 문장을 호출할 때 사용한다.
            DataSet내의 DataTable 이름은 tableName 매개변수가 지정하는 이름을 사용한다.
            예를 들어 tableName 매개변수가 Result 이고 SQL 문장이 3개의 결과 집합을
            반환한다면, DataSet 내의 DataTable들의 이름은 Result, Result1, Result2 가 된다.
            </remarks>
            <example>
            <code>
            DbAccess db = DatabaseFactory.CreateDatabase(true);  // create with open
            DataSet ds = new DataSet();
            db.ExecuteSql("sp_spName", "MyTable", ds);
            db.Close();
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteSql(System.String,System.String,System.String[],System.Data.DataSet)">
            <summary>
            지정된 SQL 문장을 실행하고 그 결과를 DataSet으로 채운다.
            매개변수는 없으며
            지정된 DataTable 이름과 매핑을 이용하여 테이블 매핑을 수행한다(typed dataset에 사용).
            </summary>
            <param name="query">SQL 문장</param>
            <param name="tableName">결과를 저장할 DataSet 내의 테이블 이름</param>
            <param name="mappingNames">매핑할 이름</param>
            <param name="ds">결과를 저장할 DataSet 객체</param>
            <returns>결과 집합의 행의 수를 반환한다.</returns>
            <remarks>
            매개변수가 없으며 결과 집합 반환하는 SQL 문장을 호출할 때 사용한다.
            DataSet내의 DataTable 이름은 tableName 매개변수가 지정하는 이름을 사용한다.
            예를 들어 tableName 매개변수가 Result 이고 저장 프로시저가 3개의 결과 집합을
            반환한다면, DataSet 내의 DataTable들의 이름은 Result, Result1, Result2 가 된다.
            mappingNames 매개변수는 이들 Result, Result1 등의 데이터테이블이 매핑될
            DataSet내에 (이미 존재하는) 테이블 이름을 명시한다.
            </remarks>
            <example>
            <code>
            DbAccess db = DatabaseFactory.CreateDatabase(true);  // create with open
            MyTypedDataSet ds = new MyTypedDataSet();
            // DataSet내에 이미 Products, Supplier 테이블이 존재한다고 가정 (typed dataset 처럼)
            stringp[] mapping= new string[] {"Products", "Supplier" }
            // ds에 MyTable, MyTable1 등이 생성되지 않고 기존의 Products, Supplier 테이블에
            // 결과 집합이 저장된다.
            db.ExecuteSql("sp_spName", "MyTable", mapping, ds);
            db.Close();
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteSql(System.String,System.Data.DataSet,System.Data.IDataParameter[])">
            <summary>
            지정된 SQL 문장을 실행하고 그 결과를 DataSet으로 채운다.
            Parameter 객체 배열을 통해 매개변수를 제공할 수 있으며
            조회된 DataTable 이름은 기본값(<see cref="P:TheOne.Data.DbAccess.DefaultTableName"/> 속성의 값)을 사용한다.
            </summary>
            <param name="query">SQL 문장</param>
            <param name="ds">결과를 저장할 DataSet 객체</param>
            <param name="parameters">IDataParameter객체의 매개변수 배열</param>
            <returns>결과 집합의 행의 수를 반환한다.</returns>
            <remarks>
            매개변수가 존재하며 결과 집합을 반환하는 SQL 문장을 호출할 때 사용한다.
            매개변수는 Parameter 객체의 열을 통해 설정해야 한다.
            DataSet내의 DataTable 이름은 <see cref="P:TheOne.Data.DbAccess.DefaultTableName"/> 속성이 지정하는 이름을 사용한다.
            예를 들어 DefaultTableName이 Result 이고 저장 프로시저가 3개의 결과 집합을
            반환한다면, DataSet 내의 DataTable들의 이름은 Result, Result1, Result2 가 된다.
            </remarks>
            <example>
            <code>
            DbAccess db = DatabaseFactory.CreateDatabase(true);  // create with open
            DataSet ds = new DataSet();
            DBParamCollection parameters = db.CreateParamCollection();
            parameters.Add("@p0", yourValue1);
            db.ExecuteSql("SELECT * FROM Products WHERE ProductID &gt; @p0", ds, parameters.ToArray() );
            db.Close();
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteSql(System.String,System.String,System.Data.DataSet,System.Data.IDataParameter[])">
            <summary>
            지정된 SQL 문장을 실행하고 그 결과를 DataSet으로 채운다.
            Parameter 객체 배열을 통해 매개변수를 제공할 수 있으며
            지정된 이름을 DataTable 이름으로 사용한다.
            </summary>
            <param name="query">SQL 문장</param>
            <param name="tableName">결과를 저장할 DataSet 내의 테이블 이름</param>
            <param name="ds">결과를 저장할 DataSet 객체</param>
            <param name="parameters">IDataParameter객체의 매개변수 배열</param>
            <returns>결과 집합의 행의 수를 반환한다.</returns>
            <remarks>
            매개변수가 존재하며 결과 집합을 반환하는 SQL 문장을 호출할 때 사용한다.
            매개변수는 Parameter 객체의 열을 통해 설정해야 한다.
            DataSet내의 DataTable 이름은 tableName 매개변수가 지정하는 이름을 사용한다.
            예를 들어 tableName 매개변수가 Result 이고 저장 프로시저가 3개의 결과 집합을
            반환한다면, DataSet 내의 DataTable들의 이름은 Result, Result1, Result2 가 된다.
            </remarks>
            <example>
            <code>
            DbAccess db = DatabaseFactory.CreateDatabase(true);  // create with open
            DataSet ds = new DataSet();
            DBParamCollection parameters = db.CreateParamCollection();
            parameters.Add("@p0", yourValue1);
            db.ExecuteSql("SELECT * FROM Products WHERE ProductID > @p0", "MyTable", ds, parameters);
            // ds에는 MyTable, MyTable1 등이 테이블이 생성된다.
            db.Close();
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteSql(System.String,System.String,System.String[],System.Data.DataSet,System.Data.IDataParameter[])">
            <summary>
            지정된 SQL 문장을 실행하고 그 결과를 DataSet으로 채운다.
            Parameter 객체 배열을 통해 매개변수를 제공할 수 있으며
            지정된 DataTable 이름과 매핑을 이용하여 테이블 매핑을 수행한다(typed dataset에 사용).
            </summary>
            <param name="query">SQL 문장</param>
            <param name="tableName">결과를 저장할 DataSet 내의 테이블 이름</param>
            <param name="mappingNames">매핑할 이름</param>
            <param name="ds">결과를 저장할 DataSet 객체</param>
            <param name="parameters">매개변수배열</param>
            <returns>저장 프로시저 수행결과로서 첫번째 결과 집합의 행의 수를 반환한다.</returns>
            <remarks>
            매개변수가 존재하며 결과 집합을 반환하는 SQL 문장을 호출할 때 사용한다.
            매개변수는 Parameter 객체의 열을 통해 설정해야 한다.
            DataSet내의 DataTable 이름은 tableName 매개변수가 지정하는 이름을 사용한다.
            예를 들어 tableName 매개변수가 Result 이고 저장 프로시저가 3개의 결과 집합을
            반환한다면, DataSet 내의 DataTable들의 이름은 Result, Result1, Result2 가 된다.
            mappingNames 매개변수는 이들 Result, Result1 등의 데이터테이블이 매핑될
            DataSet내에 (이미 존재하는) 테이블 이름을 명시한다.
            </remarks>
            <example>
            <code>
            DbAccess db = DatabaseFactory.CreateDatabase(true);  // create with open
            MyTypedDataSet ds = new MyTypedDataSet();
            DBParamCollection parameters = db.CreateParamCollection();
            parameters.Add("@p0", yourValue1);
            // DataSet내에 이미 Products, Supplier 테이블이 존재한다고 가정 (typed dataset 처럼)
            stringp[] mapping= new string[] {"Products", "Supplier" }
            // ds에 MyTable, MyTable1 등이 생성되지 않고 기존의 Products, Supplier 테이블에
            // 결과 집합이 저장된다.
            db.ExecuteSql("SELECT * FROM Products WHERE ProductID > @p0", "MyTable", mapping, ds, parameters);
            db.Close();
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteSql(System.String,System.Data.DataSet,TheOne.Data.DBParamCollection)">
            <summary>
            지정된 SQL 문장을 실행하고 그 결과를 DataSet으로 채운다.
            SQL 문장의 매개변수는 <see cref="T:TheOne.Data.DBParamCollection"/> 클래스를 통해 설정할 수 있으며
            조회된 DataTable 이름은 기본값(<see cref="P:TheOne.Data.DbAccess.DefaultTableName"/> 속성의 값)을 사용한다.
            </summary>
            <param name="query">SQL 문장</param>
            <param name="ds">결과를 저장할 DataSet 객체</param>
            <param name="parameters"><see cref="T:TheOne.Data.DBParamCollection"/> 객체.</param>
            <returns>결과 집합의 행의 수를 반환한다.</returns>
            <remarks>
            매개변수가 존재하며 결과 집합을 반환하는 SQL 문장을 호출할 때 사용한다.
            매개변수는 Parameter 객체 컬렉션인 <see cref="T:TheOne.Data.DBParamCollection"/> 클래스를 통해 설정한다.	
            DataSet내의 DataTable 이름은 <see cref="P:TheOne.Data.DbAccess.DefaultTableName"/> 속성이 지정하는 이름을 사용한다.
            예를 들어 DefaultTableName이 Result 이고 저장 프로시저가 3개의 결과 집합을
            반환한다면, DataSet 내의 DataTable들의 이름은 Result, Result1, Result2 가 된다.
            </remarks>
            <example>
            <code>
            DbAccess db = DatabaseFactory.CreateDatabase(true);  // create with open
            DBParamCollection parameters = db.CreateParamCollection();
            parameters.Add("@p0", value1);
            DataSet ds = db.ExecuteSqlDataSet("SELECT * FROM Products WHERE ProductID &gt; @p0", parameters );
            db.Close();
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteSql(System.String,System.String,System.Data.DataSet,TheOne.Data.DBParamCollection)">
            <summary>
            지정된 SQL 문장을 실행하고 그 결과를 DataSet으로 채운다.
            SQL 문장의 매개변수는 <see cref="T:TheOne.Data.DBParamCollection"/> 클래스를 통해 설정할 수 있으며
            지정된 이름을 DataTable 이름으로 사용한다.
            </summary>
            <param name="query">저장 프로시저 이름</param>
            <param name="tableName">결과를 저장할 DataSet 내의 테이블 이름</param>
            <param name="ds">결과를 저장할 DataSet 객체</param>
            <param name="parameters"><see cref="T:TheOne.Data.DBParamCollection"/> 객체.</param>
            <returns>결과 집합의 행의 수를 반환한다.</returns>
            <remarks>
            매개변수가 존재하며 결과 집합을 반환하는 SQL 문장을 호출할 때 사용한다.
            매개변수는 Parameter 객체 컬렉션인 <see cref="T:TheOne.Data.DBParamCollection"/> 클래스를 통해 설정한다.
            DataSet내의 DataTable 이름은 tableName 매개변수가 지정하는 이름을 사용한다.
            예를 들어 table 매개변수가 Result 이고 저장 프로시저가 3개의 결과 집합을
            반환한다면, DataSet 내의 DataTable들의 이름은 Result, Result1, Result2 가 된다.
            </remarks>
            <example>
            <code>
            DbAccess db = DatabaseFactory.CreateDatabase(true);  // create with open
            DataSet ds = new DataSet();
            DBParamCollection parameters = db.CreateParamCollection();
            parameters.Add("@p0", value1);
            DataSet ds = db.ExecuteSqlDataSet("SELECT * FROM Products WHERE ProductID &gt; @p0", parameters );
            db.Close();
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteSql(System.String,System.String,System.String[],System.Data.DataSet,TheOne.Data.DBParamCollection)">
            <summary>
            지정된 SQL 문장을 실행하고 그 결과를 DataSet으로 채운다.
            SQL 문장의 매개변수는 <see cref="T:TheOne.Data.DBParamCollection"/> 클래스를 통해 설정할 수 있으며
            지정된 DataTable 이름과 매핑을 이용하여 테이블 매핑을 수행한다(typed dataset에 사용).
            </summary>
            <param name="query">저장 프로시저 이름</param>
            <param name="tableName">결과를 저장할 DataSet 내의 테이블 이름</param>
            <param name="mappingNames">매핑할 이름</param>
            <param name="ds">결과를 저장할 DataSet 객체</param>
            <param name="parameters"><see cref="T:TheOne.Data.DBParamCollection"/> 객체.</param>
            <returns>저장 프로시저 수행결과로서 첫번째 결과 집합의 행의 수를 반환한다.</returns>
            <remarks>
            매개변수가 존재하며 결과 집합을 반환하는 SQL 문장을 호출할 때 사용한다.
            매개변수는 Parameter 객체 컬렉션인 <see cref="T:TheOne.Data.DBParamCollection"/> 클래스를 통해 설정한다.
            DataSet내의 DataTable 이름은 <see cref="P:TheOne.Data.DbAccess.DefaultTableName"/> 속성이 지정하는 이름을 사용한다.
            예를 들어 tableName 매개변수가 Result 이고 저장 프로시저가 3개의 결과 집합을
            반환한다면, DataSet 내의 DataTable들의 이름은 Result, Result1, Result2 가 된다.
            mappingNames 매개변수는 이들 Result, Result1 등의 데이터테이블이 매핑될
            DataSet내에 (이미 존재하는) 테이블 이름을 명시한다.
            </remarks>
            <example>
            <code>
            DbAccess db = DatabaseFactory.CreateDatabase(true);  // create with open
            MyTypedDataSet ds = new MyTypedDataSet();
            // DataSet내에 이미 Products, Supplier 테이블이 존재한다고 가정 (typed dataset 처럼)
            stringp[] mapping= new string[] {"Products", "Supplier" }
            // ds에 MyTable, MyTable1 등이 생성되지 않고 기존의 Products, Supplier 테이블에
            // 결과 집합이 저장된다.
            DBParamCollection parameters = db.CreateParamCollection();
            parameters.Add("@p0", value1);
            DataSet ds = db.ExecuteSqlDataSet("SELECT * FROM Products WHERE ProductID &gt; @p0", parameters );
            db.Close();
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteSql(System.String,System.Data.DataSet,System.Object[])">
            <summary>
            지정된 SQL 문장을 실행하고 그 결과를 DataSet으로 채운다.
            SQL 문장의 매개변수를 가변 매개변수를 통해 설정할 수 있으며
            조회된 DataTable 이름은 기본값(<see cref="P:TheOne.Data.DbAccess.DefaultTableName"/> 속성의 값)을 사용한다.
            </summary>
            <param name="query">SQL 문장</param>
            <param name="ds">결과를 저장할 DataSet 객체</param>
            <param name="args">매개변수 값들(가변 매개변수)</param>
            <returns>결과 집합의 행의 수를 반환한다.</returns>
            <remarks>
            매개변수가 존재하며 결과 집합을 반환하는 SQL 문장을 호출할 때 사용한다.
            SQL 문장의 매개변수는 @p0, @p1, @p2, ... 의 이름 형식을 갖어야 한다.
            이 메서드의 가변 매개변수 부분은 순서대로 @p0, @p1, @p2 등과 매치 된다.
            DataSet내의 DataTable 이름은 <see cref="P:TheOne.Data.DbAccess.DefaultTableName"/> 속성이 지정하는 이름을 사용한다.
            예를 들어 DefaultTableName이 Result 이고 저장 프로시저가 3개의 결과 집합을
            반환한다면, DataSet 내의 DataTable들의 이름은 Result, Result1, Result2 가 된다.
            </remarks>
            <example>
            <code>
            DbAccess db = DatabaseFactory.CreateDatabase(true);  // create with open
            DataSet ds = new DataSet();
            // @p0 매개변수는 value1 값을 갖게 된다.
            db.ExecuteSql("SELECT * FROM Products WHERE ProductID &gt; @p0", ds, value1);
            db.Close();
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteSql(System.String,System.String,System.Data.DataSet,System.Object[])">
            <summary>
            지정된 SQL 문장을 실행하고 그 결과를 DataSet으로 채운다.
            SQL 문장의 매개변수를 가변 매개변수를 통해 설정할 수 있으며
            지정된 이름을 DataTable 이름으로 사용한다.
            </summary>
            <param name="query">저장 프로시저 이름</param>
            <param name="tableName">결과를 저장할 DataSet 내의 테이블 이름</param>
            <param name="ds">결과를 저장할 DataSet 객체</param>
            <param name="args">매개변수 값들(가변 매개변수)</param>
            <returns>결과 집합의 행의 수를 반환한다.</returns>
            <remarks>
            매개변수가 존재하며 결과 집합을 반환하는 SQL 문장을 호출할 때 사용한다.
            SQL 문장의 매개변수는 @p0, @p1, @p2, ... 의 이름 형식을 갖어야 한다.
            DataSet내의 DataTable 이름은 tableName 매개변수가 지정하는 이름을 사용한다.
            예를 들어 table 매개변수가 Result 이고 저장 프로시저가 3개의 결과 집합을
            반환한다면, DataSet 내의 DataTable들의 이름은 Result, Result1, Result2 가 된다.
            </remarks>
            <example>
            <code>
            DbAccess db = DatabaseFactory.CreateDatabase(true);  // create with open
            DataSet ds = new DataSet();
            // @p0 매개변수는 value1 값을 갖게 된다.
            db.ExecuteSql("SELECT * FROM Products WHERE ProductID > @p0", "MyTable", ds, value1);
            db.Close();
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteSql(System.String,System.String,System.String[],System.Data.DataSet,System.Object[])">
            <summary>
            지정된 SQL 문장을 실행하고 그 결과를 DataSet으로 채운다.
            SQL 문장의 매개변수를 가변 매개변수를 통해 설정할 수 있으며
            지정된 DataTable 이름과 매핑을 이용하여 테이블 매핑을 수행한다(typed dataset에 사용).
            </summary>
            <param name="query">저장 프로시저 이름</param>
            <param name="tableName">결과를 저장할 DataSet 내의 테이블 이름</param>
            <param name="mappingNames">매핑할 이름</param>
            <param name="ds">결과를 저장할 DataSet 객체</param>
            <param name="args">매개변수 값들(가변 매개변수)</param>
            <returns>저장 프로시저 수행결과로서 첫번째 결과 집합의 행의 수를 반환한다.</returns>
            <remarks>
            매개변수가 존재하며 결과 집합을 반환하는 SQL 문장을 호출할 때 사용한다.
            SQL 문장의 매개변수는 @p0, @p1, @p2, ... 의 이름 형식을 갖어야 한다.
            DataSet내의 DataTable 이름은 <see cref="P:TheOne.Data.DbAccess.DefaultTableName"/> 속성이 지정하는 이름을 사용한다.
            예를 들어 tableName 매개변수가 Result 이고 저장 프로시저가 3개의 결과 집합을
            반환한다면, DataSet 내의 DataTable들의 이름은 Result, Result1, Result2 가 된다.
            mappingNames 매개변수는 이들 Result, Result1 등의 데이터테이블이 매핑될
            DataSet내에 (이미 존재하는) 테이블 이름을 명시한다.
            </remarks>
            <example>
            <code>
            DbAccess db = DatabaseFactory.CreateDatabase(true);  // create with open
            MyTypedDataSet ds = new MyTypedDataSet();
            // DataSet내에 이미 Products, Supplier 테이블이 존재한다고 가정 (typed dataset 처럼)
            stringp[] mapping= new string[] {"Products", "Supplier" }
            // ds에 MyTable, MyTable1 등이 생성되지 않고 기존의 Products, Supplier 테이블에
            // 결과 집합이 저장된다.
            // @p0 매개변수는 value1 값을 갖게 된다.
            db.ExecuteSql("SELECT * FROM Products WHERE ProductID &gt; @p0", "MyTable", mapping, ds, value1);
            db.Close();
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteSpNonQuery(System.String)">
            <summary>
            결과 집합이 없는 저장 프로시저를 실행하고 영향을 받는 행의 수를 반환한다.
            </summary>
            <param name="procedureName">저장 프로시저 이름</param>
            <returns>저장 프로시저에 의해 영향을 받는 행의 수를 반환한다.</returns>
            <remarks>
            저장 프로시저가 결과 집합을 반환하더라도 그 결과 집합은 무시된다.
            </remarks>
            <example>
            <code>
            DbAccess db = DatabaseFactory.CreateDatabase(true);  // create with open
            db.ExecuteSpNonQuery("sp_spName");
            db.Close();
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteSpNonQuery(System.String,System.Data.IDataParameter[])">
            <summary>
            결과 집합이 없는 저장 프로시저를 실행하고 영향을 받는 행의 수를 반환한다.
            Parameters 객체 배열을 통해 저장 프로시저의 매개변수를 설정한다.
            </summary>
            <param name="procedureName">저장 프로시저 이름</param>
            <param name="parameters">IDataParameter객체의 매개변수 배열</param>
            <returns>저장 프로시저에 의해 영향을 받는 행의 수를 반환한다.</returns>
            <remarks>
            저장 프로시저가 결과 집합을 반환하더라도 그 결과 집합은 무시된다.
            </remarks>
            <example>
            <code>
            DbAccess db = DatabaseFactory.CreateDatabase(true);  // create with open
            DBParamCollection parameters = db.CreateParamCollection();
            parameters.Add("@paramName1", yourValue1);
            parameters.Add("@paramName2", yourValue2);
            db.ExecuteSpNonQuery("sp_spName", parameters);
            db.Close();
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteSpNonQuery(System.String,System.String[],System.Object[])">
            <summary>
            결과 집합이 없는 저장 프로시저를 실행하고 영향을 받는 행의 수를 반환한다.
            stroed procedure Parameter 이름/값 배열을 통해 매개변수를 제공할 수 있다.
            </summary>
            <param name="procedureName">저장 프로시저 이름</param>
            <param name="paramNames">저장 프로시저의 매개변수 이름 배열</param>
            <param name="args">매개변수 값들(가변 매개변수)</param>
            <returns>저장 프로시저에 의해 영향을 받는 행의 수를 반환한다.</returns>
            <remarks>
            저장 프로시저가 결과 집합을 반환하더라도 그 결과 집합은 무시된다.
            </remarks>
            <example>
            <code>
            DbAccess db = DatabaseFactory.CreateDatabase(true);  // create with open
            string[] paramNames = new string[] { "@paramName1", "@paramName2" };
            db.ExecuteSpNonQuery("sp_spName", paramNames, value1, vaule2);
            db.Close();
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteSpNonQuery(System.String,TheOne.Data.DBParamCollection)">
            <summary>
            결과 집합이 없는 저장 프로시저를 실행하고 영향을 받는 행의 수를 반환한다.
            Parameters 객체 배열을 통해 저장 프로시저의 매개변수를 설정한다.
            </summary>
            <param name="procedureName">저장 프로시저 이름</param>
            <param name="parameters">DBParamCollection 객체</param>
            <returns>SQL문장에 의해 영향을 받는 행의 수이다.</returns>
            <remarks>
            저장 프로시저가 결과 집합을 반환하더라도 그 결과 집합은 무시된다.
            </remarks>
            <example>
            <code>
            DbAccess db = DatabaseFactory.CreateDatabase(true);  // create with open
            DBParamCollection parameters = db.CreateParamCollection();
            parameters.Add("@paramName1", yourValue1);
            parameters.Add("@paramName2", yourValue2);
            db.ExecuteSpNonQuery("sp_spName", parameters);
            db.Close();
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteSqlNonQuery(System.String)">
            <summary>
            결과 집합이 없는 SQL 문장을 실행하고 영향을 받는 행의 수를 반환한다.
            </summary>
            <param name="query">SQL 문장</param>
            <returns>SQL문장에 의해 영향을 받는 행의 수를 반환한다.</returns>
            <remarks>
            INSERT/DELETE/UPDATE 문장과 같이 결과 집합이 없는 SQL 문장을 수행할 때 사용한다.
            비록 SQL 문장이 결과 집합을 가지더라도 이 결과 집합은 무시된다. 
            </remarks>
            <example>
            <code>
            DbAccess db = DatabaseFactory.CreateDatabase(true);  // create with open
            db.ExecuteSqlNonQuery("DELETE FROM TempTable");
            db.Close();
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteSqlNonQuery(System.String,System.Data.IDataParameter[])">
            <summary>
            결과 집합이 없는 SQL 문장을 실행하고 영향을 받는 행의 수를 반환한다.
            SQL 문장의 Parameter는 Parameters 객체를 통해 설정한다.
            </summary>
            <param name="query">SQL 문장</param>
            <param name="parameters">IDataParameter객체의 매개변수 배열</param>
            <returns>SQL문장에 의해 영향을 받는 행의 수를 반환한다.</returns>
            <remarks>
            INSERT/DELETE/UPDATE 문장과 같이 결과 집합이 없는 SQL 문장을 수행할 때 사용한다.
            비록 SQL 문장이 결과 집합을 가지더라도 이 결과 집합은 무시된다. 
            </remarks>
            <example>
            <code>
            DbAccess db = DatabaseFactory.CreateDatabase(true);  // create with openn
            SqlParameters parameters = new SqlParameters[] { new SqlParameters("@id", 2) };
            db.ExecuteSqlNonQuery("DELETE FROM TempTable WHERE id=@id", parameters);
            db.Close();
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteSqlNonQuery(System.String,TheOne.Data.DBParamCollection)">
            <summary>
            결과 집합이 없는 SQL 문장을 실행하고 영향을 받는 행의 수를 반환한다.
            SQL 문장의 매개변수는 <see cref="T:TheOne.Data.DBParamCollection"/> 클래스를 통해 설정한다.
            </summary>
            <param name="query">SQL문장</param>
            <param name="parameters"><see cref="T:TheOne.Data.DBParamCollection"/> 객체.</param>
            <returns>SQL문장에 의해 영향을 받는 행의 수를 반환한다.</returns>
            <remarks>
            INSERT/DELETE/UPDATE 문장과 같이 결과 집합이 없는 SQL 문장을 수행할 때 사용한다.
            비록 SQL 문장이 결과 집합을 가지더라도 이 결과 집합은 무시되며
            SQL 문장의 매개변수는 Parameter 객체 컬렉션인 <see cref="T:TheOne.Data.DBParamCollection"/> 클래스를 통해 설정한다.
            </remarks>
            <example>
            <code>
            DbAccess db = DatabaseFactory.CreateDatabase(true);  // create with open
            DBParamCollection parameters = db.CreateParamCollection();
            parameters.Add("@id", 2);
            db.ExecuteSqlNonQuery("DELETE FROM TempTable WHERE id=@id", parameters);
            db.Close();
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteSqlNonQuery(System.String,System.Object[])">
            <summary>
            결과 집합이 없는 SQL 문장을 실행하고 영향을 받는 행의 수를 반환한다.
            SQL 문장의 Parameter는 가변 매개변수를 통해 설정한다.
            </summary>
            <param name="query">SQL문장</param>
            <param name="args">매개변수 값들(가변매개변수)</param>
            <returns>SQL문장에 의해 영향을 받는 행의 수를 반환한다.</returns>
            <remarks>
            INSERT/DELETE/UPDATE 문장과 같이 결과 집합이 없는 SQL 문장을 수행할 때 사용한다.
            비록 SQL 문장이 결과 집합을 가지더라도 이 결과 집합은 무시되며
            SQL 문장의 매개변수는 @p0, @p1, @p2, ... 의 이름 형식을 갖어야 한다.
            </remarks>
            <example>
            <code>
            DbAccess db = DatabaseFactory.CreateDatabase(true);  // create with open
            db.ExecuteSqlNonQuery("DELETE FROM TempTable WHERE id=@p0", 2);
            db.Close();
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteSpScalar(System.String)">
            <summary>
            단일값을 반환하는 저장 프로시저를 실행하고 결과를 반환한다.
            </summary>
            <param name="procedureName">저장 프로시저 이름</param>
            <returns>저장 프로시저의 scalar 값을 반환한다.</returns>
            <remarks>
            Scalar 값이라 함은 첫번째 결과 집합의 첫번째 행, 첫번째 컬럼의 값을
            말한다.
            </remarks>
            <example>
            <code>
            DbAccess db = DatabaseFactory.CreateDatabase(true);  // create with open
            object result = db.ExecuteSpScalar("sp_SPName");
            db.Close();
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteSpScalar(System.String,System.Data.IDataParameter[])">
            <summary>
            단일값을 반환하는 저장 프로시저를 실행하고 결과를 반환한다.
            저장 프로시저의 Parameter는 Parameters 객체를 통해 설정한다.
            </summary>
            <param name="query">저장 프로시저 이름</param>
            <param name="parameters">IDataParameter객체의 매개변수 배열</param>
            <returns>저장 프로시저의 scalar 값을 반환한다.</returns>
            <remarks>
            SQL 쿼리 혹은 저장 프로시저의 scalar 값이라 함은 결과 집합의 첫 번째 행의 첫 번째 열을 말한다.
            </remarks>
            <example>
            <code>
            DbAccess db = DatabaseFactory.CreateDatabase(true);  // create with open
            DBParamCollection parameters = db.CreateParamCollection();
            parameters.Add("@paramName1", yourValue1);
            parameters.Add("@paramName2", yourValue2);
            object result = db.ExecuteSpScalar("sp_SPNAME", paramaters.ToArray() );
            db.Close();
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteSpScalar(System.String,TheOne.Data.DBParamCollection)">
            <summary>
            단일값을 반환하는 저장 프로시저를 실행하고 결과를 반환한다.
            저장 프로시져의 매개변수는 <see cref="T:TheOne.Data.DBParamCollection"/> 클래스를 통해 설정한다.
            </summary>
            <param name="query">저장 프로시저 이름</param>
            <param name="parameters"><see cref="T:TheOne.Data.DBParamCollection"/> 객체</param>
            <returns>저장 프로시저의 scalar 값을 반환한다.</returns>
            <remarks>
            SQL 쿼리 혹은 저장 프로시저의 scalar 값이라 함은 결과 집합의 첫 번째 행의 첫 번째 열을 말한다.
            매개변수는 Parameter 객체 컬렉션인 <see cref="T:TheOne.Data.DBParamCollection"/> 클래스를 통해 설정한다.
            </remarks>
            <example>
            <code>
            DbAccess db = DatabaseFactory.CreateDatabase(true);  // create with open
            DBParamCollection parameters = db.CreateParamCollection();
            parameters.Add("@param1", 20);
            parameters.Add("@param2", "value2");
            object result = db.ExecuteSpScalar("sp_SPName", parameters);
            db.Close();
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteSpScalar(System.String,System.Object[])">
            <summary>
            단일값을 반환하는 저장 프로시저를 실행하고 결과를 반환한다.
            SQL 문장의 Parameter는 가변 매개변수를 통해 설정한다.
            </summary>
            <param name="query">저장 프로시저 이름</param>
            <param name="args">매개변수 값들(가변매개변수)</param>
            <returns>저장 프로시저의 scalar 값을 반환한다.</returns>
            <remarks>
            SQL 쿼리 혹은 저장 프로시저의 scalar 값이라 함은 결과 집합의 첫 번째 행의 첫 번째 열을 말한다.
            저장 프로시져의 매개변수는 @p0, @p1, @p2, ... 의 이름 형식을 갖어야 한다.
            </remarks>
            <example>
            <code>
            DbAccess db = DatabaseFactory.CreateDatabase(true);  // create with open
            object result = db.ExecuteSpScalar("sp_SPName", 20, "value2" );
            db.Close();
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteSqlScalar(System.String)">
            <summary>
            단일값을 반환하는 SQL 문장을 실행하고 결과를 반환한다.
            </summary>
            <param name="query">SQL 문장</param>
            <returns>SQL 문장의 scalar 값을 반환한다.</returns>
            <remarks>
            SQL 쿼리 혹은 저장 프로시저의 scalar 값이라 함은 결과 집합의 첫 번째 행의 첫 번째 열을 말한다.
            </remarks>
            <example>
            <code>
            DbAccess db = DatabaseFactory.CreateDatabase(true);  // create with open
            object result = db.ExecuteSqlScalar("SELECT COUNT(*) FROM Products");
            db.Close();
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteSqlScalar(System.String,System.Data.IDataParameter[])">
            <summary>
            단일값을 반환하는 SQL 문장을 실행하고 결과를 반환한다.
            SQL 문장의 Parameter는 Parameters 객체를 통해 설정한다.
            </summary>
            <param name="query">SQL 문장</param>
            <param name="parameters">IDataParameter객체의 매개변수 배열</param>
            <returns>SQL 문장의 scalar 값을 반환한다.</returns>
            <remarks>
            Scalar 값이라 함은 첫번째 결과 집합의 첫번째 행, 첫번째 컬럼의 값을
            말한다.
            </remarks>
            <example>
            <code>
            DbAccess db = DatabaseFactory.CreateDatabase(true);  // create with open
            DBParamCollection parameters = db.CreateParamCollection();
            parameters.Add("@id", 20);
            object result = db.ExecuteSqlScalar("SELECT COUNT(*) FROM Products WHERE id > @id", paramaters.ToArray() );
            db.Close();
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteSqlScalar(System.String,TheOne.Data.DBParamCollection)">
            <summary>
            단일값을 반환하는 SQL 문장을 실행하고 결과를 반환한다.
            SQL 문장의 매개변수는 <see cref="T:TheOne.Data.DBParamCollection"/> 클래스를 통해 설정한다.
            </summary>
            <param name="query">SQL 문장</param>
            <param name="parameters"><see cref="T:TheOne.Data.DBParamCollection"/> 객체</param>
            <returns>SQL 문장의 scalar 값을 반환한다.</returns>
            <remarks>
            Scalar 값이라 함은 첫번째 결과 집합의 첫번째 행, 첫번째 컬럼의 값을 말한다.
            SQL 문장의 매개변수는 Parameter 객체 컬렉션인 <see cref="T:TheOne.Data.DBParamCollection"/> 클래스를 통해 설정한다.
            </remarks>
            <example>
            <code>
            DbAccess db = DatabaseFactory.CreateDatabase(true);  // create with open
            DBParamCollection parameters = db.CreateParamCollection();
            parameters.Add("@id", 20);
            object result = db.ExecuteSqlScalar("SELECT COUNT(*) FROM Products WHERE id &gt; @id", parameters);
            db.Close();
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteSqlScalar(System.String,System.Object[])">
            <summary>
            단일값을 반환하는 SQL 문장을 실행하고 결과를 반환한다.
            SQL 문장의 Parameter는 가변 매개변수를 통해 설정한다.
            </summary>
            <param name="query">SQL 문장</param>
            <param name="args">매개변수 값들(가변매개변수)</param>
            <returns>SQL 문장의 scalar 값을 반환한다.</returns>
            <remarks>
            Scalar 값이라 함은 첫번째 결과 집합의 첫번째 행, 첫번째 컬럼의 값을
            말한다.
            SQL 문장의 매개변수는 @p0, @p1, @p2, ... 의 이름 형식을 갖어야 한다.
            </remarks>
            <example>
            <code>
            DbAccess db = DatabaseFactory.CreateDatabase(true);  // create with open
            object result = db.ExecuteSqlScalar("SELECT COUNT(*) FROM Products WHERE id > @p0", 20);
            db.Close();
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteSpReader(System.String)">
            <summary>
            저장 프로시저를 실행하고 그 결과를 반환한다.
            </summary>
            <param name="procedureName">저장 프로시저 이름</param>
            <returns>DataReader 객체를 반환한다.</returns>
            <remarks>
            매개변수가 없으며 결과 집합을 반환하는 저장 프로시저를 호출할 때 사용한다.
            </remarks>
            <example>
            <code>
            DbAccess db = DatabaseFactory.CreateDatabase(true);  // create with open
            IDataReader reader = (IDataReader)db.ExecuteSpReader("sp_SPName");
            // use reader object
            reader.Close();
            db.Close();
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteSpReader(System.String,System.Data.IDataParameter[])">
            <summary>
            저장 프로시저를 실행하고 그 결과를 반환한다.
            저장 프로시저의 Parameter는 Parameters 객체를 통해 설정한다.
            </summary>
            <param name="procedureName">저장 프로시저 이름</param>
            <param name="parameters">IDataParameter객체의 매개변수 배열</param>
            <returns>DataReader 객체를 반환한다.</returns>
            <remarks>
            매개변수를 가지며 결과 집합을 반환하는 저장 프로시저를 호출할 때 사용한다.
            저장 프로시저의 output 매개변수는 반환된 DataReader 객체가 닫힌 후에
            사용할 수 있음에 주의해야 한다.
            </remarks>
            <example>
            <code>
            DbAccess db = DatabaseFactory.CreateDatabase(true);  // create with open
            DBParamCollection parameters = db.CreateParamCollection();
            parameters.Add("@param1", 20);
            IDataReader reader = (IDataReader)db.ExecuteSpReader("sp_SPName", parameters.ToArray() );
            // use reader object
            reader.Close();
            db.Close();
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteSpReader(System.String,System.String[],System.Object[])">
            <summary>
            저장 프로시저를 실행하고 그 결과를 반환한다.
            저장 프로시저의 Parameter는 가변 매개변수를 통해 설정한다.
            </summary>
            <param name="procedureName">저장 프로시저 이름</param>
            <param name="paramNames">저장 프로시저의 파라메터들의 이름 배열</param>
            <param name="args">매개변수 값들(가변매개변수)</param>
            <returns>DataReader 객체를 반환한다.</returns>
            <remarks>
            매개변수를 가지며 결과 집합을 반환하는 저장 프로시저를 호출할 때 사용한다.
            </remarks>
            <example>
            <code>
            DbAccess db = DatabaseFactory.CreateDatabase(true);  // create with open
            string[] paramNames = new string[] { "@param1", "@param2" };
            // invoke 저장 프로시저 with @param1 = 20, @param2 = "value2" 
            IDataReader reader = (IDataReader)db.ExecuteSpReader("sp_SPName", paramNames, 20, "value2");
            // use reader object
            reader.Close();
            db.Close();
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteSpReader(System.String,TheOne.Data.DBParamCollection)">
            <summary>
            저장 프로시저를 실행하고 그 결과를 반환한다.
            저장 프로시저의 Parameter는 Parameters 객체를 통해 설정한다.
            </summary>
            <param name="procedureName">저장 프로시저 이름</param>
            <param name="parameters">DBParamCollection 객체</param>
            <returns>DataReader 객체를 반환한다.</returns>
            <remarks>
            매개변수를 가지며 결과 집합을 반환하는 저장 프로시저를 호출할 때 사용한다.
            저장 프로시저의 output 매개변수는 반환된 DataReader 객체가 닫힌 후에
            사용할 수 있음에 주의해야 한다.
            </remarks>
            <example>
            <code>
            DbAccess db = DatabaseFactory.CreateDatabase(true);  // create with open
            DBParamCollection parameters = db.CreateParamCollection();
            parameters.Add("@param1", 20);
            IDataReader reader = (IDataReader)db.ExecuteSpReader("sp_SPName", parameters.ToArray() );
            // use reader object
            reader.Close();
            db.Close();
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteSqlReader(System.String)">
            <summary>
            SQL 문장을 실행하고 그 결과를 DataReader로 반환한다.
            </summary>
            <param name="query">SQL 문장</param>
            <returns>DataReader 객체를 반환한다.</returns>
            <remarks>
            매개변수가 없으며 결과 집합을 반환하는 SQL 문장을 호출할 때 사용한다.
            </remarks>
            <example>
            <code>
            DbAccess db = DatabaseFactory.CreateDatabase(true);  // create with open
            string query = "SELECT * FROM Products";
            IDataReader reader = (IDataReader)db.ExecuteSqlReader(query);
            // use reader object
            reader.Close();
            db.Close();
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteSqlReader(System.String,System.Data.IDataParameter[])">
            <summary>
            SQL 문장을 실행하고 그 결과를 반환한다.
            SQL 문장의 Parameter는 Parameters 객체를 통해 설정한다.
            </summary>
            <param name="query">SQL 문장</param>
            <param name="parameters">IDataParameter객체의 매개변수 배열</param>
            <returns>DataReader 객체를 반환한다.</returns>
            <remarks>
            매개변수를 가지며 결과 집합을 반환하는 SQL 문장을 호출할 때 사용한다.
            </remarks>
            <example>
            <code>
            DbAccess db = DatabaseFactory.CreateDatabase(true);  // create with open
            string query = "SELECT * FROM Products WHERE id > @id";
            DBParamCollection parameters = db.CreateParamCollection();
            parameters.Add("@id", 20);/// 
            IDataReader reader = (IDataReader)db.ExecuteSqlReader(query, parameters.ToArray() );
            // use reader object
            reader.Close();
            db.Close();
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteSqlReader(System.String,TheOne.Data.DBParamCollection)">
            <summary>
            SQL 문장을 실행하고 그 결과를 반환한다.
            SQL 문장의 매개변수는 <see cref="T:TheOne.Data.DBParamCollection"/> 클래스를 통해 설정한다.
            </summary>
            <param name="query">SQL문장</param>
            <param name="parameters"><see cref="T:TheOne.Data.DBParamCollection"/> 객체.</param>
            <returns>DataReader 객체를 반환한다.</returns>
            <remarks>
            매개변수를 가지며 결과 집합을 반환하는 SQL 문장을 호출할 때 사용한다.
            SQL 문장의 매개변수는 Parameter 객체 컬렉션인 <see cref="T:TheOne.Data.DBParamCollection"/> 클래스를 통해 설정한다.
            </remarks>
            <example>
            <code>
            DbAccess db = DatabaseFactory.CreateDatabase(true);  // create with open
            string query = "SELECT * FROM Products WHERE id &gt; @id";
            DBParamCollection parameters = db.CreateParamCollection();
            parameters.Add("@id", 20);
            IDataReader reader = (IDataReader)db.ExecuteSqlReader(query, parameters);
            // use reader object
            reader.Close();
            db.Close();
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DbAccess.ExecuteSqlReader(System.String,System.Object[])">
            <summary>
            SQL 문장을 실행하고 그 결과를 반환한다.
            SQL 문장의 Parameter는 가변 매개변수를 통해 설정한다.
            </summary>
            <param name="query">SQL문장</param>
            <param name="args">매개변수 값들(가변매개변수)</param>
            <returns>DataReader 객체를 반환한다.</returns>
            <remarks>
            매개변수를 가지며 결과 집합을 반환하는 SQL 문장을 호출할 때 사용한다.
            SQL 문장의 매개변수는 @p0, @p1, @p2, ... 의 이름 형식을 갖어야 한다.
            </remarks>
            <example>
            <code>
            DbAccess db = DatabaseFactory.CreateDatabase(true);  // create with open
            string query = "SELECT * FROM Products WHERE id > @p0";
            IDataReader reader = (IDataReader)db.ExecuteSqlReader(query, 20);
            // use reader object
            reader.Close();
            db.Close();
            </code>
            </example>
        </member>
        <member name="P:TheOne.Data.DbAccess.Connection">
            <summary>
            <see cref="T:TheOne.Data.DbAccess"/> 클래스가 사용하는 Connection 객체를 가져온다.
            </summary>
            <remarks>
            <see cref="T:TheOne.Data.DbAccess"/> 클래스의 메서드들이 제공하지 않는 ADO.NET의 기능을 사용하고자
            하는 경우, 이 속성으로 부터 Connection 객체를 구하여 사용한다.
            </remarks>
            <example>
            <code>
            SqlConnection conn = (SqlConnection)dbAccess.Connection;
            SqlCommand cmd = new SqlCommand(yourQuery, conn);
            cmd.ExecuteXmlReader();
            </code>
            </example>
        </member>
        <member name="P:TheOne.Data.DbAccess.Transaction">
            <summary>
            <see cref="T:TheOne.Data.DbAccess"/> 클래스가 사용하는 Transaction 객체를 가져온다.
            </summary>
            <remarks>
            DBAccess 클래스의 메소드들이 제공하지 않거나 특별히 Transaction 객체를
            다른 용도로 사용하고자 하는 경우, 이 속성으로 부터 Transaction 객체를
            구하여 사용할 수 있다.
            트랜잭션이 시작되지 않은 경우, 이 속성의 값은 null 이다.
            </remarks>
        </member>
        <member name="P:TheOne.Data.DbAccess.CommandTimeout">
            <summary>
            Command 객체의 CommandTimeout값을 가져오거나 설정한다.
            </summary>
            <remarks>
            이 프로퍼티에 값이 설정되면, 이 이후에 <see cref="T:TheOne.Data.DbAccess"/> 객체를 통해 수행되는 모든 
            SqlCommand 객체는 이 값을 timeout으로 사용한다.
            </remarks>
        </member>
        <member name="P:TheOne.Data.DbAccess.DefaultTableName">
            <summary>
            데이터셋의 테이블 이름이 명시적으로 주어지지 않을 때 사용되는 테이블 이름을 가져오거나 설정한다.
            </summary>
        </member>
        <member name="P:TheOne.Data.DbAccess.IsOpen">
            <summary>
            데이터베이스 소스의 현재 연결이 되었는지 확인한다.
            </summary>
            <remarks>
            true이면 연결이 열려있는 상태이고 그 외에는 false이다.
            </remarks>
        </member>
        <member name="M:TheOne.Data.Odbc.OdbcDbAccess.#ctor(System.Data.Odbc.OdbcTransaction)">
            <summary>
            지정된 <see cref="T:System.Data.Odbc.OdbcTransaction"/> 객체의 트랜잭션에 참여하는 <see cref="T:TheOne.Data.Odbc.OdbcDbAccess"/> 클래스의 새 인스턴스를 초기화한다.
            </summary>
            <param name="transaction"><see cref="T:System.Data.IDbTransaction"/> 객체</param>
        </member>
        <member name="M:TheOne.Data.Odbc.OdbcDbAccess.#ctor(System.String)">
            <summary>
            매개변수로 제공된 ConnectionString을 연결문자열로 사용하는 <see cref="T:TheOne.Data.Odbc.OdbcDbAccess"/> 클래스의 새 인스턴스를 초기화한다.
            </summary>
            <param name="connectionString">connection string</param>
        </member>
        <member name="M:TheOne.Data.Odbc.OdbcDbAccess.#ctor(System.String,System.Boolean)">
            <summary>
            매개변수로 제공된 ConnectionString을 연결문자열로 사용하는 <see cref="T:TheOne.Data.Odbc.OdbcDbAccess"/> 클래스의 새 인스턴스를 초기화한다.
            </summary>
            <exception cref="T:TheOne.Data.DBException">
            openConn 상태가 true일 때 또는 DB 접속 시도가 실패한 경우 발생한다.
            </exception>
            <param name="connectionString">connection string </param>
            <param name="openConn">Connection Open 상태</param>
        </member>
        <member name="M:TheOne.Data.Odbc.OdbcDbAccess.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            지정된 provider 명, 서버명(데이터 소스), 사용자 ID, 암호를 이용하여 연결 문자열을 만들고
            <see cref="T:TheOne.Data.Odbc.OdbcDbAccess"/> 클래스의 새 인스턴스를 초기화한다.
            </summary>
            <param name="driver">ODBC 드라이버 이름</param>
            <param name="server">서버명</param>
            <param name="userID">사용자 ID</param>
            <param name="password">암호</param>
        </member>
        <member name="M:TheOne.Data.Odbc.OdbcDbAccess.#ctor(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            지정된 driver 명, 서버명(데이터 소스), 사용자 ID, 암호를 이용하여 연결 문자열을 만들고
            <see cref="T:TheOne.Data.Odbc.OdbcDbAccess"/> 클래스의 새 인스턴스를 초기화한다.<br/>	
            </summary>
            <remarks>
            연결할 데이터베이스는 사용자 ID의 기본 데이타베이스를 사용한다.
            </remarks>
            <exception cref="T:TheOne.Data.DBException">
            openConn 상태가 true일 때 또는 DB 접속 시도가 실패한 경우 발생한다.
            </exception>
            <param name="driver">ODBC 드라이버 이름</param>
            <param name="server">서버명</param>
            <param name="userID">사용자 ID</param>
            <param name="password">암호</param>
            <param name="openConn">Connection open 상태</param>
        </member>
        <member name="M:TheOne.Data.Odbc.OdbcDbAccess.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            지정된 driver 명, 서버명(데이터 소스), 사용자 ID, 암호를 이용하여 연결 문자열을 만들고
            <see cref="T:TheOne.Data.Odbc.OdbcDbAccess"/> 클래스의 새 인스턴스를 초기화한다.
            </summary>
            <param name="driver">ODBC 드라이버 이름</param>
            <param name="server">서버명</param>
            <param name="database"></param>
            <param name="userID">사용자 ID</param>
            <param name="password">암호</param>
        </member>
        <member name="M:TheOne.Data.Odbc.OdbcDbAccess.#ctor(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            지정된 driver 명, 서버명(데이터 소스), 사용자 ID, 암호를 이용하여 연결 문자열을 만들고
            <see cref="T:TheOne.Data.Odbc.OdbcDbAccess"/> 클래스의 새 인스턴스를 초기화한다.
            </summary>
            <exception cref="T:TheOne.Data.DBException">
            openConn 상태가 true일 때 또는 DB 접속 시도가 실패한 경우 발생한다.
            </exception>
            <param name="driver">ODBC 드라이버 이름</param>
            <param name="server">서버명</param>
            <param name="database"></param>
            <param name="userID">사용자 ID</param>
            <param name="password">암호</param>
            <param name="openConn">Connection open 상태</param>
        </member>
        <member name="M:TheOne.Data.Odbc.OdbcDbAccess.InitConnection(System.String,System.Boolean)">
            <summary>
            매개변수로 제공된 ConnectionString을 연결문자열로 사용하는 <see cref="T:System.Data.Odbc.OdbcConnection"/> 클래스의 새 인스턴스를 초기화한다.
            </summary>
            <param name="connectionString">Connection String </param>
            <param name="openConn">Connection open 상태</param>
        </member>
        <member name="M:TheOne.Data.Odbc.OdbcDbAccess.Open">
            <summary>
            데이터베이스에 연결을 한다.
            </summary>
            <exception cref="T:TheOne.Data.DBException">
            DB 접속시 오류가 발생하면 발생한다. 실제 예외인 OdbcException 은
            InnerException 을 통해 접근이 가능하다.
            </exception>
        </member>
        <member name="M:TheOne.Data.Odbc.OdbcDbAccess.Close">
            <summary>
            데이터베이스에 대한 연결을 닫는다.
            </summary>
            <exception cref="T:TheOne.Data.DBException">
            DB 접속시 오류가 발생하면 발생한다. 실제 예외인 OdbcException 은
            InnerException 을 통해 접근이 가능하다.
            </exception>
        </member>
        <member name="M:TheOne.Data.Odbc.OdbcDbAccess.PrepareExecution(System.Data.Odbc.OdbcCommand,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
             Database Connection Open을 수행하고 매개변수를 Command 객체에 추가한 다음 트랜잭션 객체와 Command 객체를 연결한다. 
             ExecuteXXX 메서드에서 공통으로 수행하는 Command 수행 준비 작업이다.
            </summary>
            <param name="cmd"></param>
            <param name="commandType"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:TheOne.Data.Odbc.OdbcDbAccess.PrepareExecution(System.Data.Odbc.OdbcCommand,System.Data.IDataParameter[])">
            <summary>
            Database Connection Open을 수행하고 매개변수를 Command 객체에 추가한 다음 트랜잭션 객체와 Command 객체를 연결한다. 
            ExecuteXXX 메서드에서 공통으로 수행하는 Command 수행 준비 작업이다.
            </summary>
            <param name="cmd"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:TheOne.Data.Odbc.OdbcDbAccess.CreateDBException(System.String,System.Data.Odbc.OdbcException)">
            <summary>
            ExecuteXXX 메서드 및 트랜잭션 메서드에서 예외발생시 수행하는 작업이다.
            </summary>
            <param name="commandText"></param>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:TheOne.Data.Odbc.OdbcDbAccess.CreateDBException(System.String,System.String)">
            <summary>
            트랜잭션 관련 메서드에서 예외 발생시 수행하는 작업이다.
            </summary>
            <param name="message"></param>
            <param name="commandText"></param>
            <returns></returns>
        </member>
        <member name="M:TheOne.Data.Odbc.OdbcDbAccess.CreateCmd(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            <see cref="T:System.Data.Odbc.OdbcCommand"/> 클래스의 새 인스턴스를 만들고 실행될 구문 또는 저장 프로시저명과 명령 형식, 매개변수 정보등을 설정한다.
            </summary>
            <param name="commandText">실행될 구문 또는 저장 프로시저명</param>
            <param name="commandType">명령 형식(CommandType)을 지정</param>
            <param name="parameters">OdbcCommand에 추가될 매개변수 정보</param>
            <returns><see cref="T:System.Data.Odbc.OdbcCommand"/> 객체를 반환한다.</returns>
        </member>
        <member name="M:TheOne.Data.Odbc.OdbcDbAccess.ExecuteCmd(System.Data.IDbCommand,System.String,System.Data.DataSet,System.Data.IDataParameter[])">
            <summary>
            일반적인 SQL 문장 혹은 저장 프로시저를 실행한다.
            실행결과는 매개변수로 지정된 DataSet에 채운다.
            </summary>
            <exception cref="T:TheOne.Data.DBException">
            지정된 커맨드를 수행하는 도중 DB 측에서 오류가 발생하면 발생한다.
            구체적인 상세 예외는 InnerException을 통해 접근이 가능하다.
            </exception>
            <param name="command">SQL 문장 또는 저장 프로시저를 실행할 Command 객체</param>
            <param name="tableName">결과를 저장할 DataSet 내의 테이블 이름</param>
            <param name="ds">결과를 저장할 DataSet 객체</param>
            <param name="parameters">IDataParameter객체의 매개변수 배열</param>
            <returns>SQL 문장(SP) 수행후 반환된 첫번째 결과 집합의 행의 수를 반환한다.</returns>
        </member>
        <member name="M:TheOne.Data.Odbc.OdbcDbAccess.ExecuteCmdNonQuery(System.Data.IDbCommand,System.Data.IDataParameter[])">
            <summary>
            결과 집합이 없는 SQL 문장 혹은 저장 프로시저를 실행한다.
            </summary>
            <exception cref="T:TheOne.Data.DBException">
            지정된 커맨드를 수행하는 도중 DB 측에서 오류가 발생하면 발생한다.
            구체적인 상세 예외는 InnerException을 통해 접근이 가능하다.
            </exception>
            <param name="command">SQL 문장 또는 저장 프로시저를 실행할 Command 객체</param>
            <param name="parameters">IDataParameter객체의 매개변수 배열</param>
            <returns>SQL 문장(SP) 의 실행 후 영향을 받는 행의 수를 반환한다.</returns>
        </member>
        <member name="M:TheOne.Data.Odbc.OdbcDbAccess.ExecuteCmdReader(System.Data.IDbCommand,System.Data.IDataParameter[])">
            <summary>
            DataReader를 반환하는 SQL 문장 혹은 저장 프로시저를 실행한다.
            </summary>
            <exception cref="T:TheOne.Data.DBException">
            지정된 커맨드를 수행하는 도중 DB 측에서 오류가 발생하면 발생한다.
            구체적인 상세 예외는 InnerException을 통해 접근이 가능하다.
            </exception>
            <param name="command">SQL 문장 또는 저장 프로시저를 실행할 Command 객체</param>
            <param name="parameters">IDataParameter객체의 매개변수 배열</param>
            <returns><see cref="T:System.Data.Odbc.OdbcDataReader"/> 객체를 반환한다.</returns>
        </member>
        <member name="M:TheOne.Data.Odbc.OdbcDbAccess.ExecuteCmdScalar(System.Data.IDbCommand,System.Data.IDataParameter[])">
            <summary>
            단일 값(scalar value)을 반환하는 SQL 문장 혹은 저장 프로시저를 실행한다.
            </summary>
            <exception cref="T:TheOne.Data.DBException">
            지정된 커맨드를 수행하는 도중 DB 측에서 오류가 발생하면 발생한다.
            구체적인 상세 예외는 InnerException을 통해 접근이 가능하다.
            </exception>
            <remarks>
            SQL 쿼리 혹은 저장 프로시저의 scalar 값이라 함은 결과 집합의 첫 번째 행의 첫 번째 열을 말한다.
            </remarks>
            <param name="command">SQL 문장 또는 저장 프로시저를 실행할 Command 객체</param>
            <param name="parameters">IDataParameter객체의 매개변수 배열</param>
            <returns>SQL 문장 혹은 저장 프로시저 결과에 대한 scalar 값을 반환한다.</returns>
        </member>
        <member name="M:TheOne.Data.Odbc.OdbcDbAccess.ExecuteCmdTableMapping(System.Data.IDbCommand,System.String,System.String[],System.Data.DataSet,System.Data.IDataParameter[])">
            <summary>
            2개 이상의 결과셋을 반환하는 SQL 문장 혹은 저장 프로시저를 수행하고
            결과를 테이블 매핑을 통해 지정된 DataSet 에 채운다.
            </summary>
            <exception cref="T:TheOne.Data.DBException">
            지정된 커맨드를 수행하는 도중 DB 측에서 오류가 발생하면 발생한다.
            구체적인 상세 예외는 InnerException을 통해 접근이 가능하다.
            </exception>
            <param name="command">SQL 문장 또는 저장 프로시저를 실행할 Command 객체</param>
            <param name="tableName">결과를 저장할 DataSet 내의 테이블 이름</param>
            <param name="mappingNames">DataSet안의 Table이름이과의 일치</param>
            <param name="ds">DataSet의 DataSet을 리턴한다.</param>
            <param name="parameters">IDataParameter객체의 매개변수 배열</param>
            <returns>SQL 문장(SP) 수행후 첫번째 결과 집합의 행의 수를 반환한다.</returns>
        </member>
        <member name="M:TheOne.Data.Odbc.OdbcDbAccess.ExecuteCmd(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.Data.IDataParameter[])">
            <summary>
            일반적인 SQL 문장 혹은 저장 프로시저를 실행한다.
            실행결과는 매개변수로 지정된 DataSet에 채운다.
            </summary>
            <exception cref="T:TheOne.Data.DBException">
            지정된 커맨드를 수행하는 도중 DB 측에서 오류가 발생하면 발생한다.
            구체적인 상세 예외는 InnerException을 통해 접근이 가능하다.
            </exception>
            <param name="commandText">저장 프로시저 이름 또는 SQL쿼리 내용</param>
            <param name="commandType">commandText 매개변수가 어떠한 명령인지를 나타내는 CommandType</param>
            <param name="tableName">결과를 저장할 DataSet 내의 테이블 이름</param>
            <param name="ds">결과를 저장할 DataSet 객체</param>
            <param name="parameters">IDataParameter객체의 매개변수 배열</param>
            <returns>SQL 문장(SP) 수행후 반환된 첫번째 결과 집합의 행의 수를 반환한다.</returns>
        </member>
        <member name="M:TheOne.Data.Odbc.OdbcDbAccess.ExecuteCmdNonQuery(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            결과 집합이 없는 SQL 문장 혹은 저장 프로시저를 실행한다.
            </summary>
            <exception cref="T:TheOne.Data.DBException">
            지정된 커맨드를 수행하는 도중 DB 측에서 오류가 발생하면 발생한다.
            구체적인 상세 예외는 InnerException을 통해 접근이 가능하다.
            </exception>
            <param name="commandText">저장 프로시저 이름 또는 SQL쿼리내용</param>
            <param name="commandType">commandText 매개변수가 어떠한 명령인지를 나타내는 CommandType</param>
            <param name="parameters">IDataParameter객체의 매개변수 배열</param>
            <returns>SQL 문장(SP) 의 실행 후 영향을 받는 행의 수를 반환한다.</returns>
        </member>
        <member name="M:TheOne.Data.Odbc.OdbcDbAccess.ExecuteCmdReader(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            DataReader를 반환하는 SQL 문장 혹은 저장 프로시저를 실행한다.
            </summary>
            <exception cref="T:TheOne.Data.DBException">
            지정된 커맨드를 수행하는 도중 DB 측에서 오류가 발생하면 발생한다.
            구체적인 상세 예외는 InnerException을 통해 접근이 가능하다.
            </exception>
            <param name="commandText">저장 프로시저 이름 또는 SQL쿼리내용</param>
            <param name="commandType">commandText 매개변수가 어떠한 명령인지를 나타내는 CommandType</param>
            <param name="parameters">IDataParameter객체의 매개변수 배열</param>
            <returns><see cref="T:System.Data.Odbc.OdbcDataReader"/> 객체를 반환한다.</returns>
        </member>
        <member name="M:TheOne.Data.Odbc.OdbcDbAccess.ExecuteCmdScalar(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            단일 값(scalar value)을 반환하는 SQL 문장 혹은 저장 프로시저를 실행한다.
            </summary>
            <exception cref="T:TheOne.Data.DBException">
            지정된 커맨드를 수행하는 도중 DB 측에서 오류가 발생하면 발생한다.
            구체적인 상세 예외는 InnerException을 통해 접근이 가능하다.
            </exception>
            <remarks>
            SQL 쿼리 혹은 저장 프로시저의 스칼라 값이라 함은 결과 집합의 첫번째 레코드의
            첫번째 컬럼의 값을 말한다.
            </remarks>
            <param name="commandText">저장 프로시저 이름 또는 SQL쿼리내용</param>
            <param name="commandType">commandText 매개변수가 어떠한 명령인지를 나타내는 CommandType</param>
            <param name="parameters">IDataParameter객체의 매개변수 배열</param>
            <returns>SQL 문장 혹은 저장 프로시저 결과에 대한 scalar 값을 반환한다.</returns>
        </member>
        <member name="M:TheOne.Data.Odbc.OdbcDbAccess.ExecuteCmdTableMapping(System.String,System.Data.CommandType,System.String,System.String[],System.Data.DataSet,System.Data.IDataParameter[])">
            <summary>
            2개 이상의 결과셋을 반환하는 SQL 문장 혹은 저장 프로시저를 수행하고
            결과를 테이블 매핑을 통해 지정된 DataSet 에 채운다.
            </summary>
            <exception cref="T:TheOne.Data.DBException">
            지정된 커맨드를 수행하는 도중 DB 측에서 오류가 발생하면 발생한다.
            구체적인 상세 예외는 InnerException을 통해 접근이 가능하다.
            </exception>
            <param name="commandText">저장 프로시저 이름 또는 SQL쿼리내용</param>
            <param name="tableName">결과를 저장할 DataSet 내의 테이블 이름</param>
            <param name="mappingNames">DataSet안의 Table이름이과의 일치</param>
            <param name="commandType">commandText 매개변수가 어떠한 명령인지를 나타내는 CommandType</param>
            <param name="ds">DataSet의 DataSet을 리턴한다.</param>
            <param name="parameters">IDataParameter객체의 매개변수 배열</param>
            <returns>SQL 문장(SP) 수행후 첫번째 결과 집합의 행의 수를 반환한다.</returns>
        </member>
        <member name="M:TheOne.Data.Odbc.OdbcDbAccess.CreateParameter">
            <summary>
            <see cref="T:System.Data.Odbc.OdbcParameter"/> 클래스의 새 인스턴스를 초기화하고 반환한다.
            </summary>
            <returns><see cref="T:System.Data.Odbc.OdbcParameter"/> 객체를 반환한다.</returns>
        </member>
        <member name="M:TheOne.Data.Odbc.OdbcDbAccess.CreateParameter(System.String,System.Object)">
            <summary>
            지정된 이름/값으로 <see cref="T:System.Data.Odbc.OdbcParameter"/> 클래스의 새 인스턴스를 초기화하고 반환한다.
            </summary>
            <param name="paramName">Parameter 이름</param>
            <param name="paramValue">Parameter 값</param>
            <returns><see cref="T:System.Data.Odbc.OdbcParameter"/> 객체를 반환한다.</returns>
        </member>
        <member name="M:TheOne.Data.Odbc.OdbcDbAccess.CreateParamCollection">
            <summary>
            <see cref="T:TheOne.Data.Odbc.OdbcParamCollection"/> 클래스의 새 인스턴스를 초기화하고 반환한다.
            </summary>
            <returns><see cref="T:TheOne.Data.Odbc.OdbcParamCollection"/> 객체를 반환한다.</returns>
        </member>
        <member name="M:TheOne.Data.Odbc.OdbcDbAccess.CreateParamCollection(System.Boolean)">
            <summary>
            지정된 조건을 사용하여 <see cref="T:TheOne.Data.Odbc.OdbcParamCollection"/> 클래스의 새 인스턴스를 초기화하고 반환한다.
            </summary>
            <param name="useDBNull">true이면 Parameter 추가시에 닷넷 null을 가지는 객체의 Value값을 DBNull.Value 값으로 자동 변환한다.</param>
            <returns><see cref="T:TheOne.Data.Odbc.OdbcParamCollection"/> 객체를 반환한다.</returns>
        </member>
        <member name="M:TheOne.Data.Odbc.OdbcDbAccess.BeginTrans(System.Data.IsolationLevel)">
            <summary>
            로컬 트랜잭션을 시작한다.
            </summary>
            <param name="level">트랜잭션 IsolationLevel</param>
            <remarks>
            이 메서드 호출 후, 모든 커맨드는 CommitTrans/RollbackTrans 메서드가 호출
            되기 전까지 트랜잭션 문맥하에서 수행되게 된다.
            COM+를 사용하지 않을 때, 수동 트랜잭션(manual transaction)으로서 사용되며
            Transaction 객체는 이 클래스의 필드로서 저장된다. Transaction 객체에 대한
            접근은 <see cref="P:TheOne.Data.Odbc.OdbcDbAccess.Transaction">Transaction</see>속성을 통해 가능하다.
            트랜잭션은 해당 DB에 대해서만 수행되며 분산 트랜잭션이 아니다. 따라서
            CommitTrans 메서드나 RollbackTrans 메서드를 통해 트랜잭션을 commit 혹은
            rollback 해야 한다.
            </remarks>
        </member>
        <member name="M:TheOne.Data.Odbc.OdbcDbAccess.CommitTrans">
            <summary>
            로컬 트랜잭션을 Commit 한다.
            </summary>
            <remarks>
            BeginTrans 메서드를 통해 시작된 트랜잭션을 commit 한다. 이 메서드가
            호출되기 전에 <see cref="M:TheOne.Data.Odbc.OdbcDbAccess.BeginTrans(System.Data.IsolationLevel)">BeginTrans</see>가 호출되어야 한다.
            이 메서드는 COM+의 자동 트랜잭션(automatic transaction)을 사용하지 않을
            때에만 사용되어야 한다.
            </remarks>
        </member>
        <member name="M:TheOne.Data.Odbc.OdbcDbAccess.RollbackTrans">
            <summary>
            로컬 트랜잭션을 Rollback 한다.
            </summary>
            <remarks>
            BeginTrans 메서드를 통해 시작된 트랜잭션을 rollback 한다. 이 메서드가
            호출되기 전에 <see cref="M:TheOne.Data.Odbc.OdbcDbAccess.BeginTrans(System.Data.IsolationLevel)">BeginTrans</see>가 호출되어야 한다.
            이 메서드는 COM+의 자동 트랜잭션(automatic transaction)을 사용하지 않을
            때에만 사용되어야 한다.
            </remarks>
        </member>
        <member name="M:TheOne.Data.Odbc.OdbcDbAccess.GetNativeError(System.Data.Odbc.OdbcException)">
            <summary>
            OdbcException에서 오류 코드를 읽는다.
            OdbcException의 경우, DB 오류가 중첩 오류로 기록되기 때문에 추가 처리가 필요하다.
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:TheOne.Data.Odbc.OdbcDbAccess.GetMessage(System.Data.Odbc.OdbcException)">
            <summary>
            OdbcException에서 오류 코드를 읽는다.
            OdbcException의 경우, DB 오류가 중첩 오류로 기록되기 때문에 추가 처리가 필요하다.
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="P:TheOne.Data.Odbc.OdbcDbAccess.Connection">
            <summary>
            <see cref="T:TheOne.Data.DbAccess"/> 클래스가 사용하는 Connection 객체를 가져온다.
            </summary>
        </member>
        <member name="P:TheOne.Data.Odbc.OdbcDbAccess.Transaction">
            <summary>
            <see cref="T:TheOne.Data.DbAccess"/> 클래스가 사용하는 Transaction 객체를 가져온다.
            </summary>
        </member>
        <member name="P:TheOne.Data.Odbc.OdbcDbAccess.CommandTimeout">
            <summary>
            Command 객체의 CommandTimeout값을 가져오거나 가져오거나 설정한다.
            </summary>
        </member>
        <member name="T:TheOne.Data.OleDb.OleDbParamCollection">
            <summary>
            OldDbParameter 객체들에 대한 컬렉션을 제공한다.
            </summary>
            <remarks>
            Parameter들에 대한 컬렉션으로써 Parameter 이름을 통해 Parameter 객체에
            접근 가능하도록 해준다. 또한 이 컬렉션은 null 로 설정된 Parameter 객체의
            값을 DBNull 로 변경해 주기위한 SetNullToDBNull 메서드를 제공한다.
            OleParamCollection 클래스는 Parameter의 이름으로 Parameter 객체에 접근 가능하도록 설정을 하지만
            실제 OleDb 프로바이더는 Parameter의 이름을 알지 못한다. 
            </remarks>
        </member>
        <member name="T:TheOne.Data.DBParamCollection">
            <summary>
            Command 개체에 대한 매개 변수의 컬렉션을 나타낸다. 이 클래스를 상속 받아 데이터 소스에 액세스하는 .NET Framework 데이터 공급자에 의해 구현된다.
            </summary>
            <remarks>
            Parameter들에 대한 컬렉션으로써 Parameter 이름을 통해 Parameter 객체에
            접근 가능하도록 해준다. 또한 이 컬렉션은 null 로 설정된 Parameter 객체의
            값을 DBNull 로 변경해 주기위한 SetNullToDBNull 메서드를 제공한다.
            </remarks>
        </member>
        <member name="F:TheOne.Data.DBParamCollection.list">
            <summary>
            매개변수 리스트
            </summary>
            <remarks>
            ArrayList, ListDiectionary, Hashtable 등을 사용하면 개발이 편리하지만
            상대적으로 무겁기 때문에 배열로 구현하였다.
            </remarks>
        </member>
        <member name="F:TheOne.Data.DBParamCollection.capacity">
            <summary>
            용량 
            </summary>
        </member>
        <member name="F:TheOne.Data.DBParamCollection.count">
            <summary>
            현재 설정된 매개변수
            </summary>
        </member>
        <member name="F:TheOne.Data.DBParamCollection.useDBNull">
            <summary>
             닷넷 null 값을 DBNull로 변환
            </summary>
        </member>
        <member name="M:TheOne.Data.DBParamCollection.#ctor(System.Boolean)">
            <summary>
            지정된 조건으로 <see cref="T:TheOne.Data.DBParamCollection"/> 클래스의 새 인스턴스를 초기화한다.
            </summary>
            <param name="useDBNull">닷넷 null 값을 DBNull 값으로의 자동 변화 여부를 설정한다.</param>
        </member>
        <member name="M:TheOne.Data.DBParamCollection.#ctor">
            <summary>
            <see cref="T:TheOne.Data.DBParamCollection"/> 클래스의 새 인스턴스를 초기화한다.
            </summary>
        </member>
        <member name="M:TheOne.Data.DBParamCollection.AddInternal(System.Data.IDataParameter)">
            <summary>
            <see cref="T:TheOne.Data.DBParamCollection"/>에 지정된 Parameter 객체를 배열에 추가한다.
            </summary>
            <param name="param">추가할 IDataParameter 객체</param>
        </member>
        <member name="M:TheOne.Data.DBParamCollection.RemoveInternal(System.Data.IDataParameter)">
            <summary>
            배열에서 지정된 Parameter 객체를 제거한다.
            </summary>
            <param name="param">제거할 IDataParameter 객체</param> 
        </member>
        <member name="M:TheOne.Data.DBParamCollection.Find(System.String)">
            <summary>
            Parameter 객체를 이름으로 찾아 배열의 인덱스를 가져온다.
            </summary>
            <param name="name">찾을 Parameter 객체의 이름</param>
            <returns>Parameter 객체의 인덱스 값을 반환한다. 만일 객체를 찾지 못하면 -1을 반환한다.</returns> 
        </member>
        <member name="M:TheOne.Data.DBParamCollection.Find(System.Data.IDataParameter)">
            <summary>
            Parameter 객체를 찾아 배열의 인덱스를 가져온다.
            </summary>
            <param name="param">찾을 Parameter 객체</param>
            <returns>Parameter 객체의 인덱스 값을 반환한다. 만일 객체를 찾지 못하면 -1을 반환한다..</returns>
        </member>
        <member name="M:TheOne.Data.DBParamCollection.CreateParameter(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Object)">
            <summary>
            Data Provier에 해당하는 IDataParameter 객체의 인스턴스를 만든다.
            </summary>
            <param name="name">Parameter 이름</param>
            <param name="type">Parameter 타입</param>
            <param name="size">Parameter 길이</param>
            <param name="direction">Parameter 방향</param>
            <param name="value">Parameter 값.</param>
            <returns>추가된 IDataParameter 객체</returns>
        </member>
        <member name="M:TheOne.Data.DBParamCollection.Add(System.String,System.Object)">
            <summary>
            Parameter를 추가 한다.
            </summary>
            <param name="parameterName">Parameter 이름</param>
            <param name="paramValue">Parameter 값</param>
            <returns>추가된 Parameter 객체</returns>
            <remarks>
            이 메서드는 Parameter 이름과 값만을 이용하여 Parameter 객체를 초기화 한다.
            Parameter의 타입이 명시되지 않기 때문에 권장할만한 패턴은 아니다.
            <br/><br/>
            Parmeter는 Parameter 이름과 더불어 타입, 길이를 명시해 주는 것이 좋다.
            Int, DateTime 과 같이 길이가 고정되어 있는 타입에 대해서는 길이를 주지 않아도 되지만
            VarChar 와 같이 가변 길이의 데이터 타입은 길이를 명시 해주는 것이 DB의 부하를
            조금이나마 줄여 주는 것이다.
            </remarks>
        </member>
        <member name="M:TheOne.Data.DBParamCollection.Add(System.String,System.Data.DbType)">
            <summary>
            Parameter를 추가 한다.
            </summary>
            <param name="parameterName">Parameter 이름</param>
            <param name="dbType">Parameter 타입</param>
            <returns>추가된 Parameter 객체</returns>
            <remarks>
            Parmeter는 Parameter 이름과 더불어 타입, 길이를 명시해 주는 것이 좋다.
            Int, DateTime 과 같이 길이가 고정되어 있는 타입에 대해서는 길이를 주지 않아도 되지만
            VarChar 와 같이 가변 길이의 데이터 타입은 길이를 명시 해주는 것이 DB의 부하를
            조금이나마 줄여 주는 것이다.
            </remarks>
        </member>
        <member name="M:TheOne.Data.DBParamCollection.Add(System.String,System.Data.DbType,System.Object)">
            <summary>
            Parameter를 추가 한다.
            </summary>
            <param name="parameterName">Parameter 이름</param>
            <param name="dbType">Parameter 타입</param>
            <param name="paramValue">Parameter 값</param>
            <returns>추가된 Parameter 객체</returns>
            <remarks>
            Parmeter는 Parameter 이름과 더불어 타입, 길이를 명시해 주는 것이 좋다.
            Int, DateTime 과 같이 길이가 고정되어 있는 타입에 대해서는 길이를 주지 않아도 되지만
            VarChar 와 같이 가변 길이의 데이터 타입은 길이를 명시 해주는 것이 DB의 부하를
            조금이나마 줄여 주는 것이다.
            </remarks>
        </member>
        <member name="M:TheOne.Data.DBParamCollection.Add(System.String,System.Data.DbType,System.Int32,System.Object)">
            <summary>
            Parameter를 추가 한다.
            </summary>
            <param name="parameterName">Parameter 이름</param>
            <param name="dbType">Parameter 타입</param>
            <param name="size">Parameter 길이</param>
            <param name="paramValue">Parameter 값</param>
            <returns>추가된 Parameter 객체</returns>
            <remarks>
            Parmeter는 Parameter 이름과 더불어 타입, 길이를 명시해 주는 것이 좋다.
            Int, DateTime 과 같이 길이가 고정되어 있는 타입에 대해서는 길이를 주지 않아도 되지만
            VarChar 와 같이 가변 길이의 데이터 타입은 길이를 명시 해주는 것이 DB의 부하를
            조금이나마 줄여 주는 것이다.
            </remarks>
        </member>
        <member name="M:TheOne.Data.DBParamCollection.Add(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Object)">
            <summary>
            Parameter를 추가 한다.
            </summary>
            <param name="parameterName">Parameter 이름</param>
            <param name="dbType">Parameter 타입</param>
            <param name="size">Parameter 길이</param>
            <param name="direction">Parameter 방향(input, output, return)</param>
            <param name="paramValue">Parameter 값</param>
            <returns>추가된 Parameter 객체</returns>
            <remarks>
            Parmeter는 Parameter 이름과 더불어 타입, 길이를 명시해 주는 것이 좋다.
            Int, DateTime 과 같이 길이가 고정되어 있는 타입에 대해서는 길이를 주지 않아도 되지만
            VarChar 와 같이 가변 길이의 데이터 타입은 길이를 명시 해주는 것이 DB의 부하를
            조금이나마 줄여 주는 것이다.
            <br/>
            문자열 출력 매개변수를 추가하는 경우에는 출력값의 최대 길이를 지정해야 한다. 문자열 출력 매개변수의 길이를 0으로 
            지정하면 예외가 발생하고, 최대 길이보다 작은 값을 지정하는 경우에는 실제값의 일부분만 출력될 수 있다.
            </remarks>
        </member>
        <member name="M:TheOne.Data.DBParamCollection.Remove(System.String)">
            <summary>
            지정된 이름의 Parameter를 컬렉션에서 제거한다.
            </summary>
            <param name="name">Parameter 이름</param>
            <returns>제거된 Parameter 객체</returns>
        </member>
        <member name="M:TheOne.Data.DBParamCollection.RemoveAt(System.Int32)">
            <summary>
            지정된 인덱스의 Parameter를 컬렉션에서 제거한다.
            </summary>
            <param name="index">Parameter 인덱스</param>
            <returns>제거된 Parameter 객체</returns>
        </member>
        <member name="M:TheOne.Data.DBParamCollection.SetNullToDBNull">
            <summary>
            컬렉션에 있는 Parameter 객체들에 대하여 닷넷 null 값을 DBNull로 변환한다.
            </summary>
        </member>
        <member name="M:TheOne.Data.DBParamCollection.ToArray">
            <summary>
            컬렉션의 Parameter들을 IDataParameter 배열로 변환하여 반환한다.
            </summary>
            <returns>Parameter의 배열로 반환한다.</returns>
        </member>
        <member name="M:TheOne.Data.DBParamCollection.GetEnumerator">
            <summary>
            컬렉션에서 반복할 수 있는 <see cref="T:TheOne.Data.ParamEnumerator"/> 클래스의 새 인스턴스를 초기화한다.
            </summary>
            <returns><see cref="T:TheOne.Data.ParamEnumerator"/> 객체를 반환한다.</returns>
        </member>
        <member name="P:TheOne.Data.DBParamCollection.Count">
            <summary>
            컬렉션에 있는 Parameter 객체 개수를 가져온다.
            </summary>
        </member>
        <member name="P:TheOne.Data.DBParamCollection.Item(System.String)">
            <summary>
            지정된 이름을 갖는 Parameter 객체를 가져온다.
            </summary>
        </member>
        <member name="P:TheOne.Data.DBParamCollection.Item(System.Int32)">
            <summary>
            지정된 인덱스를 갖는 Parameter 객체를 가져온다.
            </summary>
        </member>
        <member name="M:TheOne.Data.OleDb.OleDbParamCollection.#ctor">
            <summary>
            <see cref="T:TheOne.Data.OleDb.OleDbParamCollection"/> 클래스의 새 인스턴스를 초기화한다.
            </summary>
        </member>
        <member name="M:TheOne.Data.OleDb.OleDbParamCollection.#ctor(System.Boolean)">
            <summary>
            지정된 조건으로 <see cref="T:TheOne.Data.OleDb.OleDbParamCollection"/> 클래스의 새 인스턴스를 초기화한다.
            </summary>
            <param name="useDBNull">true이면 추가되는 Parameter의 닷넷 null 값을 DBNull로 자동변환한다.</param>
        </member>
        <member name="M:TheOne.Data.OleDb.OleDbParamCollection.Add(System.String,System.Object)">
            <summary>
            <see cref="T:System.Data.OleDb.OleDbParameter"/>를 <see cref="T:TheOne.Data.OleDb.OleDbParamCollection"/>에 추가 한다.
            </summary>
            <param name="parameterName">Parameter 이름</param>
            <param name="paramValue">Parameter 값</param>
            <returns><see cref="T:System.Data.OleDb.OleDbParameter"/> 객체를 반환한다.</returns>
            <remarks>
            이 메서드는 Parameter 이름과 값만을 이용하여 IDataParameter 객체를 초기화 한다.
            Parameter의 타입이 명시되지 않기 때문에 권장할만한 패턴은 아니다.
            <br/><br/>
            OleDbParameter는 Parameter의 이름과 상관없이 추가된 순서에 영향을 받는다. 
            따라서 Parameter를 추가하는 순서는 쿼리문의 매개변수 설정 순서와 같아야 한다.
            Parameter를 추가할 때 Parameter의 타입과 길이를 명시해 주는 것이 좋다.
            Int, DateTime 과 같이 길이가 고정되어 있는 타입에 대해서는 길이를 주지 않아도 되지만
            VarChar 와 같이 가변 길이의 데이터 타입은 길이를 명시 해주는 것이 DB의 부하를
            조금이나마 줄여 주는 것이다.
            </remarks>
        </member>
        <member name="M:TheOne.Data.OleDb.OleDbParamCollection.Add(System.String,System.Data.OleDb.OleDbType)">
            <summary>
            <see cref="T:System.Data.OleDb.OleDbParameter"/>를 <see cref="T:TheOne.Data.OleDb.OleDbParamCollection"/>에 추가 한다.
            </summary>
            <param name="parameterName">Parameter 이름</param>
            <param name="dbType">Parameter 타입</param>
            <returns><see cref="T:System.Data.OleDb.OleDbParameter"/> 객체를 반환한다.</returns>
            <remarks>
            OleDbParameter는 Parameter의 이름과 상관없이 추가된 순서에 영향을 받는다. 
            따라서 Parameter를 추가하는 순서는 쿼리문의 매개변수 설정 순서와 같아야 한다.
            Parameter를 추가할 때 Parameter의 타입과 길이를 명시해 주는 것이 좋다.
            Int, DateTime 과 같이 길이가 고정되어 있는 타입에 대해서는 길이를 주지 않아도 되지만
            VarChar 와 같이 가변 길이의 데이터 타입은 길이를 명시 해주는 것이 DB의 부하를
            조금이나마 줄여 주는 것이다.
            </remarks>
        </member>
        <member name="M:TheOne.Data.OleDb.OleDbParamCollection.Add(System.String,System.Data.OleDb.OleDbType,System.Int32,System.Data.ParameterDirection)">
            <summary>
            <see cref="T:System.Data.OleDb.OleDbParameter"/>를 <see cref="T:TheOne.Data.OleDb.OleDbParamCollection"/>에 추가 한다.
            </summary>
            <param name="parameterName">Parameter 이름</param>
            <param name="dbType">Parameter 타입</param>
            <param name="size">Parameter 길이</param>
            <param name="direction">Parameter 방향(input, output, return)</param>
            <returns><see cref="T:System.Data.OleDb.OleDbParameter"/> 객체를 반환한다.</returns>
            <remarks>
            OleDbParameter는 Parameter의 이름과 상관없이 추가된 순서에 영향을 받는다. 
            따라서 Parameter를 추가하는 순서는 쿼리문의 매개변수 설정 순서와 같아야 한다.
            Parameter를 추가할 때 Parameter의 타입과 길이를 명시해 주는 것이 좋다.
            Int, DateTime 과 같이 길이가 고정되어 있는 타입에 대해서는 길이를 주지 않아도 되지만
            VarChar 와 같이 가변 길이의 데이터 타입은 길이를 명시 해주는 것이 DB의 부하를
            조금이나마 줄여 주는 것이다.
            <br/>
            문자열 출력 매개변수를 추가하는 경우에는 출력값의 최대 길이를 지정해야 한다. 문자열 출력 매개변수의 길이를 0으로 
            지정하면 예외가 발생하고, 최대 길이보다 작은 값을 지정하는 경우에는 실제값의 일부분만 출력될 수 있다.
            </remarks>
        </member>
        <member name="M:TheOne.Data.OleDb.OleDbParamCollection.Add(System.String,System.Data.OleDb.OleDbType,System.Object)">
            <summary>
            <see cref="T:System.Data.OleDb.OleDbParameter"/>를 <see cref="T:TheOne.Data.OleDb.OleDbParamCollection"/>에 추가 한다.
            </summary>
            <param name="parameterName">Parameter 이름</param>
            <param name="dbType">Parameter 타입</param>
            <param name="paramValue">Parameter 값</param>
            <returns><see cref="T:System.Data.OleDb.OleDbParameter"/> 객체를 반환한다.</returns>
            <remarks>
            OleDbParameter는 Parameter의 이름과 상관없이 추가된 순서에 영향을 받는다. 
            따라서 Parameter를 추가하는 순서는 쿼리문의 매개변수 설정 순서와 같아야 한다.
            Parameter를 추가할 때 Parameter의 타입과 길이를 명시해 주는 것이 좋다.
            Int, DateTime 과 같이 길이가 고정되어 있는 타입에 대해서는 길이를 주지 않아도 되지만
            VarChar 와 같이 가변 길이의 데이터 타입은 길이를 명시 해주는 것이 DB의 부하를
            조금이나마 줄여 주는 것이다.
            </remarks>
        </member>
        <member name="M:TheOne.Data.OleDb.OleDbParamCollection.Add(System.String,System.Data.OleDb.OleDbType,System.Int32,System.Object)">
            <summary>
            <see cref="T:System.Data.OleDb.OleDbParameter"/>를 <see cref="T:TheOne.Data.OleDb.OleDbParamCollection"/>에 추가 한다.
            </summary>
            <param name="parameterName">Parameter 이름</param>
            <param name="dbType">Parameter 타입</param>
            <param name="size">Parameter 길이</param>
            <param name="paramValue">Parameter 값</param>
            <returns><see cref="T:System.Data.OleDb.OleDbParameter"/> 객체를 반환한다.</returns>
            <remarks>
            OleDbParameter는 Parameter의 이름과 상관없이 추가된 순서에 영향을 받는다. 
            따라서 Parameter를 추가하는 순서는 쿼리문의 매개변수 설정 순서와 같아야 한다.
            Parameter를 추가할 때 Parameter의 타입과 길이를 명시해 주는 것이 좋다.
            Int, DateTime 과 같이 길이가 고정되어 있는 타입에 대해서는 길이를 주지 않아도 되지만
            VarChar 와 같이 가변 길이의 데이터 타입은 길이를 명시 해주는 것이 DB의 부하를
            조금이나마 줄여 주는 것이다.
            </remarks>
        </member>
        <member name="M:TheOne.Data.OleDb.OleDbParamCollection.Add(System.String,System.Data.OleDb.OleDbType,System.Int32,System.Data.ParameterDirection,System.Object)">
            <summary>
            <see cref="T:System.Data.OleDb.OleDbParameter"/>를 <see cref="T:TheOne.Data.OleDb.OleDbParamCollection"/>에 추가 한다.
            </summary>
            <param name="parameterName">Parameter 이름</param>
            <param name="dbType">Parameter 타입</param>
            <param name="size">Parameter 길이</param>
            <param name="direction">Parameter 방향(input, output, return)</param>
            <param name="paramValue">Parameter 값</param>
            <returns><see cref="T:System.Data.OleDb.OleDbParameter"/> 객체를 반환한다.</returns>
            <remarks>
            OleDbParameter는 Parameter의 이름과 상관없이 추가된 순서에 영향을 받는다. 
            따라서 Parameter를 추가하는 순서는 쿼리문의 매개변수 설정 순서와 같아야 한다.
            Parameter를 추가할 때 Parameter의 타입과 길이를 명시해 주는 것이 좋다.
            Int, DateTime 과 같이 길이가 고정되어 있는 타입에 대해서는 길이를 주지 않아도 되지만
            VarChar 와 같이 가변 길이의 데이터 타입은 길이를 명시 해주는 것이 DB의 부하를
            조금이나마 줄여 주는 것이다.
            <br/>
            문자열 출력 매개변수를 추가하는 경우에는 출력값의 최대 길이를 지정해야 한다. 문자열 출력 매개변수의 길이를 0으로 
            지정하면 예외가 발생하고, 최대 길이보다 작은 값을 지정하는 경우에는 실제값의 일부분만 출력될 수 있다.
            </remarks>
        </member>
        <member name="M:TheOne.Data.OleDb.OleDbParamCollection.CreateParameter(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Object)">
            <summary>
            <see cref="T:System.Data.OleDb.OleDbParameter"/> 클래스의 새 인스턴스를 초기화하고 반환한다.
            </summary>
            <param name="name">Parameter 이름</param>
            <param name="type">Parameter 타입</param>
            <param name="size">Parameter 길이</param>
            <param name="direction">Parameter 방향</param>
            <param name="value">Parameter 값</param>
            <returns><see cref="T:System.Data.OleDb.OleDbParameter"/> 객체를 반환한다.</returns>
        </member>
        <member name="T:TheOne.Data.OleDb.OleDbAccess">
            <summary>
            <see cref="T:TheOne.Data.DbAccess">DbAccess</see> 추상 클래스의 concreate 클래스로서 OLEDB를 통해
            데이터소스에 접근하는 데이터 액세스 Helper 클래스 이다.
            </summary>
            <remarks>
            OLEDB .NET 공급자는 명명된 매개 변수를 지원하지 않고, 물음표(?) 자리 표시자를 사용해야 한다. 
            예를 들면 다음과 같다.
            SELECT * FROM Customers WHERE CustomerID = ?
            따라서 <see cref="T:TheOne.Data.OleDb.OleDbAccess"/> 개체에 매개변수를 추가하는 순서는 쿼리문에서 매개변수의 물음표 자리 순서와 일치해야 한다.
            </remarks>
            <example>
            <code>
            public void  button1_Click(object sender, System.EventArgs e)
            {
            	DbAccess db = DatabaseFactory.CreateDatabase();
            	string strSQL = "SELECT * FROM emp WHERE deptno = ?";
            	
            	DBParamCollection parameters = db.CreateParamCollection();
            	parameters.Add("deptno", 30);		// 매개변수의 이름은 의미가 없다.
            	
            	DataSet ds = new DataSet();
            	db.ExecuteSql(strSQL, "emp", ds, parameters.ToArray() );
            	
            	dataGrid1.DataSource = ds.Tables[0];
            }
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.OleDb.OleDbAccess.#ctor(System.Data.OleDb.OleDbTransaction)">
            <summary>
            지정된 <see cref="T:System.Data.OleDb.OleDbTransaction"/> 객체의 트랜잭션에 참여하는 <see cref="T:TheOne.Data.OleDb.OleDbAccess"/> 클래스의 새 인스턴스를 초기화한다.
            </summary>
            <param name="transaction"><see cref="T:System.Data.IDbTransaction"/> 객체.</param>
        </member>
        <member name="M:TheOne.Data.OleDb.OleDbAccess.#ctor(System.String)">
            <summary>
            매개변수로 제공된 ConnectionString을 연결문자열로 사용하는  <see cref="T:TheOne.Data.OleDb.OleDbAccess"/> 클래스의 새 인스턴스를 초기화한다.
            </summary>
            <param name="connectionString">connection string</param>
        </member>
        <member name="M:TheOne.Data.OleDb.OleDbAccess.#ctor(System.String,System.Boolean)">
            <summary>
            매개변수로 제공된 ConnectionString값을 연결문자열로 사용하는
            <see cref="T:TheOne.Data.OleDb.OleDbAccess"/> 클래스의 새 인스턴스를 초기화한다.
            </summary>
            <exception cref="T:TheOne.Data.DBException">
            openConn 상태가 true일 때 또는 DB 접속 시도가 실패한 경우 발생한다.
            </exception>
            <param name="connectionString">connection string 값</param>
            <param name="openConn">Connection open 여부</param>
        </member>
        <member name="M:TheOne.Data.OleDb.OleDbAccess.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            지정된 provider 명, 서버명(데이터 소스), 사용자 ID, 암호를 이용하여 연결 문자열을 만들고
            <see cref="T:TheOne.Data.OleDb.OleDbAccess"/> 클래스의 새 인스턴스를 초기화한다.
            </summary>
            <param name="provider">OLE DB 프로바이더 이름</param>
            <param name="dataSource">데이터 소스 이름(서버명)</param>
            <param name="userID">사용자 ID</param>
            <param name="password">암호</param>
        </member>
        <member name="M:TheOne.Data.OleDb.OleDbAccess.#ctor(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            지정된 provider 명, 서버명(데이터 소스), 사용자 ID, 암호를 이용하여 연결 문자열을 만들고
            <see cref="T:TheOne.Data.OleDb.OleDbAccess"/> 클래스의 새 인스턴스를 초기화한다.
            </summary>
            <remarks>
            연결할 데이터베이스는 사용자 ID의 기본 데이타베이스를 사용한다.
            </remarks>
            <exception cref="T:TheOne.Data.DBException">
            openConn 상태가 true일 때 또는 DB 접속 시도가 실패한 경우 발생한다.
            </exception>
            <param name="provider">OLE DB 프로바이더 이름</param>
            <param name="dataSource">데이터 소스 이름(서버명)</param>
            <param name="userID">사용자 ID</param>
            <param name="password">암호</param>
            <param name="openConn">Connection open 여부</param>
        </member>
        <member name="M:TheOne.Data.OleDb.OleDbAccess.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            지정된 provider 명, 서버명(데이터 소스), 데이터베이스명(initial catalog), 사용자 ID, 암호를 이용하여 연결 문자열을 만들고
            <see cref="T:TheOne.Data.OleDb.OleDbAccess"/> 클래스의 새 인스턴스를 초기화한다.
            </summary>
            <param name="provider">OLE DB 프로바이더 이름</param>
            <param name="dataSource">데이터 소스 이름(서버명)</param>
            <param name="initialCatalog">데이터베이스명(initial catalog)</param>
            <param name="userID">사용자 ID</param>
            <param name="password">암호</param>
            
        </member>
        <member name="M:TheOne.Data.OleDb.OleDbAccess.#ctor(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            지정된 provider 명, 서버명(데이터 소스), 데이터베이스명(initial catalog), 사용자 ID, 암호를 이용하여 연결 문자열을 만들고
            <see cref="T:TheOne.Data.OleDb.OleDbAccess"/> 클래스의 새 인스턴스를 초기화한다.
            </summary>
            <exception cref="T:TheOne.Data.DBException">
            openConn 상태가 true일 때 또는 DB 접속 시도가 실패한 경우 발생한다.
            </exception>
            <param name="provider">OLE DB 프로바이더 이름</param>
            <param name="dataSource">데이터 소스 이름(서버명)</param>
            <param name="initialCatalog">데이터베이스명(initial catalog)</param>
            <param name="userID">사용자 ID</param>
            <param name="password">암호</param>
            <param name="openConn">Connection open 여부</param>
        </member>
        <member name="M:TheOne.Data.OleDb.OleDbAccess.InitConnection(System.String,System.Boolean)">
            <summary>
            매개변수로 제공된 ConnectionString값을 연결문자열로 사용하는 <see cref="T:System.Data.OleDb.OleDbConnection"/> 클래스의 새 인스턴스를 초기화한다.
            </summary>
            <param name="connectionString">Connection String 값</param>
            <param name="openConn">Connection open 여부</param>
        </member>
        <member name="M:TheOne.Data.OleDb.OleDbAccess.Open">
            <summary>
            데이터베이스에 연결을 한다.
            </summary>
            <exception cref="T:TheOne.Data.DBException">
            DB 접속시 오류가 발생하면 발생한다. 실제 예외인 OleDbException 은
            InnerException 을 통해 접근이 가능하다.
            </exception>
        </member>
        <member name="M:TheOne.Data.OleDb.OleDbAccess.Close">
            <summary>
            데이터베이스에 대한 연결을 닫는다.
            </summary>
            <exception cref="T:TheOne.Data.DBException">
            DB 접속시 오류가 발생하면 발생한다. 실제 예외인 OleDbException 은
            InnerException 을 통해 접근이 가능하다.
            </exception>
        </member>
        <member name="M:TheOne.Data.OleDb.OleDbAccess.PrepareExecution(System.Data.OleDb.OleDbCommand,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            Database Connection Open을 수행하고 매개변수를 Command 객체에 추가한 다음
            트랜잭션 객체와 Command 객체를 연결한다. 
            ExecuteXXX 메서드에서 공통으로 수행하는 Command 수행 준비 작업이다.
            </summary>
            <param name="cmd"></param>
            <param name="commandType"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:TheOne.Data.OleDb.OleDbAccess.PrepareExecution(System.Data.OleDb.OleDbCommand,System.Data.IDataParameter[])">
            <summary>
            Database Connection Open을 수행하고 매개변수를 Command 객체에 추가한 다음
            트랜잭션 객체와 Command 객체를 연결한다. 
            ExecuteXXX 메서드에서 공통으로 수행하는 Command 수행 준비 작업이다.
            </summary>
            <param name="cmd"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:TheOne.Data.OleDb.OleDbAccess.CreateDBException(System.String,System.Data.OleDb.OleDbException)">
            <summary>
             ExecuteXXX 메서드 및 트랜잭션 메쏘드에서 예외발생시 수행하는 작업이다.
            </summary>
            <param name="commandText"></param>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:TheOne.Data.OleDb.OleDbAccess.CreateDBException(System.String,System.String)">
            <summary>
            트랜잭션 관련 메쏘드에서 예외 발생시 수행하는 작업이다.
            </summary>
            <param name="message"></param>
            <param name="commandText"></param>
            <returns></returns>
        </member>
        <member name="M:TheOne.Data.OleDb.OleDbAccess.CreateCmd(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            <see cref="T:System.Data.OleDb.OleDbCommand"/> 클래스의 새 인스턴스를 만들고 실행될 구문 또는 저장 프로시저명과 명령 형식, 매개변수 정보등을 할당한 후 반환한다.
            </summary>
            <param name="commandText">실행될 구문 또는 저장 프로시저명</param>
            <param name="commandType">명령 형식(CommandType)을 지정</param>
            <param name="parameters">OleDbCommand에 추가될 매개변수 정보</param>
            <returns><see cref="T:System.Data.OleDb.OleDbCommand"/> 객체를 반환한다.</returns>
        </member>
        <member name="M:TheOne.Data.OleDb.OleDbAccess.ExecuteCmd(System.Data.IDbCommand,System.String,System.Data.DataSet,System.Data.IDataParameter[])">
            <summary>
            일반적인 SQL 문장 혹은 저장 프로시저를 실행한다.
            실행결과는 매개변수로 지정된 DataSet에 채운다.
            </summary>
            <exception cref="T:TheOne.Data.DBException">
            지정된 커맨드를 수행하는 도중 DB 측에서 오류가 발생하면 발생한다.
            구체적인 상세 예외는 InnerException을 통해 접근이 가능하다.
            </exception>
            <param name="command">SQL 문장 또는 저장 프로시저를 실행할 Command 객체</param>
            <param name="tableName">결과를 저장할 DataSet 내의 테이블 이름</param>
            <param name="ds">결과를 저장할 DataSet 객체</param>
            <param name="parameters">IDataParameter객체의 매개변수 배열</param>
            <returns>SQL 문장(SP) 수행후 반환된 첫번째 결과 집합의 행의 수를 반환한다</returns>
        </member>
        <member name="M:TheOne.Data.OleDb.OleDbAccess.ExecuteCmdNonQuery(System.Data.IDbCommand,System.Data.IDataParameter[])">
            <summary>
            결과 집합이 없는 SQL 문장 혹은 저장 프로시저를 실행한다.
            </summary>
            <exception cref="T:TheOne.Data.DBException">
            지정된 커맨드를 수행하는 도중 DB 측에서 오류가 발생하면 발생한다.
            구체적인 상세 예외는 InnerException을 통해 접근이 가능하다.
            </exception>
            <param name="command">SQL 문장 또는 저장 프로시저를 실행할 Command 객체</param>
            <param name="parameters">IDataParameter객체의 매개변수 배열</param>
            <returns>SQL 문장(SP) 의 실행 후 영향을 받는 행의 수를 반환한다.</returns>
        </member>
        <member name="M:TheOne.Data.OleDb.OleDbAccess.ExecuteCmdReader(System.Data.IDbCommand,System.Data.IDataParameter[])">
            <summary>
            DataReader를 반환하는 SQL 문장 혹은 저장 프로시저를 실행하고 반환한다. 
            </summary>
            <exception cref="T:TheOne.Data.DBException">
            지정된 커맨드를 수행하는 도중 DB 측에서 오류가 발생하면 발생한다.
            구체적인 상세 예외는 InnerException을 통해 접근이 가능하다.
            </exception>
            <param name="command">SQL 문장 또는 저장 프로시저를 실행할 Command 객체</param>
            <param name="parameters">IDataParameter객체의 매개변수 배열</param>
            <returns><see cref="T:System.Data.OleDb.OleDbDataReader"/> 객체를 반환한다.</returns>
        </member>
        <member name="M:TheOne.Data.OleDb.OleDbAccess.ExecuteCmdScalar(System.Data.IDbCommand,System.Data.IDataParameter[])">
            <summary>
            단일 값(scalar value)을 반환하는 SQL 문장 혹은 저장 프로시저를 실행한다.
            </summary>
            <exception cref="T:TheOne.Data.DBException">
            지정된 커맨드를 수행하는 도중 DB 측에서 오류가 발생하면 발생한다.
            구체적인 상세 예외는 InnerException을 통해 접근이 가능하다.
            </exception>
            <remarks>
            SQL 쿼리 혹은 저장 프로시저의 scalar 값이라 함은 결과 집합의 첫 번째 행의 첫 번째 열을 말한다.
            </remarks>
            <param name="command">SQL 문장 또는 저장 프로시저를 실행할 Command 객체</param>
            <param name="parameters">IDataParameter객체의 매개변수 배열</param>
            <returns>SQL 문장 혹은 저장 프로시저 결과에 대한 scalar 값을 반환한다.</returns>
        </member>
        <member name="M:TheOne.Data.OleDb.OleDbAccess.ExecuteCmdTableMapping(System.Data.IDbCommand,System.String,System.String[],System.Data.DataSet,System.Data.IDataParameter[])">
            <summary>
            2개 이상의 결과 집합을 반환하는 SQL 문장 혹은 저장 프로시저를 수행하고
            결과를 테이블 매핑을 통해 지정된 DataSet 에 채운다.
            </summary>
            <exception cref="T:TheOne.Data.DBException">
            지정된 커맨드를 수행하는 도중 DB 측에서 오류가 발생하면 발생한다.
            구체적인 상세 예외는 InnerException을 통해 접근이 가능하다.
            </exception>
            <param name="command">SQL 문장 또는 저장 프로시저를 실행할 Command 객체</param>
            <param name="tableName">결과를 저장할 DataSet 내의 테이블 이름</param>
            <param name="mappingNames">DataSet안의 Table이름이과의 일치</param>
            <param name="ds">DataSet의 DataSet을 리턴한다.</param>
            <param name="parameters">IDataParameter객체의 매개변수 배열</param>
            <returns>SQL 문장(SP) 수행후 첫번째 결과 집합의 행의 수를 반환한다.</returns>
        </member>
        <member name="M:TheOne.Data.OleDb.OleDbAccess.ExecuteCmd(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.Data.IDataParameter[])">
            <summary>
            일반적인 SQL 문장 혹은 저장 프로시저를 실행한다.
            실행결과는 매개변수로 지정된 DataSet에 채운다.
            </summary>
            <exception cref="T:TheOne.Data.DBException">
            지정된 커맨드를 수행하는 도중 DB 측에서 오류가 발생하면 발생한다.
            구체적인 상세 예외는 InnerException을 통해 접근이 가능하다.
            </exception>
            <param name="commandText">저장 프로시저 이름 또는 SQL쿼리 내용</param>
            <param name="commandType">commandText 매개변수가 어떠한 명령인지를 나타내는 CommandType</param>
            <param name="tableName">결과를 저장할 DataSet 내의 테이블 이름</param>
            <param name="ds">결과를 저장할 DataSet 객체</param>
            <param name="parameters">IDataParameter객체의 매개변수 배열</param>
            <returns>SQL 문장(SP) 수행후 반환된 첫번째 결과 집합의 행의 수를 반환한다.</returns>
        </member>
        <member name="M:TheOne.Data.OleDb.OleDbAccess.ExecuteCmdNonQuery(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            결과 집합이 없는 SQL 문장 혹은 저장 프로시저를 실행한다. 
            </summary>
            <exception cref="T:TheOne.Data.DBException">
            지정된 커맨드를 수행하는 도중 DB 측에서 오류가 발생하면 발생한다.
            구체적인 상세 예외는 InnerException을 통해 접근이 가능하다.
            </exception>
            <param name="commandText">저장 프로시저 이름 또는 SQL쿼리내용</param>
            <param name="commandType">commandText 매개변수가 어떠한 명령인지를 나타내는 CommandType</param>
            <param name="parameters">IDataParameter객체의 매개변수 배열</param>
            <returns>SQL 문장(SP) 의 실행 후 영향을 받는 행의 수를 반환한다.</returns>
        </member>
        <member name="M:TheOne.Data.OleDb.OleDbAccess.ExecuteCmdReader(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            DataReader를 반환하는 SQL 문장 혹은 저장 프로시저를 실행한다.
            </summary>
            <exception cref="T:TheOne.Data.DBException">
            지정된 커맨드를 수행하는 도중 DB 측에서 오류가 발생하면 발생한다.
            구체적인 상세 예외는 InnerException을 통해 접근이 가능하다.
            </exception>
            <param name="commandText">저장 프로시저 이름 또는 SQL쿼리내용</param>
            <param name="commandType">commandText 매개변수가 어떠한 명령인지를 나타내는 CommandType</param>
            <param name="parameters">IDataParameter객체의 매개변수 배열</param>
            <returns><see cref="T:System.Data.OleDb.OleDbDataReader"/> 객체를 반환한다.</returns>
        </member>
        <member name="M:TheOne.Data.OleDb.OleDbAccess.ExecuteCmdScalar(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            단일 값(scalar value)을 반환하는 SQL 문장 혹은 저장 프로시저를 실행한다.
            </summary>
            <exception cref="T:TheOne.Data.DBException">
            지정된 커맨드를 수행하는 도중 DB 측에서 오류가 발생하면 발생한다.
            구체적인 상세 예외는 InnerException을 통해 접근이 가능하다.
            </exception>
            <remarks>
            SQL 쿼리 혹은 저장 프로시저의 스칼라 값이라 함은 결과 집합의 첫번째 레코드의
            첫번째 컬럼의 값을 말한다.
            </remarks>
            <param name="commandText">저장 프로시저 이름 또는 SQL쿼리내용</param>
            <param name="commandType">commandText 매개변수가 어떠한 명령인지를 나타내는 CommandType</param>
            <param name="parameters">IDataParameter객체의 매개변수 배열</param>
            <returns>SQL 문장 혹은 저장 프로시저 결과에 대한 scalar 값을 반환한다.</returns>
        </member>
        <member name="M:TheOne.Data.OleDb.OleDbAccess.ExecuteCmdTableMapping(System.String,System.Data.CommandType,System.String,System.String[],System.Data.DataSet,System.Data.IDataParameter[])">
            <summary>
            2개 이상의 결과 집합을 반환하는 SQL 문장 혹은 저장 프로시저를 수행하고
            결과를 테이블 매핑을 통해 지정된 DataSet 에 채운다(Fill).
            </summary>
            <exception cref="T:TheOne.Data.DBException">
            지정된 커맨드를 수행하는 도중 DB 측에서 오류가 발생하면 발생한다.
            구체적인 상세 예외는 InnerException을 통해 접근이 가능하다.
            </exception>
            <param name="commandText">저장 프로시저 이름 또는 SQL쿼리내용</param>
            <param name="tableName">결과를 저장할 DataSet 내의 테이블 이름</param>
            <param name="mappingNames">DataSet안의 Table이름이과의 일치</param>
            <param name="commandType">commandText 매개변수가 어떠한 명령인지를 나타내는 CommandType</param>
            <param name="ds">DataSet의 DataSet을 리턴한다.</param>
            <param name="parameters">IDataParameter객체의 매개변수 배열</param>
            <returns>SQL 문장(SP) 수행후 첫번째 결과 집합의 행의 수를 반환한다.</returns>
        </member>
        <member name="M:TheOne.Data.OleDb.OleDbAccess.CreateParameter">
            <summary>
            <see cref="T:System.Data.OleDb.OleDbParameter"/> 클래스의 새 인스턴스를 초기화하고 반환한다.
            </summary>
            <returns><see cref="T:System.Data.OleDb.OleDbParameter"/> 객체를 반환한다.</returns>
        </member>
        <member name="M:TheOne.Data.OleDb.OleDbAccess.CreateParameter(System.String,System.Object)">
            <summary>
            지정된 이름/값으로 <see cref="T:System.Data.OleDb.OleDbParameter"/> 클래스의 새 인스턴스를 초기화하고 반환한다.
            </summary>
            <param name="paramName">Parameter 이름</param>
            <param name="paramValue">Parameter 값</param>
            <returns><see cref="T:System.Data.OleDb.OleDbParameter"/> 객체를 반환한다.</returns>
        </member>
        <member name="M:TheOne.Data.OleDb.OleDbAccess.CreateParamCollection">
            <summary>
            <see cref="T:TheOne.Data.OleDb.OleDbParamCollection"/> 클래스의 새 인스턴스를 초기화하고 반환한다.
            </summary>
            <returns><see cref="T:TheOne.Data.OleDb.OleDbParamCollection"/> 객체를 반환한다.</returns>
        </member>
        <member name="M:TheOne.Data.OleDb.OleDbAccess.CreateParamCollection(System.Boolean)">
            <summary>
            지정된 조건을 사용하여 <see cref="T:TheOne.Data.OleDb.OleDbParamCollection"/> 클래스의 새 인스턴스를 초기화하고 반환한다.
            </summary>
            <param name="useDBNull">true면 Parameter 추가시에 닷넷 null을 가지는 객체의 Value값을 DBNull.Value 값으로 자동 변환한다.</param>
            <returns><see cref="T:TheOne.Data.OleDb.OleDbParamCollection"/> 객체를 반환한다.</returns>
        </member>
        <member name="M:TheOne.Data.OleDb.OleDbAccess.BeginTrans(System.Data.IsolationLevel)">
            <summary>
            로컬 트랜잭션을 시작한다.
            </summary>
            <param name="level">트랜잭션 IsolationLevel</param>
            <remarks>
            이 메쏘드 호출 후, 모든 커맨드는 CommitTrans/RollbackTrans 메쏘드가 호출
            되기 전까지 트랜잭션 문맥하에서 수행되게 된다.
            COM+를 사용하지 않을 때, 수동 트랜잭션(manual transaction)으로서 사용되며
            Transaction 객체는 이 클래스의 필드로서 저장된다. Transaction 객체에 대한
            접근은 <see cref="P:TheOne.Data.OleDb.OleDbAccess.Transaction">Transaction</see>프로퍼티를 통해 가능하다.
            트랜잭션은 해당 DB에 대해서만 수행되며 분산 트랜잭션이 아니다. 따라서
            CommitTrans 메쏘드나 RollbackTrans 메쏘드를 통해 트랜잭션을 commit 혹은
            rollback 해야 한다.
            </remarks>
        </member>
        <member name="M:TheOne.Data.OleDb.OleDbAccess.CommitTrans">
            <summary>
            로컬 트랜잭션을 Commit 한다.
            </summary>
            <remarks>
            BeginTrans 메쏘드를 통해 시작된 트랜잭션을 commit 한다. 이 메쏘드가
            호출되기 전에 <see cref="M:TheOne.Data.OleDb.OleDbAccess.BeginTrans(System.Data.IsolationLevel)">BeginTrans</see>가 호출되어야 한다.
            이 메쏘드는 COM+의 자동 트랜잭션(automatic transaction)을 사용하지 않을
            때에만 사용되어야 한다.
            </remarks>
        </member>
        <member name="M:TheOne.Data.OleDb.OleDbAccess.RollbackTrans">
            <summary>
            로컬 트랜잭션을 Rollback 한다.
            </summary>
            <remarks>
            BeginTrans 메쏘드를 통해 시작된 트랜잭션을 rollback 한다. 이 메쏘드가
            호출되기 전에 <see cref="M:TheOne.Data.OleDb.OleDbAccess.BeginTrans(System.Data.IsolationLevel)">BeginTrans</see>가 호출되어야 한다.
            이 메쏘드는 COM+의 자동 트랜잭션(automatic transaction)을 사용하지 않을
            때에만 사용되어야 한다.
            </remarks>
        </member>
        <member name="M:TheOne.Data.OleDb.OleDbAccess.GetNativeError(System.Data.OleDb.OleDbException)">
            <summary>
            OleDbException에서 오류 코드를 읽는다.
            OleDbException의 경우, DB 오류가 중첩 오류로 기록되기 때문에
            추가 처리가 필요하다. 
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:TheOne.Data.OleDb.OleDbAccess.GetMessage(System.Data.OleDb.OleDbException)">
            <summary>
            OleDbException에서 오류 메시지를 읽는다.
            OleDbException의 경우, DB 오류가 중첩 오류로 기록되기 때문에
            추가 처리가 필요하다. 
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="P:TheOne.Data.OleDb.OleDbAccess.Connection">
            <summary>
            <see cref="T:TheOne.Data.DbAccess"/> 클래스가 사용하는 Connection 객체를 가져온다.
            </summary>
        </member>
        <member name="P:TheOne.Data.OleDb.OleDbAccess.Transaction">
             <summary>
            <see cref="T:TheOne.Data.DbAccess"/> 클래스가 사용하는 Transaction 객체를 가져온다.
             </summary>
        </member>
        <member name="P:TheOne.Data.OleDb.OleDbAccess.CommandTimeout">
            <summary>
            Command 객체의 CommandTimeout값을 가져오거나 가져오거나 설정한다.
            </summary>
        </member>
        <member name="T:TheOne.Data.ParamEnumerator">
            <summary>
            ParamCollection 객체에 대한 Enumerator를 제공한다.
            </summary>
            <remarks>
            ParamCollection에 있는 Parameter 항목을 열거할 수 있도록 한다. 
            컬렉션 멤버에 액세스할 필요 없이 foreach문을 사용하여 모든 멤버에 직접 액세스할 수 있다. 
            </remarks>
        </member>
        <member name="M:TheOne.Data.ParamEnumerator.#ctor(TheOne.Data.DBParamCollection)">
            <summary>
            지정된 <see cref="T:TheOne.Data.DBParamCollection"/> 객체를 사용하여 <see cref="T:TheOne.Data.ParamEnumerator"/> 클래스의 새 인스턴스를 초기화한다.
            </summary>
            <param name="col"><see cref="T:TheOne.Data.DBParamCollection"/> 객체</param>
        </member>
        <member name="M:TheOne.Data.ParamEnumerator.Reset">
            <summary>
            컬렉션의 첫 번째 요소 앞의 초기 위치에 열거자를 설정한다.
            </summary>
        </member>
        <member name="M:TheOne.Data.ParamEnumerator.MoveNext">
            <summary>
            열거자를 컬렉션의 다음 요소로 이동한다.
            </summary>
            <returns>열거자가 다음 요소로 이동한 경우 true를 반환되고, 컬렉션의 끝을 지난 경우 false를 반환된다.</returns>
        </member>
        <member name="P:TheOne.Data.ParamEnumerator.Current">
            <summary>
            컬렉션의 현재 요소를 가져온다.
            </summary>
        </member>
        <member name="T:TheOne.Data.Resources.Default">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:TheOne.Data.Resources.Default.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:TheOne.Data.Resources.Default.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:TheOne.Data.Resources.Default.DatabaseFactory_CreateObject_1">
            <summary>
              Looks up a localized string similar to {0} 형식의 Provider 가 .ctor(string) 타입의 생성자를 제공하지 않습니다..
            </summary>
        </member>
        <member name="P:TheOne.Data.Resources.Default.DatabaseSection_this_1">
            <summary>
              Looks up a localized string similar to &lt;{0}&gt;에서 \&quot;{1}\&quot;라는 설정을 찾을 수 없습니다..
            </summary>
        </member>
        <member name="P:TheOne.Data.Resources.Default.DbAccess_BuildParameters_1">
            <summary>
              Looks up a localized string similar to 유효하지 않은 파라미터명입니다..
            </summary>
        </member>
        <member name="P:TheOne.Data.Resources.Default.DbAccess_BuildParameters_2">
            <summary>
              Looks up a localized string similar to 유효하지 않은 값입니다. .
            </summary>
        </member>
        <member name="P:TheOne.Data.Resources.Default.DbAccess_BuildParameters_3">
            <summary>
              Looks up a localized string similar to 전달된 파라미터와 값이 서로 맞지 않습니다..
            </summary>
        </member>
        <member name="P:TheOne.Data.Resources.Default.DbAccess_DefaultTableName_1">
            <summary>
              Looks up a localized string similar to 유효하지 않은 테이블명입니다..
            </summary>
        </member>
        <member name="P:TheOne.Data.Resources.Default.DbAccess_IsLocking_1">
            <summary>
              Looks up a localized string similar to NeoDEEX 프레임워크 내부에서 제어되고 있는 동안에는 Open, Close, BeginTrans, CommitTrans, RollbackTrans 메서드를 사용할 수 없습니다..
            </summary>
        </member>
        <member name="P:TheOne.Data.Resources.Default.DBParamCollection_Remove_1">
            <summary>
              Looks up a localized string similar to 파라메터가 존재하지 않습니다.
            </summary>
        </member>
        <member name="P:TheOne.Data.Resources.Default.DBParamCollection_RemoveAt_1">
            <summary>
              Looks up a localized string similar to 주어진 인덱스가 잘 못되었습니다.
            </summary>
        </member>
        <member name="P:TheOne.Data.Resources.Default.DBParamCollection_this_1">
            <summary>
              Looks up a localized string similar to 파라메터가 존재하지 않습니다.
            </summary>
        </member>
        <member name="P:TheOne.Data.Resources.Default.DBParamCollection_this_2">
            <summary>
              Looks up a localized string similar to 주어진 인덱스가 잘 못되었습니다.
            </summary>
        </member>
        <member name="P:TheOne.Data.Resources.Default.OdbcDbAccess_BeginTrans_1">
            <summary>
              Looks up a localized string similar to 트랜젝션이 이미 시작되었습니다..
            </summary>
        </member>
        <member name="P:TheOne.Data.Resources.Default.OdbcDbAccess_BeginTrans_2">
            <summary>
              Looks up a localized string similar to 트랜젝션 시작..
            </summary>
        </member>
        <member name="P:TheOne.Data.Resources.Default.OdbcDbAccess_BeginTrans_3">
            <summary>
              Looks up a localized string similar to DB가 열리지 않았습니다..
            </summary>
        </member>
        <member name="P:TheOne.Data.Resources.Default.OdbcDbAccess_CommitTrans_1">
            <summary>
              Looks up a localized string similar to 트랜젝션이 시작되지 않았습니다..
            </summary>
        </member>
        <member name="P:TheOne.Data.Resources.Default.OdbcDbAccess_CommitTrans_2">
            <summary>
              Looks up a localized string similar to 트랜젝션 commit.
            </summary>
        </member>
        <member name="P:TheOne.Data.Resources.Default.OdbcDbAccess_CommitTrans_3">
            <summary>
              Looks up a localized string similar to DB가 열리지 않았습니다..
            </summary>
        </member>
        <member name="P:TheOne.Data.Resources.Default.OdbcDbAccess_RollbackTrans_1">
            <summary>
              Looks up a localized string similar to 트랜젝션이 시작되지 않았습니다..
            </summary>
        </member>
        <member name="P:TheOne.Data.Resources.Default.OdbcDbAccess_RollbackTrans_2">
            <summary>
              Looks up a localized string similar to 트랜젝션 Rollback.
            </summary>
        </member>
        <member name="P:TheOne.Data.Resources.Default.OdbcDbAccess_RollbackTrans_3">
            <summary>
              Looks up a localized string similar to DB가 열리지 않았습니다..
            </summary>
        </member>
        <member name="P:TheOne.Data.Resources.Default.OdbcParamCollection_Add_1">
            <summary>
              Looks up a localized string similar to 동일한 이름을 가진 파라메터가 이미 존재합니다.
            </summary>
        </member>
        <member name="P:TheOne.Data.Resources.Default.OdbcParamCollection_CreateParameter_1">
            <summary>
              Looks up a localized string similar to 동일한 이름을 가진 파라메터가 이미 존재합니다.
            </summary>
        </member>
        <member name="P:TheOne.Data.Resources.Default.OleDbAccess_BeginTrans_1">
            <summary>
              Looks up a localized string similar to 트랜젝션이 이미 시작되었습니다..
            </summary>
        </member>
        <member name="P:TheOne.Data.Resources.Default.OleDbAccess_BeginTrans_2">
            <summary>
              Looks up a localized string similar to 트랜젝션 시작.
            </summary>
        </member>
        <member name="P:TheOne.Data.Resources.Default.OleDbAccess_BeginTrans_3">
            <summary>
              Looks up a localized string similar to DB가 열리지 않았습니다..
            </summary>
        </member>
        <member name="P:TheOne.Data.Resources.Default.OleDbAccess_CommitTrans_1">
            <summary>
              Looks up a localized string similar to 트랜젝션이 시작되지 않았습니다..
            </summary>
        </member>
        <member name="P:TheOne.Data.Resources.Default.OleDbAccess_CommitTrans_2">
            <summary>
              Looks up a localized string similar to 트랜젝션 commit.
            </summary>
        </member>
        <member name="P:TheOne.Data.Resources.Default.OleDbAccess_CommitTrans_3">
            <summary>
              Looks up a localized string similar to DB가 열리지 않았습니다..
            </summary>
        </member>
        <member name="P:TheOne.Data.Resources.Default.OleDbAccess_RollbackTrans_1">
            <summary>
              Looks up a localized string similar to 트랜젝션이 시작되지 않았습니다..
            </summary>
        </member>
        <member name="P:TheOne.Data.Resources.Default.OleDbAccess_RollbackTrans_2">
            <summary>
              Looks up a localized string similar to 트랜잭션 Rollback.
            </summary>
        </member>
        <member name="P:TheOne.Data.Resources.Default.OleDbAccess_RollbackTrans_3">
            <summary>
              Looks up a localized string similar to DB가 열리지 않았습니다..
            </summary>
        </member>
        <member name="P:TheOne.Data.Resources.Default.OleDbParamCollection_Add_1">
            <summary>
              Looks up a localized string similar to 동일한 이름을 가진 파라메터가 이미 존재합니다.
            </summary>
        </member>
        <member name="P:TheOne.Data.Resources.Default.OleDbParamCollection_CreateParameter_1">
            <summary>
              Looks up a localized string similar to 동일한 이름을 가진 파라메터가 이미 존재합니다.
            </summary>
        </member>
        <member name="P:TheOne.Data.Resources.Default.SqlDbAccess_BeginTrans_1">
            <summary>
              Looks up a localized string similar to 트랜젝션이 이미 시작되었습니다..
            </summary>
        </member>
        <member name="P:TheOne.Data.Resources.Default.SqlDbAccess_BeginTrans_2">
            <summary>
              Looks up a localized string similar to 트랜젝션 시작.
            </summary>
        </member>
        <member name="P:TheOne.Data.Resources.Default.SqlDbAccess_BeginTrans_3">
            <summary>
              Looks up a localized string similar to DB가 열리지 않았습니다..
            </summary>
        </member>
        <member name="P:TheOne.Data.Resources.Default.SqlDbAccess_CommitTrans_1">
            <summary>
              Looks up a localized string similar to 트랜젝션이 시작되지 않았습니다..
            </summary>
        </member>
        <member name="P:TheOne.Data.Resources.Default.SqlDbAccess_CommitTrans_2">
            <summary>
              Looks up a localized string similar to 트랜젝션 commit.
            </summary>
        </member>
        <member name="P:TheOne.Data.Resources.Default.SqlDbAccess_CommitTrans_3">
            <summary>
              Looks up a localized string similar to DB가 열리지 않았습니다..
            </summary>
        </member>
        <member name="P:TheOne.Data.Resources.Default.SqlDbAccess_RollbackTrans_1">
            <summary>
              Looks up a localized string similar to 트랜젝션이 시작되지 않았습니다..
            </summary>
        </member>
        <member name="P:TheOne.Data.Resources.Default.SqlDbAccess_RollbackTrans_2">
            <summary>
              Looks up a localized string similar to 트랜잭션 Rollback.
            </summary>
        </member>
        <member name="P:TheOne.Data.Resources.Default.SqlDbAccess_RollbackTrans_3">
            <summary>
              Looks up a localized string similar to DB가 열리지 않았습니다..
            </summary>
        </member>
        <member name="P:TheOne.Data.Resources.Default.SqlParamCollection_Add_1">
            <summary>
              Looks up a localized string similar to 동일한 이름을 가진 파라메터가 이미 존재합니다.
            </summary>
        </member>
        <member name="P:TheOne.Data.Resources.Default.SqlParamCollection_CreateParameter_1">
            <summary>
              Looks up a localized string similar to 동일한 이름을 가진 파라메터가 이미 존재합니다.
            </summary>
        </member>
        <member name="T:TheOne.Data.SqlClient.SqlParamCollection">
            <summary>
            SqlParameter 객체들에 대한 컬렉션을 제공한다.
            </summary>
            <remarks>
            SqlParameter들에 대한 컬렉션으로써 Parameter 이름을 통해 SqlParameter 객체에
            접근 가능하도록 해준다. 또한 이 컬렉션은 null 로 설정된 SqlParameter 객체의
            값을 DBNull 로 변경해 주기위한 SetNullToDBNull 메서드를 제공한다.
            </remarks>
        </member>
        <member name="M:TheOne.Data.SqlClient.SqlParamCollection.#ctor">
            <summary>
            <see cref="T:TheOne.Data.SqlClient.SqlParamCollection"/> 클래스의 새 인스턴스를 초기화한다.
            </summary>
        </member>
        <member name="M:TheOne.Data.SqlClient.SqlParamCollection.#ctor(System.Boolean)">
            <summary>
            지정된 조건으로 <see cref="T:TheOne.Data.SqlClient.SqlParamCollection"/> 클래스의 새 인스턴스를 초기화한다.
            </summary>
            <param name="useDBNull">true이면 추가되는 Parameter의 닷넷 null 값을 DBNull로 자동변환한다.</param>
        </member>
        <member name="M:TheOne.Data.SqlClient.SqlParamCollection.Add(System.String,System.Object)">
            <summary>
            <see cref="T:System.Data.SqlClient.SqlParameter"/>를 <see cref="T:TheOne.Data.SqlClient.SqlParamCollection"/>에 추가 한다.
            </summary>
            <param name="parameterName">Parameter 이름</param>
            <param name="paramValue">Parameter 값</param>
            <returns><see cref="T:System.Data.SqlClient.SqlParameter"/> 객체를 반환한다.</returns>
            <remarks>
            이 메서드는 Parameter 이름과 값만을 이용하여 SqlParameter 객체를 초기화 한다.
            Parameter의 타입이 명시되지 않기 때문에 권장할만한 패턴은 아니다.
            <br/><br/>
            Parmeter는 Parameter 이름과 더불어 타입, 길이를 명시해 주는 것이 좋다.
            Int, DateTime 과 같이 길이가 고정되어 있는 타입에 대해서는 길이를 주지 않아도 되지만
            VarChar 와 같이 가변 길이의 데이터 타입은 길이를 명시 해주는 것이 DB의 부하를
            조금이나마 줄여 주는 것이다.
            </remarks>
        </member>
        <member name="M:TheOne.Data.SqlClient.SqlParamCollection.Add(System.String,System.Data.SqlDbType)">
            <summary>
            <see cref="T:System.Data.SqlClient.SqlParameter"/>를 <see cref="T:TheOne.Data.SqlClient.SqlParamCollection"/>에 추가 한다.
            </summary>
            <param name="parameterName">Parameter 이름</param>
            <param name="dbType">Parameter 타입</param>
            <returns><see cref="T:System.Data.SqlClient.SqlParameter"/> 객체를 반환한다.</returns>
            <remarks>
            Parameter는 Parameter 이름과 더불어 타입, 길이를 명시해 주는 것이 좋다.
            Int, DateTime 과 같이 길이가 고정되어 있는 타입에 대해서는 길이를 주지 않아도 되지만
            VarChar 와 같이 가변 길이의 데이터 타입은 길이를 명시 해주는 것이 DB의 부하를
            조금이나마 줄여 주는 것이다.
            </remarks>
        </member>
        <member name="M:TheOne.Data.SqlClient.SqlParamCollection.Add(System.String,System.Data.SqlDbType,System.Int32,System.Data.ParameterDirection)">
            <summary>
            <see cref="T:System.Data.SqlClient.SqlParameter"/>를 <see cref="T:TheOne.Data.SqlClient.SqlParamCollection"/>에 추가 한다.
            </summary>
            <param name="parameterName">Parameter 이름</param>
            <param name="dbType">Parameter 타입</param>
            <param name="size">Parameter 길이</param>
            <param name="direction">Parameter 방향(input, output, return)</param>
            <returns><see cref="T:System.Data.SqlClient.SqlParameter"/> 객체를 반환한다.</returns>
            <remarks>
            Parameter는 Parameter 이름과 더불어 타입, 길이를 명시해 주는 것이 좋다.
            Int, DateTime 과 같이 길이가 고정되어 있는 타입에 대해서는 길이를 주지 않아도 되지만
            VarChar 와 같이 가변 길이의 데이터 타입은 길이를 명시 해주는 것이 DB의 부하를
            조금이나마 줄여 주는 것이다.
            <br/>
            문자열 출력 매개변수를 추가하는 경우에는 출력값의 최대 길이를 지정해야 한다. 문자열 출력 매개변수의 길이를 0으로 
            지정하면 예외가 발생하고, 최대 길이보다 작은 값을 지정하는 경우에는 실제값의 일부분만 출력될 수 있다.
            </remarks>
        </member>
        <member name="M:TheOne.Data.SqlClient.SqlParamCollection.Add(System.String,System.Data.SqlDbType,System.Object)">
            <summary>
            <see cref="T:System.Data.SqlClient.SqlParameter"/>를 <see cref="T:TheOne.Data.SqlClient.SqlParamCollection"/>에 추가 한다.
            </summary>
            <param name="parameterName">Parameter 이름</param>
            <param name="dbType">Parameter 타입</param>
            <param name="paramValue">Parameter 값</param>
            <returns><see cref="T:System.Data.SqlClient.SqlParameter"/> 객체를 반환한다.</returns>
            <remarks>
            Parameter는 Parameter 이름과 더불어 타입, 길이를 명시해 주는 것이 좋다.
            Int, DateTime 과 같이 길이가 고정되어 있는 타입에 대해서는 길이를 주지 않아도 되지만
            VarChar 와 같이 가변 길이의 데이터 타입은 길이를 명시 해주는 것이 DB의 부하를
            조금이나마 줄여 주는 것이다. 길이가 명시되지 않거나 길이를 0으로 설정하면
            SqlParameter 객체가 스스로 그 길이를 알아낸다. 날짜나 정수와 같이 그 길이가 고정된 경우
            고정된 길이 값이 사용되지만 문자열과 같은 경우 값으로 사용된 문자열의 길이가 SqlParameter의
            길이로 사용된다.
            </remarks>
        </member>
        <member name="M:TheOne.Data.SqlClient.SqlParamCollection.Add(System.String,System.Data.SqlDbType,System.Int32,System.Object)">
            <summary>
            <see cref="T:System.Data.SqlClient.SqlParameter"/>를 <see cref="T:TheOne.Data.SqlClient.SqlParamCollection"/>에 추가 한다.
            </summary>
            <param name="parameterName">Parameter 이름</param>
            <param name="dbType">Parameter 타입</param>
            <param name="size">Parameter 길이</param>
            <param name="paramValue">Parameter 값</param>
            <returns><see cref="T:System.Data.SqlClient.SqlParameter"/> 객체를 반환한다.</returns>
            <remarks>
            Parameter는 Parameter 이름과 더불어 타입, 길이를 명시해 주는 것이 좋다.
            Int, DateTime 과 같이 길이가 고정되어 있는 타입에 대해서는 길이를 주지 않아도 되지만
            VarChar 와 같이 가변 길이의 데이터 타입은 길이를 명시 해주는 것이 DB의 부하를
            조금이나마 줄여 주는 것이다. 길이가 명시되지 않거나 길이를 0으로 설정하면
            SqlParameter 객체가 스스로 그 길이를 알아낸다. 날짜나 정수와 같이 그 길이가 고정된 경우
            고정된 길이 값이 사용되지만 문자열과 같은 경우 값으로 사용된 문자열의 길이가 SqlParameter의
            길이로 사용된다.
            </remarks>
        </member>
        <member name="M:TheOne.Data.SqlClient.SqlParamCollection.Add(System.String,System.Data.SqlDbType,System.Int32,System.Data.ParameterDirection,System.Object)">
            <summary>
            <see cref="T:System.Data.SqlClient.SqlParameter"/>를 <see cref="T:TheOne.Data.SqlClient.SqlParamCollection"/>에 추가 한다.
            </summary>
            <param name="parameterName">Parameter 이름</param>
            <param name="dbType">Parameter 타입</param>
            <param name="size">Parameter 길이</param>
            <param name="direction">Parameter 방향(input, output, return)</param>
            <param name="paramValue">Parameter 값</param>
            <returns><see cref="T:System.Data.SqlClient.SqlParameter"/> 객체를 반환한다.</returns>
            <remarks>
            Parameter는 Parameter 이름과 더불어 타입, 길이를 명시해 주는 것이 좋다.
            Int, DateTime 과 같이 길이가 고정되어 있는 타입에 대해서는 길이를 주지 않아도 되지만
            VarChar 와 같이 가변 길이의 데이터 타입은 길이를 명시 해주는 것이 DB의 부하를
            조금이나마 줄여 주는 것이다.
            <br/>
            문자열 출력 매개변수를 추가하는 경우에는 출력값의 최대 길이를 지정해야 한다. 문자열 출력 매개변수의 길이를 0으로 
            지정하면 예외가 발생하고, 최대 길이보다 작은 값을 지정하는 경우에는 실제값의 일부분만 출력될 수 있다.
            </remarks>
        </member>
        <member name="M:TheOne.Data.SqlClient.SqlParamCollection.CreateParameter(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Object)">
            <summary>
            <see cref="T:System.Data.SqlClient.SqlParameter"/> 클래스의 새 인스턴스를 초기화하고 반환한다.
            </summary>
            <param name="name">Parameter 이름</param>
            <param name="type">Parameter 타입</param>
            <param name="size">Parameter 길이</param>
            <param name="direction">Parameter 방향</param>
            <param name="value">Parameter 값</param>
            <returns><see cref="T:System.Data.SqlClient.SqlParameter"/> 객체를 반환한다.</returns>
        </member>
        <member name="T:TheOne.Data.SqlClient.SqlDbAccess">
            <summary>
            <see cref="T:TheOne.Data.DbAccess">DbAccess</see> 추상 클래스의 concreate 클래스로서
            Microsoft SQL Server를 액세스하는 데이터 액세스 Helper 클래스 이다.
            </summary>
        </member>
        <member name="M:TheOne.Data.SqlClient.SqlDbAccess.#ctor(System.Data.SqlClient.SqlTransaction)">
            <summary>
            지정된 <see cref="T:System.Data.SqlClient.SqlTransaction"/> 객체의 트랜잭션에 참여하는 <see cref="T:TheOne.Data.SqlClient.SqlDbAccess"/> 클래스의 새 인스턴스를 초기화한다.
            </summary>
            <param name="transaction"><see cref="T:System.Data.IDbTransaction"/> 객체</param>
        </member>
        <member name="M:TheOne.Data.SqlClient.SqlDbAccess.#ctor(System.String)">
            <summary>
            매개변수로 제공된 ConnectionString값을 연결문자열로 사용하는
             <see cref="T:TheOne.Data.SqlClient.SqlDbAccess"/> 클래스의 새 인스턴스를 초기화한다.
            </summary>
            <param name="connectionString">Connection String 값</param>
        </member>
        <member name="M:TheOne.Data.SqlClient.SqlDbAccess.#ctor(System.String,System.Boolean)">
            <summary>
            매개변수로 제공된 ConnectionString값을 연결문자열로 사용하는
             <see cref="T:TheOne.Data.SqlClient.SqlDbAccess"/> 클래스의 새 인스턴스를 초기화한다.
            </summary>
            <exception cref="T:TheOne.Data.DBException">
            openConn 상태가 true일 때 또는 DB 접속 시도가 실패한 경우 발생한다.
            </exception>
            <param name="connectionString">Connection String 값</param>
            <param name="openConn">Connection open 여부</param>
        </member>
        <member name="M:TheOne.Data.SqlClient.SqlDbAccess.#ctor(System.String,System.String,System.String)">
            <summary>
            지정된 서버명(혹은 IP), 사용자 ID, 암호를 이용하여 연결문자열을 만들고
            <see cref="T:TheOne.Data.SqlClient.SqlDbAccess"/> 클래스의 새 인스턴스를 초기화한다.		
            </summary>
            <remarks>
            연결할 데이터베이스는 사용자 ID의 기본 데이터베이스가 사용된다.
            </remarks>
            <param name="server">서버명 혹은 서버 IP</param>
            <param name="userID">사용자 ID</param>
            <param name="password">암호</param>
        </member>
        <member name="M:TheOne.Data.SqlClient.SqlDbAccess.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            지정된 서버명(혹은 IP), 사용자 ID, 암호를 이용하여 연결문자열을 만들고
            <see cref="T:TheOne.Data.SqlClient.SqlDbAccess"/> 클래스의 새 인스턴스를 초기화한다.	
            </summary>
            <remarks>
            연결할 데이터베이스는 사용자 ID의 기본 데이터베이스가 사용된다.
            </remarks>
            <exception cref="T:TheOne.Data.DBException">
            openConn 상태가 true일 때 또는 DB 접속 시도가 실패한 경우 발생한다.
            </exception>
            <param name="server">서버명 혹은 서버 IP</param>
            <param name="userID">사용자 ID</param>
            <param name="password">암호</param>
            <param name="openConn">Connection open 여부</param>
        </member>
        <member name="M:TheOne.Data.SqlClient.SqlDbAccess.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            지정된 서버명(혹은 IP), 사용자 ID, 암호, 데이터베이스를 이용하여 연결문자열을 만들고
            <see cref="T:TheOne.Data.SqlClient.SqlDbAccess"/> 클래스의 새 인스턴스를 초기화한다.
            </summary>
            <param name="server">서버명 혹은 서버 IP</param>
            <param name="dataBase">연결할 데이터베이스명</param>
            <param name="userID">사용자 ID</param>
            <param name="password">암호</param>
        </member>
        <member name="M:TheOne.Data.SqlClient.SqlDbAccess.#ctor(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            지정된 서버명(혹은 IP), 사용자 ID, 암호, 데이터베이스를 이용하여 연결문자열을 만들고
            <see cref="T:TheOne.Data.SqlClient.SqlDbAccess"/> 클래스의 새 인스턴스를 초기화한다.
            </summary>
            <exception cref="T:TheOne.Data.DBException">
            openConn 상태가 true일 때 또는 DB 접속 시도가 실패한 경우 발생한다.
            </exception>
            <param name="server">서버명 혹은 서버 IP</param>
            <param name="dataBase">연결할데이터베이스명</param>
            <param name="userID">사용자 ID</param>
            <param name="password">암호</param>
            <param name="openConn">Connection open 여부</param>
        </member>
        <member name="M:TheOne.Data.SqlClient.SqlDbAccess.InitConnection(System.String,System.Boolean)">
            <summary>
            매개변수로 제공된 ConnectionString값을 연결문자열로 사용하는 <see cref="T:TheOne.Data.SqlClient.SqlDbAccess"/> 클래스의 새 인스턴스를 초기화한다. 
            </summary>
            <param name="connectionString">Connection String 값</param>
            <param name="openConn">Connection open 여부</param>
        </member>
        <member name="M:TheOne.Data.SqlClient.SqlDbAccess.Open">
            <summary>
            데이터베이스에 연결을 한다.
            </summary>
            <exception cref="T:TheOne.Data.DBException">
            DB 접속시 오류가 발생하면 발생한다. 실제 예외인 SqlException 은
            InnerException 을 통해 접근이 가능하다.
            </exception>
        </member>
        <member name="M:TheOne.Data.SqlClient.SqlDbAccess.Close">
            <summary>
            데이터베이스에 대한 연결을 닫는다.
            </summary>
            <exception cref="T:TheOne.Data.DBException">
            DB 접속시 오류가 발생하면 발생한다. 실제 예외인 SqlException 은
            InnerException 을 통해 접근이 가능하다.
            </exception>
        </member>
        <member name="M:TheOne.Data.SqlClient.SqlDbAccess.PrepareExecution(System.Data.SqlClient.SqlCommand,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            Database Connection Open을 수행하고 매개변수를 Command 객체에 추가한 다음
            트랜잭션 객체와 Command 객체를 연결한다. 
            ExecuteXXX 메서드에서 공통으로 수행하는 Command 수행 준비 작업이다.
            </summary>
            <param name="cmd"></param>
            <param name="commandType"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:TheOne.Data.SqlClient.SqlDbAccess.PrepareExecution(System.Data.SqlClient.SqlCommand,System.Data.IDataParameter[])">
            <summary>
            Database Connection Open을 수행하고 매개변수를 Command 객체에 추가한 다음
            트랜잭션 객체와 Command 객체를 연결한다. 
            ExecuteXXX 메서드에서 공통으로 수행하는 Command 수행 준비 작업이다. 
            </summary>
            <param name="cmd"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:TheOne.Data.SqlClient.SqlDbAccess.CreateDBException(System.String,System.Data.SqlClient.SqlException)">
            <summary>
            ExecuteXXX 메서드 및 트랜잭션 메서드에서 예외발생시 수행하는 작업이다.
            </summary>
            <param name="commandText"></param>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:TheOne.Data.SqlClient.SqlDbAccess.CreateDBException(System.String,System.String)">
            <summary>
            트랜잭션 관련 메서드에서 예외 발생시 수행하는 작업이다.
            </summary>
            <param name="message"></param>
            <param name="commandText"></param>
            <returns></returns>
        </member>
        <member name="M:TheOne.Data.SqlClient.SqlDbAccess.CreateCmd(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            <see cref="T:System.Data.SqlClient.SqlCommand"/> 클래스의 새 인스턴스를 만들고 실행될 구문 또는 저장 프로시저명과 명령 형식, 매개변수 정보등을 설정한다.
            </summary>
            <param name="commandText">실행될 구문 또는 저장 프로시저명</param>
            <param name="commandType">명령 형식(CommandType)을 지정</param>
            <param name="parameters">SqlCommand에 추가될 매개변수 정보</param>
            <returns><see cref="T:System.Data.SqlClient.SqlCommand"/> 객체를 반환한다.</returns>
        </member>
        <member name="M:TheOne.Data.SqlClient.SqlDbAccess.ExecuteCmd(System.Data.IDbCommand,System.String,System.Data.DataSet,System.Data.IDataParameter[])">
            <summary>
            일반적인 SQL 문장 혹은 저장 프로시저를 실행한다.
            실행결과는 매개변수로 지정된 DataSet에 채운다.
            </summary>
            <exception cref="T:TheOne.Data.DBException">
            지정된 커맨드를 수행하는 도중 DB 측에서 오류가 발생하면 발생한다.
            구체적인 상세 예외는 InnerException을 통해 접근이 가능하다.
            </exception>
            <param name="command">SQL 문장 또는 저장 프로시저를 실행할 Command 객체</param>
            <param name="tableName">결과를 저장할 DataSet 내의 테이블 이름</param>
            <param name="ds">결과를 저장할 DataSet 객체</param>
            <param name="parameters">IDataParameter객체의 매개변수 배열</param>
            <returns>SQL 문장(SP) 수행후 반환된 첫번째 결과 집합의 행의 수를 반환한다.</returns>
        </member>
        <member name="M:TheOne.Data.SqlClient.SqlDbAccess.ExecuteCmdNonQuery(System.Data.IDbCommand,System.Data.IDataParameter[])">
            <summary>
            결과 집합이 없는 SQL 문장 혹은 저장 프로시저를 실행한다. 
            </summary>
            <exception cref="T:TheOne.Data.DBException">
            지정된 커맨드를 수행하는 도중 DB 측에서 오류가 발생하면 발생한다.
            구체적인 상세 예외는 InnerException을 통해 접근이 가능하다.
            </exception>
            <param name="command">SQL 문장 또는 저장 프로시저를 실행할 Command 객체</param>
            <param name="parameters">IDataParameter객체의 매개변수 배열</param>
            <returns>SQL 문장(SP) 의 실행 후 영향을 받는 행의 수를 반환한다.</returns>
        </member>
        <member name="M:TheOne.Data.SqlClient.SqlDbAccess.ExecuteCmdReader(System.Data.IDbCommand,System.Data.IDataParameter[])">
            <summary>
            DataReader를 반환하는 SQL 문장 혹은 저장 프로시저를 실행한다.
            </summary>
            <exception cref="T:TheOne.Data.DBException">
            지정된 커맨드를 수행하는 도중 DB 측에서 오류가 발생하면 발생한다.
            구체적인 상세 예외는 InnerException을 통해 접근이 가능하다.
            </exception>
            <param name="command">SQL 문장 또는 저장 프로시저를 실행할 Command 객체</param>
            <param name="parameters">IDataParameter객체의 매개변수 배열</param>
            <returns><see cref="T:System.Data.SqlClient.SqlDataReader"/> 객체를 반환한다.</returns>
        </member>
        <member name="M:TheOne.Data.SqlClient.SqlDbAccess.ExecuteCmdScalar(System.Data.IDbCommand,System.Data.IDataParameter[])">
            <summary>
            단일 값(scalar value)을 반환하는 SQL 문장 혹은 저장 프로시저를 실행한다.
            </summary>
            <exception cref="T:TheOne.Data.DBException">
            지정된 커맨드를 수행하는 도중 DB 측에서 오류가 발생하면 발생한다.
            구체적인 상세 예외는 InnerException을 통해 접근이 가능하다.
            </exception>
            <remarks>
            SQL 쿼리 혹은 저장 프로시저의 스칼라 값이라 함은 결과셋의 첫번째 레코드의
            첫번째 컬럼의 값을 말한다.
            </remarks>
            <param name="command">SQL 문장 또는 저장 프로시저를 실행할 Command 객체</param>
            <param name="parameters">IDataParameter객체의 매개변수 배열</param>
            <returns>SQL 문장 혹은 저장 프로시저 결과에 대한 scalar 값을 반환한다.</returns>
        </member>
        <member name="M:TheOne.Data.SqlClient.SqlDbAccess.ExecuteCmdTableMapping(System.Data.IDbCommand,System.String,System.String[],System.Data.DataSet,System.Data.IDataParameter[])">
            <summary>
            2개 이상의 결과셋을 반환하는 SQL 문장 혹은 저장 프로시저를 수행하고
            결과를 테이블 매핑을 통해 지정된 DataSet에 채운다.
            </summary>
            <exception cref="T:TheOne.Data.DBException">
            지정된 커맨드를 수행하는 도중 DB 측에서 오류가 발생하면 발생한다.
            구체적인 상세 예외는 InnerException을 통해 접근이 가능하다.
            </exception>
            <param name="command">SQL 문장 또는 저장 프로시저를 실행할 Command 객체</param>
            <param name="tableName">결과를 저장할 DataSet 내의 테이블 이름</param>
            <param name="mappingNames">DataSet안의 Table이름이과의 일치</param>
            <param name="ds">DataSet의 DataSet을 리턴한다.</param>
            <param name="parameters">IDataParameter객체의 매개변수 배열</param>
            <returns>SQL 문장(SP) 수행후 첫번째 결과 집합의 행의 수를 반환한다.</returns>
        </member>
        <member name="M:TheOne.Data.SqlClient.SqlDbAccess.ExecuteCmd(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.Data.IDataParameter[])">
            <summary>
            일반적인 SQL 문장 혹은 저장 프로시저를 실행한다.
            실행결과는 매개변수로 지정된 DataSet에 채운다.
            </summary>
            <exception cref="T:TheOne.Data.DBException">
            지정된 커맨드를 수행하는 도중 DB 측에서 오류가 발생하면 발생한다.
            구체적인 상세 예외는 InnerException을 통해 접근이 가능하다.
            </exception>
            <param name="commandText">저장 프로시저 이름 또는 SQL쿼리 내용</param>
            <param name="commandType">commandText 매개변수가 어떠한 명령인지를 나타내는 CommandType</param>
            <param name="tableName">결과를 저장할 DataSet 내의 테이블 이름</param>
            <param name="ds">결과를 저장할 DataSet 객체</param>
            <param name="parameters">IDataParameter객체의 매개변수 배열</param>
            <returns>SQL 문장(SP) 수행후 반환된 첫번째 결과 집합의 행의 수를 반환한다.</returns>
        </member>
        <member name="M:TheOne.Data.SqlClient.SqlDbAccess.ExecuteCmdNonQuery(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            결과 집합이 없는 SQL 문장 혹은 저장 프로시저를 실행한다. 
            </summary>
            <exception cref="T:TheOne.Data.DBException">
            지정된 커맨드를 수행하는 도중 DB 측에서 오류가 발생하면 발생한다.
            구체적인 상세 예외는 InnerException을 통해 접근이 가능하다.
            </exception>
            <param name="commandText">저장 프로시저 이름 또는 SQL쿼리내용</param>
            <param name="commandType">commandText 매개변수가 어떠한 명령인지를 나타내는 CommandType</param>
            <param name="parameters">IDataParameter객체의 매개변수 배열</param>
            <returns>SQL 문장(SP) 의 실행 후 영향을 받는 행의 수를 반환한다.</returns>
        </member>
        <member name="M:TheOne.Data.SqlClient.SqlDbAccess.ExecuteCmdReader(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            DataReader를 반환하는 SQL 문장 혹은 저장 프로시저를 실행한다.
            </summary>
            <exception cref="T:TheOne.Data.DBException">
            지정된 커맨드를 수행하는 도중 DB 측에서 오류가 발생하면 발생한다.
            구체적인 상세 예외는 InnerException을 통해 접근이 가능하다.
            </exception>
            <param name="commandText">저장 프로시저 이름 또는 SQL쿼리내용</param>
            <param name="commandType">commandText 매개변수가 어떠한 명령인지를 나타내는 CommandType</param>
            <param name="parameters">IDataParameter객체의 매개변수 배열</param>
            <returns><see cref="T:System.Data.SqlClient.SqlDataReader"/> 객체를 반환한다.</returns>
        </member>
        <member name="M:TheOne.Data.SqlClient.SqlDbAccess.ExecuteCmdScalar(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            단일 값(scalar value)을 반환하는 SQL 문장 혹은 저장 프로시저를 실행한다.
            </summary>
            <exception cref="T:TheOne.Data.DBException">
            지정된 커맨드를 수행하는 도중 DB 측에서 오류가 발생하면 발생한다.
            구체적인 상세 예외는 InnerException을 통해 접근이 가능하다.
            </exception>
            <remarks>
            SQL 쿼리 혹은 저장 프로시저의 스칼라 값이라 함은 결과셋의 첫번째 레코드의
            첫번째 컬럼의 값을 말한다.
            </remarks>
            <param name="commandText">저장 프로시저 이름 또는 SQL쿼리내용</param>
            <param name="commandType">commandText 매개변수가 어떠한 명령인지를 나타내는 CommandType</param>
            <param name="parameters">IDataParameter객체의 매개변수 배열</param>
            <returns>SQL 문장 혹은 저장 프로시저 결과에 대한 scalar 값을 반환한다.</returns>
        </member>
        <member name="M:TheOne.Data.SqlClient.SqlDbAccess.ExecuteCmdTableMapping(System.String,System.Data.CommandType,System.String,System.String[],System.Data.DataSet,System.Data.IDataParameter[])">
            <summary>
            2개 이상의 결과셋을 반환하는 SQL 문장 혹은 저장 프로시저를 수행하고
            결과를 테이블 매핑을 통해 지정된 DataSet에 채운다.
            </summary>
            <exception cref="T:TheOne.Data.DBException">
            지정된 커맨드를 수행하는 도중 DB 측에서 오류가 발생하면 발생한다.
            구체적인 상세 예외는 InnerException을 통해 접근이 가능하다.
            </exception>
            <param name="commandText">저장 프로시저 이름 또는 SQL쿼리내용</param>
            <param name="tableName">결과를 저장할 DataSet 내의 테이블 이름</param>
            <param name="mappingNames">DataSet안의 Table이름이과의 일치</param>
            <param name="commandType">commandText 매개변수가 어떠한 명령인지를 나타내는 CommandType</param>
            <param name="ds">DataSet의 DataSet을 리턴한다.</param>
            <param name="parameters">IDataParameter객체의 매개변수 배열</param>
            <returns>SQL 문장(SP) 수행후 첫번째 결과 집합의 행의 수를 반환한다.</returns>
        </member>
        <member name="M:TheOne.Data.SqlClient.SqlDbAccess.CreateParameter">
            <summary>
            <see cref="T:System.Data.SqlClient.SqlParameter"/> 클래스의 새 인스턴스를 초기화하고 반환한다.
            </summary>
            <returns><see cref="T:System.Data.SqlClient.SqlParameter"/> 객체를 반환한다.</returns>
        </member>
        <member name="M:TheOne.Data.SqlClient.SqlDbAccess.CreateParameter(System.String,System.Object)">
            <summary>
            지정된 이름/값으로 <see cref="T:System.Data.SqlClient.SqlParameter"/> 클래스의 새 인스턴스를 초기화하고 반환한다.
            </summary>
            <param name="paramName">Parameter 이름</param>
            <param name="paramValue">Parameter 값</param>
            <returns><see cref="T:System.Data.SqlClient.SqlParameter"/> 객체를 반환한다.</returns>
        </member>
        <member name="M:TheOne.Data.SqlClient.SqlDbAccess.CreateParamCollection">
            <summary>
            <see cref="T:TheOne.Data.SqlClient.SqlParamCollection"/> 클래스의 새 인스턴스를 초기화하고 반환한다.
            </summary>
            <returns><see cref="T:TheOne.Data.SqlClient.SqlParamCollection"/> 객체를 반환한다.</returns>
        </member>
        <member name="M:TheOne.Data.SqlClient.SqlDbAccess.CreateParamCollection(System.Boolean)">
            <summary>
            지정된 조건을 사용하여 <see cref="T:TheOne.Data.SqlClient.SqlParamCollection"/> 클래스의 새 인스턴스를 초기화하고 반환한다.
            </summary>
            <param name="useDBNull">true면 Parameter 추가시에 닷넷 null을 가지는 객체의 Value값을 DBNull.Value 값으로 자동 변환한다.</param>
            <returns><see cref="T:TheOne.Data.SqlClient.SqlParamCollection"/> 객체를 반환한다.</returns>
        </member>
        <member name="M:TheOne.Data.SqlClient.SqlDbAccess.BeginTrans(System.Data.IsolationLevel)">
            <summary>
            로컬 트랜잭션을 시작한다.
            </summary>
            <param name="level">트랜잭션 IsolationLevel</param>
            <remarks>
            이 메서드 호출 후, 모든 커맨드는 CommitTrans/RollbackTrans 메서드가 호출
            되기 전까지 트랜잭션 문맥하에서 수행되게 된다.
            COM+를 사용하지 않을 때, 수동 트랜잭션(manual transaction)으로서 사용되며
            Transaction 객체는 이 클래스의 필드로서 저장된다. Transaction 객체에 대한
            접근은 <see cref="P:TheOne.Data.SqlClient.SqlDbAccess.Transaction">Transaction</see>속성을 통해 가능하다.
            트랜잭션은 해당 DB에 대해서만 수행되며 분산 트랜잭션이 아니다. 따라서
            CommitTrans 메서드나 RollbackTrans 메서드를 통해 트랜잭션을 commit 혹은
            rollback 해야 한다.
            </remarks>
        </member>
        <member name="M:TheOne.Data.SqlClient.SqlDbAccess.CommitTrans">
            <summary>
            로컬 트랜잭션을 Commit 한다.
            </summary>
            <remarks>
            BeginTrans 메서드를 통해 시작된 트랜잭션을 commit 한다. 이 메서드가
            호출되기 전에 <see cref="M:TheOne.Data.SqlClient.SqlDbAccess.BeginTrans(System.Data.IsolationLevel)">BeginTrans</see>가 호출되어야 한다.
            이 메서드는 COM+의 자동 트랜잭션(automatic transaction)을 사용하지 않을
            때에만 사용되어야 한다.
            </remarks>
        </member>
        <member name="M:TheOne.Data.SqlClient.SqlDbAccess.RollbackTrans">
            <summary>
            로컬 트랜잭션을 Rollback 한다.
            </summary>
            <remarks>
            BeginTrans 메서드를 통해 시작된 트랜잭션을 rollback 한다. 이 메서드가
            호출되기 전에 <see cref="M:TheOne.Data.SqlClient.SqlDbAccess.BeginTrans(System.Data.IsolationLevel)">BeginTrans</see>가 호출되어야 한다.
            이 메서드는 COM+의 자동 트랜잭션(automatic transaction)을 사용하지 않을
            때에만 사용되어야 한다.
            </remarks>
        </member>
        <member name="M:TheOne.Data.SqlClient.SqlDbAccess.ExecuteBulkCopy(System.String,System.Data.DataTable)">
            <summary>
            Sql Server에 대용량 데이터 입력한다.
            </summary>
            <remarks>
            Data Access Component(DAC) 에서 <see cref="T:TheOne.Data.DbAccess"/> 객체를 형 변형 하여 사용 한다.       
            </remarks>
            SqlDbAccess sqlDbAccess = this._DbAccess;
            sqlDbAccess.ExecuteBulkCopy("dbo.table1", dt);
            <param name="serverTableName">Sql 서버 대상 테이블 명</param>
            <param name="dt">입력 데이터</param>
        </member>
        <member name="M:TheOne.Data.SqlClient.SqlDbAccess.ExecuteBulkCopy(System.String,System.Data.DataRow[])">
            <summary>
            Sql Server에 대용량 데이터 입력한다.
            </summary>
            <remarks>
            Data Access Component(DAC) 에서 <see cref="T:TheOne.Data.DbAccess"/> 객체를 형 변형 하여 사용 한다.       
            </remarks>
            <example>
            <code>
            SqlDbAccess sqlDbAccess = this._DbAccess;
            sqlDbAccess.ExecuteBulkCopy("dbo.table1", rows);
            </code>
            </example>
            <param name="serverTableName">Sql 서버 대상 테이블 명</param>
            <param name="rows">입력 데이터</param>
        </member>
        <member name="M:TheOne.Data.SqlClient.SqlDbAccess.ExecuteBulkCopy(System.String,System.Data.DataRow[],System.Data.SqlClient.SqlBulkCopyColumnMappingCollection)">
            <summary>
            Sql Server에 대용량 데이터 입력한다.
            </summary>
            <remarks>
            Data Access Component(DAC) 에서 <see cref="T:TheOne.Data.DbAccess"/> 객체를 형 변형 하여 사용 한다.
            </remarks>
            <example>
            <code>
            SqlDbAccess sqlDbAccess = this._DbAccess;
            sqlDbAccess.ExecuteBulkCopy("dbo.table1", rows, mappings);
            </code>
            </example>
            <param name="serverTableName">Sql 서버 대상 테이블 명</param>
            <param name="rows">입력 데이터</param>
            <param name="mappings">데이터 맵핑 테이블</param>
        </member>
        <member name="P:TheOne.Data.SqlClient.SqlDbAccess.Connection">
            <summary>
            <see cref="T:TheOne.Data.DbAccess"/> 클래스가 사용하는 Connection 객체를 가져온다.
            </summary>
        </member>
        <member name="P:TheOne.Data.SqlClient.SqlDbAccess.Transaction">
            <summary>
            <see cref="T:TheOne.Data.DbAccess"/> 클래스가 사용하는 Transaction 객체를 가져온다.
            </summary>
        </member>
        <member name="P:TheOne.Data.SqlClient.SqlDbAccess.CommandTimeout">
            <summary>
            Command 객체의 CommandTimeout값을 가져오거나 가져오거나 설정한다.
            </summary>
        </member>
        <member name="T:TheOne.Data.DBException">
            <summary>
            데이터베이스에 관련된 예외나 데이터엑세스 컴포넌트에서
            발생하는 예외를 나타내는데 사용된다.
            </summary>
        </member>
        <member name="M:TheOne.Data.DBException.#ctor">
            <summary>
            <see cref="T:TheOne.Data.DBException"/> 클래스의 새 인스턴스를 초기화한다.
            </summary>
        </member>
        <member name="M:TheOne.Data.DBException.#ctor(System.String)">
            <summary>
            지정된 오류 메시지를 사용하여 <see cref="T:TheOne.Data.DBException"/> 클래스의 새 인스턴스를 초기화한다.
            </summary>
            <param name="msg">오류를 설명하는 메시지</param>
        </member>
        <member name="M:TheOne.Data.DBException.#ctor(System.String,System.Exception)">
            <summary>
            지정된 오류 메시지와 예외 객체를 사용하여 <see cref="T:TheOne.Data.DBException"/> 클래스의 새 인스턴스를 초기화한다.
            </summary>
            <param name="msg">오류를 설명하는 메시지</param>
            <param name="ie">예외 객체</param>
        </member>
        <member name="M:TheOne.Data.DBException.#ctor(System.Int32)">
            <summary>
            지정된 오류 코드를 사용하여 <see cref="T:TheOne.Data.DBException"/> 클래스의 새 인스턴스를 초기화한다.
            </summary>
            <param name="code">오류 코드</param>
            <remarks>
            <see cref="T:TheOne.Data.DBException"/>이 DB의 오류를 나타내는 경우, 오류코드는 데이터베이스의
            오류코드를 그대로 갖는다. 반면 <see cref="T:TheOne.Data.DBException"/>이 데이터액세스 컴포넌트의
            오류(커넥션 스트링 문제 등)인 경우, 이 코드는 Application 내에서 정의된
            오류 코드이다.
            </remarks>
        </member>
        <member name="M:TheOne.Data.DBException.#ctor(System.String,System.Int32)">
            <summary>
            지정된 오류 메시지와 오류코드를 사용하여 <see cref="T:TheOne.Data.DBException"/> 클래스의 새 인스턴스를 초기화한다.
            </summary>
            <param name="msg">오류를 설명하는 메시지</param>
            <param name="code">오류 코드</param>
            <remarks>
            <see cref="T:TheOne.Data.DBException"/>이 DB의 오류를 나타내는 경우, 오류코드는 데이터베이스의
            오류코드를 그대로 갖는다. 반면 <see cref="T:TheOne.Data.DBException"/>이 데이터액세스 컴포넌트의
            오류(커넥션 스트링 문제 등)인 경우, 이 코드는 Application 내에서 정의된
            오류 코드이다.
            </remarks>
        </member>
        <member name="M:TheOne.Data.DBException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
             serialize된 데이터를 사용하여 <see cref="T:TheOne.Data.DBException"/> 클래스의 새 인스턴스를 초기화한다. 
            </summary>
            <param name="info">serialize된 객체 데이터를 유지하는 객체</param>
            <param name="context">소스 또는 대상에 대한 컨텍스트 정보</param>
        </member>
        <member name="M:TheOne.Data.DBException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            예외에 관한 정보를 <see cref="T:System.Runtime.Serialization.SerializationInfo"/>에 설정한다.
            </summary>
            <remarks>
            Serialization 과정에서 Serializer는 이 메서드를 호출하여 객체의 데이터를 스트림에
            기록하도록 요구한다.
            </remarks>
            <param name="info">throw되는 예외에 대해 serialize된 객체 데이터를 보유하는 <see cref="T:System.Runtime.Serialization.SerializationInfo"/></param>
            <param name="context">소스 또는 대상에 대한 컨텍스트 정보를 포함하는 <see cref="T:System.Runtime.Serialization.StreamingContext"/></param>
        </member>
        <member name="P:TheOne.Data.DBException.Command">
            <summary>
            Command를 가져오거나 설정한다.
            </summary>
            <remarks>
            DB Command는 생성자 호출 파라미터 방법을 제공하지 않는다.
            생성자 호출 파라미터를 제공할 경우 클래스가 너무 복잡해지기 때문이다.
            따라서 Command 속성에 값을 할당하도록 한다.
            </remarks>
        </member>
        <member name="T:TheOne.Data.Odbc.OdbcParamCollection">
            <summary>
            OdbcParameter 객체들에 대한 컬렉션을 제공한다. 
            </summary>
            <remarks>
            OdbcParameter들에 대한 컬렉션으로써 Parameter 이름을 통해 OdbcParameter 객체에
            접근 가능하도록 해준다. 또한 이 컬렉션은 null 로 설정된 OdbcParameter 객체의
            값을 DBNull 로 변경해 주기위한 SetNullToDBNull 메서드를 제공한다.
            </remarks>
        </member>
        <member name="M:TheOne.Data.Odbc.OdbcParamCollection.#ctor">
            <summary>
            <see cref="T:TheOne.Data.Odbc.OdbcParamCollection"/> 클래스의 새 인스턴스를 초기화한다.
            </summary>
        </member>
        <member name="M:TheOne.Data.Odbc.OdbcParamCollection.#ctor(System.Boolean)">
            <summary>
            지정된 조건으로 <see cref="T:TheOne.Data.Odbc.OdbcParamCollection"/> 클래스의 새 인스턴스를 초기화한다.
            </summary>
            <param name="useDBNull">true 이면 추가되는 Parameter의 닷넷 null 값을 DBNull로 자동변환한다.</param>
        </member>
        <member name="M:TheOne.Data.Odbc.OdbcParamCollection.Add(System.String,System.Object)">
            <summary>
            <see cref="T:System.Data.Odbc.OdbcParameter"/>를 <see cref="T:TheOne.Data.Odbc.OdbcParamCollection"/>에 추가 한다.
            </summary>
            <param name="parameterName">Parameter 이름</param>
            <param name="paramValue">Parameter 값</param>
            <returns><see cref="T:System.Data.Odbc.OdbcParameter"/> 객체를 반환한다.</returns>
            <remarks>
            이 메서드는 Parameter 이름과 값만을 이용하여 OdbcParameter 객체를 초기화 한다.
            Parameter의 타입이 명시되지 않기 때문에 권장할만한 패턴은 아니다.
            <br/><br/>
            Parmeter는 Parameter 이름과 더불어 타입, 길이를 명시해 주는 것이 좋다.
            Int, DateTime 과 같이 길이가 고정되어 있는 타입에 대해서는 길이를 주지 않아도 되지만
            VarChar 와 같이 가변 길이의 데이터 타입은 길이를 명시 해주는 것이 DB의 부하를
            조금이나마 줄여 주는 것이다.
            </remarks>
        </member>
        <member name="M:TheOne.Data.Odbc.OdbcParamCollection.Add(System.String,System.Data.Odbc.OdbcType)">
            <summary>
            <see cref="T:System.Data.Odbc.OdbcParameter"/>를 <see cref="T:TheOne.Data.Odbc.OdbcParamCollection"/>에 추가 한다.
            </summary>
            <param name="parameterName">Parameter 이름</param>
            <param name="dbType">Parameter 타입</param>
            <returns><see cref="T:System.Data.Odbc.OdbcParameter"/> 객체를 반환한다.</returns>
            <remarks>
            OdbcParameter는 Parameter 이름과 더불어 타입, 길이를 명시해 주는 것이 좋다.
            Int, DateTime 과 같이 길이가 고정되어 있는 타입에 대해서는 길이를 주지 않아도 되지만
            VarChar 와 같이 가변 길이의 데이터 타입은 길이를 명시 해주는 것이 DB의 부하를
            조금이나마 줄여 주는 것이다.
            </remarks>
        </member>
        <member name="M:TheOne.Data.Odbc.OdbcParamCollection.Add(System.String,System.Data.Odbc.OdbcType,System.Int32,System.Data.ParameterDirection)">
            <summary>
            <see cref="T:System.Data.Odbc.OdbcParameter"/>를 <see cref="T:TheOne.Data.Odbc.OdbcParamCollection"/>에 추가 한다.
            </summary>
            <param name="parameterName">Parameter 이름</param>
            <param name="dbType">Parameter 타입</param>
            <param name="size">Parameter 길이</param>
            <param name="direction">Parameter 방향(input, output, return)</param>
            <returns><see cref="T:System.Data.Odbc.OdbcParameter"/> 객체를 반환한다.</returns>
            <remarks>
            Parameter는 Parameter 이름과 더불어 타입, 길이를 명시해 주는 것이 좋다.
            Int, DateTime 과 같이 길이가 고정되어 있는 타입에 대해서는 길이를 주지 않아도 되지만
            VarChar 와 같이 가변 길이의 데이터 타입은 길이를 명시 해주는 것이 DB의 부하를
            조금이나마 줄여 주는 것이다.
            <br/>
            문자열 출력 매개변수를 추가하는 경우에는 출력값의 최대 길이를 지정해야 한다. 문자열 출력 매개변수의 길이를 0으로 
            지정하면 예외가 발생하고, 최대 길이보다 작은 값을 지정하는 경우에는 실제값의 일부분만 출력될 수 있다.
            </remarks>
        </member>
        <member name="M:TheOne.Data.Odbc.OdbcParamCollection.Add(System.String,System.Data.Odbc.OdbcType,System.Object)">
            <summary>
            <see cref="T:System.Data.Odbc.OdbcParameter"/>를 <see cref="T:TheOne.Data.Odbc.OdbcParamCollection"/>에 추가 한다.
            </summary>
            <param name="parameterName">Parameter 이름</param>
            <param name="dbType">Parameter 타입</param>
            <param name="paramValue">Parameter 값</param>
            <returns><see cref="T:System.Data.Odbc.OdbcParameter"/> 객체를 반환한다.</returns>
            <remarks>
            OdbcParameter는 Parameter 이름과 더불어 타입, 길이를 명시해 주는 것이 좋다.
            Int, DateTime 과 같이 길이가 고정되어 있는 타입에 대해서는 길이를 주지 않아도 되지만
            VarChar 와 같이 가변 길이의 데이터 타입은 길이를 명시 해주는 것이 DB의 부하를
            조금이나마 줄여 주는 것이다.
            </remarks>
        </member>
        <member name="M:TheOne.Data.Odbc.OdbcParamCollection.Add(System.String,System.Data.Odbc.OdbcType,System.Int32,System.Object)">
            <summary>
            <see cref="T:System.Data.Odbc.OdbcParameter"/>를 <see cref="T:TheOne.Data.Odbc.OdbcParamCollection"/>에 추가 한다.
            </summary>
            <param name="parameterName">Parameter 이름</param>
            <param name="dbType">Parameter 타입</param>
            <param name="size">Parameter 길이</param>
            <param name="paramValue">Parameter 값</param>
            <returns><see cref="T:System.Data.Odbc.OdbcParameter"/> 객체를 반환한다.</returns>
            <remarks>
            Parameter는 Parameter 이름과 더불어 타입, 길이를 명시해 주는 것이 좋다.
            Int, DateTime 과 같이 길이가 고정되어 있는 타입에 대해서는 길이를 주지 않아도 되지만
            VarChar 와 같이 가변 길이의 데이터 타입은 길이를 명시 해주는 것이 DB의 부하를
            조금이나마 줄여 주는 것이다.
            </remarks>
        </member>
        <member name="M:TheOne.Data.Odbc.OdbcParamCollection.Add(System.String,System.Data.Odbc.OdbcType,System.Int32,System.Data.ParameterDirection,System.Object)">
            <summary>
            <see cref="T:System.Data.Odbc.OdbcParameter"/>를 <see cref="T:TheOne.Data.Odbc.OdbcParamCollection"/>에 추가 한다.
            </summary>
            <param name="parameterName">Parameter 이름</param>
            <param name="dbType">Parameter 타입</param>
            <param name="size">Parameter 길이</param>
            <param name="direction">Parameter 방향(input, output, return)</param>
            <param name="paramValue">Parameter 값</param>
            <returns><see cref="T:System.Data.Odbc.OdbcParameter"/> 객체를 반환한다.</returns>
            <remarks>
            Parameter는 Parameter 이름과 더불어 타입, 길이를 명시해 주는 것이 좋다.
            Int, DateTime 과 같이 길이가 고정되어 있는 타입에 대해서는 길이를 주지 않아도 되지만
            VarChar 와 같이 가변 길이의 데이터 타입은 길이를 명시 해주는 것이 DB의 부하를
            조금이나마 줄여 주는 것이다.
            <br/>
            문자열 출력 매개변수를 추가하는 경우에는 출력값의 최대 길이를 지정해야 한다. 문자열 출력 매개변수의 길이를 0으로 
            지정하면 예외가 발생하고, 최대 길이보다 작은 값을 지정하는 경우에는 실제값의 일부분만 출력될 수 있다.
            </remarks>		
        </member>
        <member name="M:TheOne.Data.Odbc.OdbcParamCollection.CreateParameter(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Object)">
            <summary>
            <see cref="T:System.Data.Odbc.OdbcParameter"/> 클래스의 새 인스턴스를 초기화하고 반환한다.
            </summary>
            <param name="name">Parameter 이름</param>
            <param name="type">Parameter 타입</param>
            <param name="size">Parameter 길이</param>
            <param name="direction">Parameter 방향</param>
            <param name="value">Parameter 값</param>
            <returns><see cref="T:System.Data.Odbc.OdbcParameter"/> 객체를 반환한다.</returns>
        </member>
        <member name="T:TheOne.Data.DatabaseFactory">
            <summary>
            DatabaseManager 클래스는 NeoDEEX 구성 데이타에 설정된 정보를 이용해서 동적으로 <see cref="T:TheOne.Data.DbAccess"/> 에서 
            파생된 클래스의  새 인스턴스를 생성한다.
            </summary>
            <remarks>
            <see cref="M:TheOne.Data.DatabaseFactory.CreateDatabase"/> 메서드를 호출하면 NeoDEEX 구성 데이터을 정보를 사용하여, <see cref="T:TheOne.Data.DbAccess"/> 에서 
            파생된 클래스의 새 인스턴르를 생성한다.
            NeoDEEX 구성 데이타에 설정된 type 은 <see cref="T:TheOne.Data.DbAccess"/> 에서 파생된 타입의 전체 이름이다.
            </remarks>
            <example>
            	<code lang="XML" description="Database 에 대한 설정">
            &lt;!-- Database Connection String에 대한 설정 --&gt;
                &lt;databaseSection defaultDatabase="SqlProvider"&gt;
                  &lt;add name="SqlProvider" 
                       type="TheOne.Data.SqlClient.SqlDbAccess, TheOne.Data, Version=2.3.0.0, Culture=neutral, PublicKeyToken=6895727a3cc10e00" 
                       connectionString="server=(local);Initial Catalog=Northwind;uid=sa;pwd=123"/&gt;
             
                  &lt;add name="OleProvider" 
                       type="TheOne.Data.Ole.OleDbAccess, TheOne.Data, Version=2.3.0.0, Culture=neutral, PublicKeyToken=6895727a3cc10e00" 
                       connectionString="Provider=SQLOLEDB;Data Source=(local);Initial Catalog=pubs;User ID=sa;Password=123;"/&gt;
             
                  &lt;add name="OdbcProvider" 
                       type="TheOne.Data.Odbc.OdbcDbAccess, TheOne.Data, Version=2.3.0.0, Culture=neutral, PublicKeyToken=6895727a3cc10e00" 
                       connectionString="DRIVER=SQL Server;SERVER=(local);DATABASE=pubs;UID=sa;PWD=123"/&gt;
             
                  &lt;add name="OracleProvider" 
                       type="TheOne.Data.Oracle.OracleDbAccess, TheOne.Data.Oracle, Version=2.3.0.0, Culture=neutral, PublicKeyToken=6895727a3cc10e00" 
                       connectionString="user id=scott;password=tiger;data source=orcl"/&gt;
                &lt;/databaseSection&gt;
            </code>
            	<code lang="CS" description="NeoDEEX 구성 파일에서 defaultDatabase 값을 사용하는 예제">
            public void BindGrid()
            {
                DbAccess db = DatabaseFactory.CreateDatabase();
                DataSet ds = new DataSet();
                db.ExecuteSql("SELECT * FROM Categories", "Categories", ds);
             
                DataGrid1.DataSource = ds.Tables[0];
                DataGrid1.DataBind();
            }
            </code>
                <code lang="CS" description="NeoDEEX 구성 파일에서 특정 database 설정을 사용하는 예제"> 
            public void BindGrid2()
            {
                DbAccess db = DatabaseFactory.CreateDatabase("OleProvider");
                DataSet ds = new DataSet();
                db.ExecuteSql("SELECT * FROM Categories", "Categories", ds);
             
                DataGrid1.DataSource = ds.Tables[0];
                DataGrid1.DataBind();
            }
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DatabaseFactory.CreateDatabase">
            <summary>
            &lt;databaseSection&gt;의 defaultDatabase 값에 설정되어 있는 정보를 이용하여
            <see cref="T:TheOne.Data.DbAccess"/> 에서 파생된 클래스의 새 인스턴스를 반환한다.
            </summary>
            <remarks>
            &lt;databaseSection&gt;요소는 데이터베이스 연결 정보의 컬렉션을 이름/값 쌍으로 지정한다.
            &lt;databaseSection&gt; 요소에 defaultDatabase 값이 설정되어 있지 않은 경우에는 예외가 발생한다. 
            </remarks>
            <returns><see cref="T:TheOne.Data.DbAccess"/> 객체를 반환한다.</returns>
            <example>
            <code>
            public void BindGrid()
            {
            	DbAccess db = DatabaseFactory.CreateDatabase();			// defaulDatabase의 설정 사용
            	DataSet ds = new DataSet();
            	db.ExecuteSql("SELECT * FROM Categories", "Categories", ds);
            
            	DataGrid1.DataSource = ds.Tables[0];
            	DataGrid1.DataBind();
            }
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DatabaseFactory.CreateDatabase(System.Boolean)">
            <summary>
            &lt;databaseSection&gt;의 defaultDatabase 값에 설정되어 있는 정보를 이용하여 
            <see cref="T:TheOne.Data.DbAccess"/> 에서 파생된 클래스의 새 인스턴스를 반환한다.
            </summary>
            <param name="openConn">Connection Open 상태</param>
            <remarks>
            &lt;databaseSection&gt; 요소는 데이터베이스 연결 정보의 컬렉션을 이름/값 쌍으로 지정한다.
            &lt;databaseSection&gt; 요소에 defaultDatabase 값이 설정되어 있지 않은 경우에는 예외가 발생한다.<br/>
            <paramref name="openConn"/> 이 true인 경우에는 Connection을 Open 상태로 반환한다.
            </remarks>
            <returns><see cref="T:TheOne.Data.DbAccess"/> 객체를 반환한다.</returns>
            <example>
            <code>
            public void BindGrid()
            {
            	DbAccess db = DatabaseFactory.CreateDatabase(true);		// defaulDatabase의 설정 사용
            	DataSet ds = new DataSet();
            	db.ExecuteSql("SELECT * FROM Categories", "Categories", ds);
            
            	DataGrid1.DataSource = ds.Tables[0];
            	DataGrid1.DataBind();
            }
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DatabaseFactory.CreateDatabase(System.String)">
            <summary>
            <paramref name="databaseName"/> 의 설정 정보를 이용하여 <see cref="T:TheOne.Data.DbAccess"/> 클래스에서 
            파생된 클래스의 새 인스턴스를 반환한다.
            </summary>
            <param name="databaseName">데이터베이스 연결 정보 이름</param>
            <returns><see cref="T:TheOne.Data.DbAccess"/> 객체를 반환한다.</returns>
            <remarks>
            &lt;databaseSection&gt; 요소는 데이터베이스 연결 정보의 컬렉션을 이름/값 쌍으로 지정한다.
            데이터베이스 연결 정보 컬렉션에서 <paramref name="databaseName"/> 의 이름으로 지정된 데이터베이스 연결 정보를 이용하여, 
            <see cref="T:TheOne.Data.DbAccess"/> 클래스에서 파생된 클래스의 새 인스턴스를 반환한다.
            </remarks>
            <example>
            <code>
            public void BindGrid()
            {
            	DbAccess db = DatabaseFactory.CreateDatabase("OleProvider");
            	DataSet ds = new DataSet();
            	db.ExecuteSql("SELECT * FROM Categories", "Categories", ds);
            
            	DataGrid1.DataSource = ds.Tables[0];
            	DataGrid1.DataBind();
            }
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DatabaseFactory.CreateDatabase(System.String,System.Boolean)">
            <summary>
            <paramref name="databaseName"/> 의 설정 정보를 이용하여 <see cref="T:TheOne.Data.DbAccess"/> 클래스에서 
            파생된 클래스의 새 인스턴스를 반환한다.
            </summary>
            <param name="databaseName">데이터베이스 연결 정보 이름</param>
            <param name="openConn">Connection Open 상태 </param>
            <returns><see cref="T:TheOne.Data.DbAccess"/> 객체를 반환한다.</returns>
            <remarks>
            &lt;databaseSection&gt; 요소는 데이터베이스 연결 정보의 컬렉션을 이름/값 쌍으로 지정한다.
            데이터베이스 연결 정보 컬렉션에서 <paramref name="databaseName"/> 의 이름으로 지정된 데이터베이스 연결 정보를 이용하여, 
            <see cref="T:TheOne.Data.DbAccess"/> 클래스에서 파생된 클래스의 새 인스턴스를 반환한다.
            <br/>
            <paramref name="openConn"/> 이 true인 경우에는 Connection을 Open 상태로 반환한다.
            </remarks>
            <example>
            <code>
            public void BindGrid()
            {
            	DbAccess db = DatabaseFactory.CreateDatabase("SqlProvider", true);
            	DataSet ds = new DataSet();
            	db.ExecuteSql("SELECT * FROM Categories", "Categories", ds);
            
            	DataGrid1.DataSource = ds.Tables[0];
            	DataGrid1.DataBind();
            }
            </code>
            </example>
        </member>
        <member name="M:TheOne.Data.DatabaseFactory.CreateObject(System.Type,System.String)">
            <summary>
            문자열을 매개변수로 받는 <paramref name="type"/>의 생성자를 이용해서 새로운 객체를 생성한다. 
            </summary>
            <remarks>
            문자열을 입력받는 생성자가 없는 경우에는 예외가 발생한다.
            </remarks>
            <param name="type"><see cref="T:System.Type"/> 객체</param>
            <param name="paramString"><see cref="T:System.String"/> 형식의 입력 매개변수</param>
            <returns>생성된 <see cref="T:System.Object"/> 객체를 반환한다.</returns>
        </member>
    </members>
</doc>
